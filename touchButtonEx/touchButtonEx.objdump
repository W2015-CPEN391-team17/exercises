
touchButtonEx.elf:     file format elf32-littlenios2
touchButtonEx.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x000083b0 memsz 0x000083b0 flags r-x
    LOAD off    0x000093d0 vaddr 0x010083d0 paddr 0x01009e70 align 2**12
         filesz 0x00001aa0 memsz 0x00001aa0 flags rw-
    LOAD off    0x0000b910 vaddr 0x0100b910 paddr 0x0100b910 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008094  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000184  0100824c  0100824c  0000924c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aa0  010083d0  01009e70  000093d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  0100b910  0100b910  0000b910  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000ae70  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000a58  00000000  00000000  0000ae98  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000012d6  00000000  00000000  0000b8f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001d377  00000000  00000000  0000cbc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005f82  00000000  00000000  00029f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000eeab  00000000  00000000  0002febf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001634  00000000  00000000  0003ed6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000199b  00000000  00000000  000403a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004f1b  00000000  00000000  00041d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00046c58  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000488  00000000  00000000  00046c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00049dc6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00049dc9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00049dd5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00049dd6  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00049dd7  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00049de2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00049ded  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00049df8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000005d  00000000  00000000  00049e03  2**0
                  CONTENTS, READONLY
 26 .jdi          00005d84  00000000  00000000  00049e60  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000815be  00000000  00000000  0004fbe4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
0100824c l    d  .rodata	00000000 .rodata
010083d0 l    d  .rwdata	00000000 .rwdata
0100b910 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 graphics.c
00000000 l    df *ABS*	00000000 touchButtonMain.c
00000000 l    df *ABS*	00000000 touchScreen.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
010083d0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01004010 l     F .text	00000058 std
0100411c l     F .text	00000008 __fp_lock
01004124 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
010050e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01005144 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01005244 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
01005364 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01005444 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
010055a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
010057cc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01009e60 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
01005a68 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01008d80 l     O .rwdata	00001060 jtag_uart_0
01009de0 l     O .rwdata	0000002c character_lcd_0
01009e0c l     O .rwdata	0000002c rs232_0
01005b78 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01005db0 l     F .text	0000022c altera_avalon_jtag_uart_irq
01005fdc l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01006658 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01007268 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01007454 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01007750 l     F .text	000000dc alt_file_locked
010079b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01008034 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
010081e8 l     F .text	00000040 alt_sim_halt
01000694 g     F .text	00000058 sign
01004e88 g     F .text	00000070 _isatty_r
01005600 g     F .text	0000006c alt_main
010026d8 g     F .text	000000a0 _puts_r
0100b960 g     O .bss	00000100 alt_irq
01004ef8 g     F .text	00000078 _lseek_r
01009e70 g       *ABS*	00000000 __flash_rwdata_start
010067d0 g     F .text	00000034 alt_up_character_lcd_send_cmd
010004f0 g     F .text	0000007c ProgramPalette
0100bbf0 g       *ABS*	00000000 __alt_heap_start
01001564 g     F .text	000001f4 GetPress
01004ac4 g     F .text	00000068 __sseek
01004078 g     F .text	000000a4 __sinit
01001534 g     F .text	00000030 WaitForTouch
01004178 g     F .text	00000068 __sfmoreglue
0100568c g     F .text	00000020 __malloc_unlock
01006eb8 g     F .text	00000090 alt_up_rs232_read_fd
01003560 g     F .text	000000e0 memmove
01004168 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
01006754 g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
01004e14 g     F .text	00000074 _fstat_r
0100b91c g     O .bss	00000004 errno
0100b924 g     O .bss	00000004 alt_argv
01011e38 g       *ABS*	00000000 _gp
01008c00 g     O .rwdata	00000180 alt_fd_list
01001758 g     F .text	00000230 GetRelease
01007390 g     F .text	00000094 alt_find_dev
010034c0 g     F .text	000000a0 memcpy
01006968 g     F .text	0000004c alt_up_character_lcd_write_fd
0100415c g     F .text	0000000c _cleanup_r
01001fa4 g     F .text	000000f8 __floatsidf
01007518 g     F .text	00000078 alt_io_redirect
0100824c g       *ABS*	00000000 __DTOR_END__
01006e44 g     F .text	00000074 alt_up_rs232_read_data
01002778 g     F .text	00000014 puts
010061f4 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
010052a4 g     F .text	000000c0 isatty
01007db0 g     F .text	00000090 alt_icache_flush
0100b910 g     O .bss	00000004 __malloc_top_pad
01002800 g     F .text	0000049c __sfvwrite_r
01003c34 g     F .text	00000070 _sbrk_r
01004f70 g     F .text	00000078 _read_r
01009e58 g     O .rwdata	00000004 alt_max_fd
01006dac g     F .text	00000050 alt_up_rs232_check_parity
010025a0 g     F .text	00000138 __unpack_d
01004cf0 g     F .text	00000110 _fclose_r
01003fdc g     F .text	00000034 fflush
0100b914 g     O .bss	00000004 __malloc_max_sbrked_mem
01007590 g     F .text	000001c0 alt_irq_register
0100056c g     F .text	00000070 HLine
010054b0 g     F .text	000000f0 lseek
01009e3c g     O .rwdata	00000004 _global_impure_ptr
01003640 g     F .text	000005f4 _realloc_r
0100bbf0 g       *ABS*	00000000 __bss_end
01007aac g     F .text	0000010c alt_tick
010013dc g     F .text	000000f0 Init_Touch
01004144 g     F .text	00000018 __fp_lock_all
0100093c g     F .text	00000094 white_red_screen
01007a14 g     F .text	00000098 alt_alarm_stop
0100b92c g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000cc alt_irq_handler
01008bd8 g     O .rwdata	00000028 alt_dev_null
01006c50 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
01007170 g     F .text	00000044 alt_dcache_flush_all
0100209c g     F .text	000000d8 __fixdfsi
010005dc g     F .text	00000070 VLine
01009e70 g       *ABS*	00000000 __ram_rwdata_end
01000450 g     F .text	000000a0 WriteLine
01009e50 g     O .rwdata	00000008 alt_dev_list
01005948 g     F .text	00000120 write
010083d0 g       *ABS*	00000000 __ram_rodata_end
01005170 g     F .text	000000d4 fstat
01006f48 g     F .text	00000094 alt_up_rs232_write_fd
010014cc g     F .text	00000068 ScreenTouched
010012d0 g     F .text	00000068 draw_top_part
0100bbf0 g       *ABS*	00000000 end
01000310 g     F .text	000000a0 WriteHLine
01005cf8 g     F .text	000000b8 altera_avalon_jtag_uart_init
01008248 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
010066cc g     F .text	00000088 alt_avalon_timer_sc_init
0100220c g     F .text	00000080 __clzsi2
01006418 g     F .text	00000240 altera_avalon_jtag_uart_write
01004068 g     F .text	00000004 __sfp_lock_acquire
010033dc g     F .text	000000e4 memchr
01006878 g     F .text	00000078 alt_up_character_lcd_write
010043fc g     F .text	00000314 _free_r
01008038 g     F .text	000001b0 __call_exitprocs
01009e44 g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000004c _start
0100b930 g     O .bss	00000004 _alt_tick_rate
0100b934 g     O .bss	00000004 _alt_nticks
010056ac g     F .text	00000120 read
01005afc g     F .text	0000007c alt_sys_init
01006adc g     F .text	000000b0 alt_up_character_lcd_shift_display
01007f00 g     F .text	00000134 __register_exitproc
01006d6c g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
010003b0 g     F .text	000000a0 WriteVLine
01006b8c g     F .text	00000090 alt_up_character_lcd_erase_pos
0100608c g     F .text	00000074 altera_avalon_jtag_uart_close
010083d0 g       *ABS*	00000000 __ram_rwdata_start
0100824c g       *ABS*	00000000 __ram_rodata_start
0100b938 g     O .bss	00000028 __malloc_current_mallinfo
01005bb0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01007cf8 g     F .text	000000b8 alt_get_fd
01004c80 g     F .text	00000070 _close_r
01007e8c g     F .text	00000074 memcmp
01005c60 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0100bbf0 g       *ABS*	00000000 __alt_stack_base
01005ca8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
010011b8 g     F .text	00000118 draw_bottom_part
01003ca4 g     F .text	0000013c __swsetup_r
01001d4c g     F .text	00000258 __divdf3
010041e0 g     F .text	000000f0 __sfp
010087d0 g     O .rwdata	00000408 __malloc_av_
01004074 g     F .text	00000004 __sinit_lock_release
01001988 g     F .text	000003c4 __muldf3
01004ba8 g     F .text	00000060 __sread
01006cd8 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
01007bd8 g     F .text	00000120 alt_find_file
010071b4 g     F .text	000000b4 alt_dev_llist_insert
0100566c g     F .text	00000020 __malloc_lock
0100588c g     F .text	000000bc sbrk
01003de0 g     F .text	000001fc _fflush_r
0100b910 g       *ABS*	00000000 __bss_start
01004a24 g     F .text	00000098 memset
01001338 g     F .text	000000a4 main
0100b928 g     O .bss	00000004 alt_envp
0100b918 g     O .bss	00000004 __malloc_max_total_mem
01005c08 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01000280 g     F .text	00000090 ReadAPixel
01006a2c g     F .text	000000b0 alt_up_character_lcd_shift_cursor
010008e0 g     F .text	0000005c black_screen
01004abc g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01004e00 g     F .text	00000014 fclose
0100ba60 g     O .bss	00000190 _atexit0
01002c9c g     F .text	00000740 _malloc_r
010006ec g     F .text	000001f4 Line
01009e5c g     O .rwdata	00000004 alt_errno
010047d8 g     F .text	000000b8 _fwalk
01008258 g     O .rodata	00000014 __thenan_df
01006838 g     F .text	00000040 alt_up_character_lcd_open_dev
010042d0 g     F .text	0000012c _malloc_trim_r
0100824c g       *ABS*	00000000 __CTOR_END__
01006804 g     F .text	00000034 alt_up_character_lcd_init
0100824c g       *ABS*	00000000 __flash_rodata_start
0100824c g       *ABS*	00000000 __DTOR_LIST__
01006fdc g     F .text	00000040 alt_up_rs232_open_dev
01005ac8 g     F .text	00000034 alt_irq_init
0100582c g     F .text	00000060 alt_release_fd
01006c1c g     F .text	00000034 alt_up_character_lcd_cursor_off
0100826c g     O .rodata	00000100 __clz_tab
01007e40 g     F .text	00000014 atexit
01004c08 g     F .text	00000078 _write_r
01009e38 g     O .rwdata	00000004 _impure_ptr
0100b920 g     O .bss	00000004 alt_argc
01000204 g     F .text	0000007c WriteAPixel
0100732c g     F .text	00000064 _do_dtors
01000c14 g     F .text	00000414 line_comparison
01000020 g       .exceptions	00000000 alt_irq_entry
0100412c g     F .text	00000018 __fp_unlock_all
01009e48 g     O .rwdata	00000008 alt_fs_list
01006c84 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
01006dfc g     F .text	00000048 alt_up_rs232_write_data
01000020 g       *ABS*	00000000 __ram_exceptions_start
01000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
010009d0 g     F .text	00000244 speed_comparison
01009e70 g       *ABS*	00000000 _edata
0100bbf0 g       *ABS*	00000000 _end
010001b8 g       *ABS*	00000000 __ram_exceptions_end
01006100 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01004b2c g     F .text	0000007c __swrite
01009e40 g     O .rwdata	00000004 __malloc_trim_threshold
01007bb8 g     F .text	00000020 altera_nios2_qsys_irq_init
01007e54 g     F .text	00000038 exit
01004710 g     F .text	000000c8 _fwalk_reent
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
0100406c g     F .text	00000004 __sfp_lock_release
010068f0 g     F .text	00000078 alt_up_character_lcd_string
01001028 g     F .text	00000190 connect_points
01008228 g     F .text	00000020 _exit
0100701c g     F .text	00000154 alt_alarm_start
01002174 g     F .text	00000098 __muldi3
01004890 g     F .text	00000194 __smakebuf_r
0100278c g     F .text	00000074 strlen
0100782c g     F .text	00000188 open
0100064c g     F .text	00000048 abs
01007424 g     F .text	00000030 alt_icache_flush_all
010069b4 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
01009e64 g     O .rwdata	00000004 alt_priority_mask
01009e68 g     O .rwdata	00000008 alt_alarm_list
010072c8 g     F .text	00000064 _do_ctors
01006d30 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
01004fe8 g     F .text	000000fc close
010053c4 g     F .text	00000080 alt_load
0100228c g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
01004070 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406e14 	ori	at,at,440
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18ee5804 	addi	r3,r3,-18080
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18ee5804 	addi	r3,r3,-18080
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c4:	00bffd16 	blt	zero,r2,10001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d0:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001d4:	d6878e14 	ori	gp,gp,7736
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d8:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 10001dc:	10ae4414 	ori	r2,r2,47376

    movhi r3, %hi(__bss_end)
 10001e0:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 10001e4:	18eefc14 	ori	r3,r3,48112

    beq r2, r3, 1f
 10001e8:	10c00326 	beq	r2,r3,10001f8 <_start+0x40>

0:
    stw zero, (r2)
 10001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f4:	10fffd36 	bltu	r2,r3,10001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f8:	10053c40 	call	10053c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001fc:	10056000 	call	1005600 <alt_main>

01000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000200:	003fff06 	br	1000200 <alt_after_alt_main>

01000204 <WriteAPixel>:
/*******************************************************************************************
* Writes a single pixel to the x,y coords specified using the specified colour
* Note colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
********************************************************************************************/
void WriteAPixel(int x, int y, int Colour)
{
 1000204:	defffc04 	addi	sp,sp,-16
 1000208:	df000315 	stw	fp,12(sp)
 100020c:	df000304 	addi	fp,sp,12
 1000210:	e13ffd15 	stw	r4,-12(fp)
 1000214:	e17ffe15 	stw	r5,-8(fp)
 1000218:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS;				// is graphics ready for new command
 100021c:	00a10034 	movhi	r2,33792
 1000220:	1080000b 	ldhu	r2,0(r2)
 1000224:	10bfffcc 	andi	r2,r2,65535
 1000228:	1080004c 	andi	r2,r2,1
 100022c:	1005003a 	cmpeq	r2,r2,zero
 1000230:	103ffa1e 	bne	r2,zero,100021c <WriteAPixel+0x18>

	GraphicsX1Reg = x;				// write coords to x1, y1
 1000234:	00e10034 	movhi	r3,33792
 1000238:	18c00084 	addi	r3,r3,2
 100023c:	e0bffd17 	ldw	r2,-12(fp)
 1000240:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y;
 1000244:	00e10034 	movhi	r3,33792
 1000248:	18c00104 	addi	r3,r3,4
 100024c:	e0bffe17 	ldw	r2,-8(fp)
 1000250:	1880000d 	sth	r2,0(r3)
	GraphicsColourReg = Colour;			// set pixel colour
 1000254:	00e10034 	movhi	r3,33792
 1000258:	18c00384 	addi	r3,r3,14
 100025c:	e0bfff17 	ldw	r2,-4(fp)
 1000260:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = PutAPixel;			// give graphics "write pixel" command
 1000264:	00e10034 	movhi	r3,33792
 1000268:	00800284 	movi	r2,10
 100026c:	1880000d 	sth	r2,0(r3)
}
 1000270:	e037883a 	mov	sp,fp
 1000274:	df000017 	ldw	fp,0(sp)
 1000278:	dec00104 	addi	sp,sp,4
 100027c:	f800283a 	ret

01000280 <ReadAPixel>:
* Read a single pixel from the x,y coords specified and returns its colour
* Note returned colour is a byte and represents a palette number (0-255) not a 24 bit RGB value
*********************************************************************************************/

int ReadAPixel(int x, int y)
{
 1000280:	defffd04 	addi	sp,sp,-12
 1000284:	df000215 	stw	fp,8(sp)
 1000288:	df000204 	addi	fp,sp,8
 100028c:	e13ffe15 	stw	r4,-8(fp)
 1000290:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;					// is graphics ready for new command
 1000294:	00a10034 	movhi	r2,33792
 1000298:	1080000b 	ldhu	r2,0(r2)
 100029c:	10bfffcc 	andi	r2,r2,65535
 10002a0:	1080004c 	andi	r2,r2,1
 10002a4:	1005003a 	cmpeq	r2,r2,zero
 10002a8:	103ffa1e 	bne	r2,zero,1000294 <ReadAPixel+0x14>

	GraphicsX1Reg = x;					// write coords to x1, y1
 10002ac:	00e10034 	movhi	r3,33792
 10002b0:	18c00084 	addi	r3,r3,2
 10002b4:	e0bffe17 	ldw	r2,-8(fp)
 10002b8:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y;
 10002bc:	00e10034 	movhi	r3,33792
 10002c0:	18c00104 	addi	r3,r3,4
 10002c4:	e0bfff17 	ldw	r2,-4(fp)
 10002c8:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = GetAPixel;		// give graphics a "get pixel" command
 10002cc:	00e10034 	movhi	r3,33792
 10002d0:	008002c4 	movi	r2,11
 10002d4:	1880000d 	sth	r2,0(r3)

	WAIT_FOR_GRAPHICS;					// is graphics done reading pixel
 10002d8:	00a10034 	movhi	r2,33792
 10002dc:	1080000b 	ldhu	r2,0(r2)
 10002e0:	10bfffcc 	andi	r2,r2,65535
 10002e4:	1080004c 	andi	r2,r2,1
 10002e8:	1005003a 	cmpeq	r2,r2,zero
 10002ec:	103ffa1e 	bne	r2,zero,10002d8 <ReadAPixel+0x58>
	return (int)(GraphicsColourReg) ;	// return the palette number (colour)
 10002f0:	00a10034 	movhi	r2,33792
 10002f4:	10800384 	addi	r2,r2,14
 10002f8:	1080000b 	ldhu	r2,0(r2)
 10002fc:	10bfffcc 	andi	r2,r2,65535
}
 1000300:	e037883a 	mov	sp,fp
 1000304:	df000017 	ldw	fp,0(sp)
 1000308:	dec00104 	addi	sp,sp,4
 100030c:	f800283a 	ret

01000310 <WriteHLine>:
/*******************************************************************************************
* Write a horizontal line (hardware-accelerated) starting at the x,y coords specified
* of the given length to the right
********************************************************************************************/
void WriteHLine(int x1, int y1, int length, int Colour)
{
 1000310:	defffa04 	addi	sp,sp,-24
 1000314:	df000515 	stw	fp,20(sp)
 1000318:	df000504 	addi	fp,sp,20
 100031c:	e13ffc15 	stw	r4,-16(fp)
 1000320:	e17ffd15 	stw	r5,-12(fp)
 1000324:	e1bffe15 	stw	r6,-8(fp)
 1000328:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 100032c:	00a10034 	movhi	r2,33792
 1000330:	1080000b 	ldhu	r2,0(r2)
 1000334:	10bfffcc 	andi	r2,r2,65535
 1000338:	1080004c 	andi	r2,r2,1
 100033c:	1005003a 	cmpeq	r2,r2,zero
 1000340:	103ffa1e 	bne	r2,zero,100032c <WriteHLine+0x1c>

	int x2 = x1 + length;
 1000344:	e0fffc17 	ldw	r3,-16(fp)
 1000348:	e0bffe17 	ldw	r2,-8(fp)
 100034c:	1885883a 	add	r2,r3,r2
 1000350:	e0bffb15 	stw	r2,-20(fp)
	//TODO error checking

	GraphicsX1Reg = x1;
 1000354:	00e10034 	movhi	r3,33792
 1000358:	18c00084 	addi	r3,r3,2
 100035c:	e0bffc17 	ldw	r2,-16(fp)
 1000360:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y1;
 1000364:	00e10034 	movhi	r3,33792
 1000368:	18c00104 	addi	r3,r3,4
 100036c:	e0bffd17 	ldw	r2,-12(fp)
 1000370:	1880000d 	sth	r2,0(r3)
	GraphicsX2Reg = x2;
 1000374:	00e10034 	movhi	r3,33792
 1000378:	18c00184 	addi	r3,r3,6
 100037c:	e0bffb17 	ldw	r2,-20(fp)
 1000380:	1880000d 	sth	r2,0(r3)
	GraphicsColourReg = Colour;
 1000384:	00e10034 	movhi	r3,33792
 1000388:	18c00384 	addi	r3,r3,14
 100038c:	e0bfff17 	ldw	r2,-4(fp)
 1000390:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = DrawHLine;
 1000394:	00e10034 	movhi	r3,33792
 1000398:	00800044 	movi	r2,1
 100039c:	1880000d 	sth	r2,0(r3)
}
 10003a0:	e037883a 	mov	sp,fp
 10003a4:	df000017 	ldw	fp,0(sp)
 10003a8:	dec00104 	addi	sp,sp,4
 10003ac:	f800283a 	ret

010003b0 <WriteVLine>:
/*******************************************************************************************
* Write a vertical line (hardware-accelerated) starting at the x,y coords specified
* of the given length downwards
********************************************************************************************/
void WriteVLine(int x1, int y1, int length, int Colour)
{
 10003b0:	defffa04 	addi	sp,sp,-24
 10003b4:	df000515 	stw	fp,20(sp)
 10003b8:	df000504 	addi	fp,sp,20
 10003bc:	e13ffc15 	stw	r4,-16(fp)
 10003c0:	e17ffd15 	stw	r5,-12(fp)
 10003c4:	e1bffe15 	stw	r6,-8(fp)
 10003c8:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 10003cc:	00a10034 	movhi	r2,33792
 10003d0:	1080000b 	ldhu	r2,0(r2)
 10003d4:	10bfffcc 	andi	r2,r2,65535
 10003d8:	1080004c 	andi	r2,r2,1
 10003dc:	1005003a 	cmpeq	r2,r2,zero
 10003e0:	103ffa1e 	bne	r2,zero,10003cc <WriteVLine+0x1c>

	int y2 = y1 + length;
 10003e4:	e0fffd17 	ldw	r3,-12(fp)
 10003e8:	e0bffe17 	ldw	r2,-8(fp)
 10003ec:	1885883a 	add	r2,r3,r2
 10003f0:	e0bffb15 	stw	r2,-20(fp)
	//TODO error checking

	GraphicsX1Reg = x1;
 10003f4:	00e10034 	movhi	r3,33792
 10003f8:	18c00084 	addi	r3,r3,2
 10003fc:	e0bffc17 	ldw	r2,-16(fp)
 1000400:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y1;
 1000404:	00e10034 	movhi	r3,33792
 1000408:	18c00104 	addi	r3,r3,4
 100040c:	e0bffd17 	ldw	r2,-12(fp)
 1000410:	1880000d 	sth	r2,0(r3)
	GraphicsY2Reg = y2;
 1000414:	00e10034 	movhi	r3,33792
 1000418:	18c00204 	addi	r3,r3,8
 100041c:	e0bffb17 	ldw	r2,-20(fp)
 1000420:	1880000d 	sth	r2,0(r3)
	GraphicsColourReg = Colour;
 1000424:	00e10034 	movhi	r3,33792
 1000428:	18c00384 	addi	r3,r3,14
 100042c:	e0bfff17 	ldw	r2,-4(fp)
 1000430:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = DrawVLine;
 1000434:	00e10034 	movhi	r3,33792
 1000438:	00800084 	movi	r2,2
 100043c:	1880000d 	sth	r2,0(r3)
}
 1000440:	e037883a 	mov	sp,fp
 1000444:	df000017 	ldw	fp,0(sp)
 1000448:	dec00104 	addi	sp,sp,4
 100044c:	f800283a 	ret

01000450 <WriteLine>:

/*******************************************************************************************
* Write a Bresenham line (hardware-accelerated) from x1,y1 to x2,y2
********************************************************************************************/
void WriteLine(int x1, int y1, int x2, int y2, int Colour)
{
 1000450:	defffb04 	addi	sp,sp,-20
 1000454:	df000415 	stw	fp,16(sp)
 1000458:	df000404 	addi	fp,sp,16
 100045c:	e13ffc15 	stw	r4,-16(fp)
 1000460:	e17ffd15 	stw	r5,-12(fp)
 1000464:	e1bffe15 	stw	r6,-8(fp)
 1000468:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 100046c:	00a10034 	movhi	r2,33792
 1000470:	1080000b 	ldhu	r2,0(r2)
 1000474:	10bfffcc 	andi	r2,r2,65535
 1000478:	1080004c 	andi	r2,r2,1
 100047c:	1005003a 	cmpeq	r2,r2,zero
 1000480:	103ffa1e 	bne	r2,zero,100046c <WriteLine+0x1c>

	//TODO error checking

	GraphicsX1Reg = x1;
 1000484:	00e10034 	movhi	r3,33792
 1000488:	18c00084 	addi	r3,r3,2
 100048c:	e0bffc17 	ldw	r2,-16(fp)
 1000490:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y1;
 1000494:	00e10034 	movhi	r3,33792
 1000498:	18c00104 	addi	r3,r3,4
 100049c:	e0bffd17 	ldw	r2,-12(fp)
 10004a0:	1880000d 	sth	r2,0(r3)
	GraphicsX2Reg = x2;
 10004a4:	00e10034 	movhi	r3,33792
 10004a8:	18c00184 	addi	r3,r3,6
 10004ac:	e0bffe17 	ldw	r2,-8(fp)
 10004b0:	1880000d 	sth	r2,0(r3)
	GraphicsY2Reg = y2;
 10004b4:	00e10034 	movhi	r3,33792
 10004b8:	18c00204 	addi	r3,r3,8
 10004bc:	e0bfff17 	ldw	r2,-4(fp)
 10004c0:	1880000d 	sth	r2,0(r3)
	GraphicsColourReg = Colour;
 10004c4:	00e10034 	movhi	r3,33792
 10004c8:	18c00384 	addi	r3,r3,14
 10004cc:	e0800117 	ldw	r2,4(fp)
 10004d0:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = DrawLine;
 10004d4:	00e10034 	movhi	r3,33792
 10004d8:	008000c4 	movi	r2,3
 10004dc:	1880000d 	sth	r2,0(r3)
}
 10004e0:	e037883a 	mov	sp,fp
 10004e4:	df000017 	ldw	fp,0(sp)
 10004e8:	dec00104 	addi	sp,sp,4
 10004ec:	f800283a 	ret

010004f0 <ProgramPalette>:
* subroutine to program a hardware (graphics chip) palette number with an RGB value
* e.g. ProgramPalette(RED, 0x00FF0000) ;
************************************************************************************/

void ProgramPalette(int PaletteNumber, int RGB)
{
 10004f0:	defffd04 	addi	sp,sp,-12
 10004f4:	df000215 	stw	fp,8(sp)
 10004f8:	df000204 	addi	fp,sp,8
 10004fc:	e13ffe15 	stw	r4,-8(fp)
 1000500:	e17fff15 	stw	r5,-4(fp)
    WAIT_FOR_GRAPHICS;
 1000504:	00a10034 	movhi	r2,33792
 1000508:	1080000b 	ldhu	r2,0(r2)
 100050c:	10bfffcc 	andi	r2,r2,65535
 1000510:	1080004c 	andi	r2,r2,1
 1000514:	1005003a 	cmpeq	r2,r2,zero
 1000518:	103ffa1e 	bne	r2,zero,1000504 <ProgramPalette+0x14>
    GraphicsColourReg = PaletteNumber;
 100051c:	00e10034 	movhi	r3,33792
 1000520:	18c00384 	addi	r3,r3,14
 1000524:	e0bffe17 	ldw	r2,-8(fp)
 1000528:	1880000d 	sth	r2,0(r3)
    GraphicsX1Reg = RGB >> 16   ;        // program red value in ls.8 bit of X1 reg
 100052c:	00e10034 	movhi	r3,33792
 1000530:	18c00084 	addi	r3,r3,2
 1000534:	e0bfff17 	ldw	r2,-4(fp)
 1000538:	1005d43a 	srai	r2,r2,16
 100053c:	1880000d 	sth	r2,0(r3)
    GraphicsY1Reg = RGB ;                // program green and blue into ls 16 bit of Y1 reg
 1000540:	00e10034 	movhi	r3,33792
 1000544:	18c00104 	addi	r3,r3,4
 1000548:	e0bfff17 	ldw	r2,-4(fp)
 100054c:	1880000d 	sth	r2,0(r3)
    GraphicsCommandReg = ProgramPaletteColour; // issue command
 1000550:	00e10034 	movhi	r3,33792
 1000554:	00800404 	movi	r2,16
 1000558:	1880000d 	sth	r2,0(r3)
}
 100055c:	e037883a 	mov	sp,fp
 1000560:	df000017 	ldw	fp,0(sp)
 1000564:	dec00104 	addi	sp,sp,4
 1000568:	f800283a 	ret

0100056c <HLine>:
/*********************************************************************************************
* Draw a horizontal line (1 pixel at a time) starting at the x,y coords specified
*********************************************************************************************/

void HLine(int x1, int y1, int length, int Colour)
{
 100056c:	defff904 	addi	sp,sp,-28
 1000570:	dfc00615 	stw	ra,24(sp)
 1000574:	df000515 	stw	fp,20(sp)
 1000578:	df000504 	addi	fp,sp,20
 100057c:	e13ffc15 	stw	r4,-16(fp)
 1000580:	e17ffd15 	stw	r5,-12(fp)
 1000584:	e1bffe15 	stw	r6,-8(fp)
 1000588:	e1ffff15 	stw	r7,-4(fp)
	int i;

	for(i = x1; i < x1+length; i++ )
 100058c:	e0bffc17 	ldw	r2,-16(fp)
 1000590:	e0bffb15 	stw	r2,-20(fp)
 1000594:	00000706 	br	10005b4 <HLine+0x48>
		WriteAPixel(i, y1, Colour);
 1000598:	e13ffb17 	ldw	r4,-20(fp)
 100059c:	e17ffd17 	ldw	r5,-12(fp)
 10005a0:	e1bfff17 	ldw	r6,-4(fp)
 10005a4:	10002040 	call	1000204 <WriteAPixel>

void HLine(int x1, int y1, int length, int Colour)
{
	int i;

	for(i = x1; i < x1+length; i++ )
 10005a8:	e0bffb17 	ldw	r2,-20(fp)
 10005ac:	10800044 	addi	r2,r2,1
 10005b0:	e0bffb15 	stw	r2,-20(fp)
 10005b4:	e0fffc17 	ldw	r3,-16(fp)
 10005b8:	e0bffe17 	ldw	r2,-8(fp)
 10005bc:	1887883a 	add	r3,r3,r2
 10005c0:	e0bffb17 	ldw	r2,-20(fp)
 10005c4:	10fff416 	blt	r2,r3,1000598 <HLine+0x2c>
		WriteAPixel(i, y1, Colour);
}
 10005c8:	e037883a 	mov	sp,fp
 10005cc:	dfc00117 	ldw	ra,4(sp)
 10005d0:	df000017 	ldw	fp,0(sp)
 10005d4:	dec00204 	addi	sp,sp,8
 10005d8:	f800283a 	ret

010005dc <VLine>:
/*********************************************************************************************
* Draw a vertical line (1 pixel at a time) starting at the x,y coords specified
*********************************************************************************************/

void VLine(int x1, int y1, int length, int Colour)
{
 10005dc:	defff904 	addi	sp,sp,-28
 10005e0:	dfc00615 	stw	ra,24(sp)
 10005e4:	df000515 	stw	fp,20(sp)
 10005e8:	df000504 	addi	fp,sp,20
 10005ec:	e13ffc15 	stw	r4,-16(fp)
 10005f0:	e17ffd15 	stw	r5,-12(fp)
 10005f4:	e1bffe15 	stw	r6,-8(fp)
 10005f8:	e1ffff15 	stw	r7,-4(fp)
	int i;

	for(i = y1; i < y1+length; i++ )
 10005fc:	e0bffd17 	ldw	r2,-12(fp)
 1000600:	e0bffb15 	stw	r2,-20(fp)
 1000604:	00000706 	br	1000624 <VLine+0x48>
		WriteAPixel(x1, i, Colour);
 1000608:	e13ffc17 	ldw	r4,-16(fp)
 100060c:	e17ffb17 	ldw	r5,-20(fp)
 1000610:	e1bfff17 	ldw	r6,-4(fp)
 1000614:	10002040 	call	1000204 <WriteAPixel>

void VLine(int x1, int y1, int length, int Colour)
{
	int i;

	for(i = y1; i < y1+length; i++ )
 1000618:	e0bffb17 	ldw	r2,-20(fp)
 100061c:	10800044 	addi	r2,r2,1
 1000620:	e0bffb15 	stw	r2,-20(fp)
 1000624:	e0fffd17 	ldw	r3,-12(fp)
 1000628:	e0bffe17 	ldw	r2,-8(fp)
 100062c:	1887883a 	add	r3,r3,r2
 1000630:	e0bffb17 	ldw	r2,-20(fp)
 1000634:	10fff416 	blt	r2,r3,1000608 <VLine+0x2c>
		WriteAPixel(x1, i, Colour);
}
 1000638:	e037883a 	mov	sp,fp
 100063c:	dfc00117 	ldw	ra,4(sp)
 1000640:	df000017 	ldw	fp,0(sp)
 1000644:	dec00204 	addi	sp,sp,8
 1000648:	f800283a 	ret

0100064c <abs>:
/*******************************************************************************
* Implementation of Bresenhams line drawing algorithm (1 pixel at a time)
*******************************************************************************/

int abs(int a)
{
 100064c:	defffd04 	addi	sp,sp,-12
 1000650:	df000215 	stw	fp,8(sp)
 1000654:	df000204 	addi	fp,sp,8
 1000658:	e13ffe15 	stw	r4,-8(fp)
    if(a < 0)
 100065c:	e0bffe17 	ldw	r2,-8(fp)
 1000660:	1004403a 	cmpge	r2,r2,zero
 1000664:	1000041e 	bne	r2,zero,1000678 <abs+0x2c>
        return -a ;
 1000668:	e0bffe17 	ldw	r2,-8(fp)
 100066c:	0085c83a 	sub	r2,zero,r2
 1000670:	e0bfff15 	stw	r2,-4(fp)
 1000674:	00000206 	br	1000680 <abs+0x34>
    else
        return a ;
 1000678:	e0bffe17 	ldw	r2,-8(fp)
 100067c:	e0bfff15 	stw	r2,-4(fp)
 1000680:	e0bfff17 	ldw	r2,-4(fp)
}
 1000684:	e037883a 	mov	sp,fp
 1000688:	df000017 	ldw	fp,0(sp)
 100068c:	dec00104 	addi	sp,sp,4
 1000690:	f800283a 	ret

01000694 <sign>:

int sign(int a)
{
 1000694:	defffd04 	addi	sp,sp,-12
 1000698:	df000215 	stw	fp,8(sp)
 100069c:	df000204 	addi	fp,sp,8
 10006a0:	e13ffe15 	stw	r4,-8(fp)
    if(a < 0)
 10006a4:	e0bffe17 	ldw	r2,-8(fp)
 10006a8:	1004403a 	cmpge	r2,r2,zero
 10006ac:	1000031e 	bne	r2,zero,10006bc <sign+0x28>
        return -1 ;
 10006b0:	00bfffc4 	movi	r2,-1
 10006b4:	e0bfff15 	stw	r2,-4(fp)
 10006b8:	00000706 	br	10006d8 <sign+0x44>
    else if (a == 0)
 10006bc:	e0bffe17 	ldw	r2,-8(fp)
 10006c0:	1004c03a 	cmpne	r2,r2,zero
 10006c4:	1000021e 	bne	r2,zero,10006d0 <sign+0x3c>
        return 0 ;
 10006c8:	e03fff15 	stw	zero,-4(fp)
 10006cc:	00000206 	br	10006d8 <sign+0x44>
    else
        return 1 ;
 10006d0:	00800044 	movi	r2,1
 10006d4:	e0bfff15 	stw	r2,-4(fp)
 10006d8:	e0bfff17 	ldw	r2,-4(fp)
}
 10006dc:	e037883a 	mov	sp,fp
 10006e0:	df000017 	ldw	fp,0(sp)
 10006e4:	dec00104 	addi	sp,sp,4
 10006e8:	f800283a 	ret

010006ec <Line>:


void Line(int x1, int y1, int x2, int y2, int Colour)
{
 10006ec:	defff004 	addi	sp,sp,-64
 10006f0:	dfc00f15 	stw	ra,60(sp)
 10006f4:	df000e15 	stw	fp,56(sp)
 10006f8:	df000e04 	addi	fp,sp,56
 10006fc:	e13ffc15 	stw	r4,-16(fp)
 1000700:	e17ffd15 	stw	r5,-12(fp)
 1000704:	e1bffe15 	stw	r6,-8(fp)
 1000708:	e1ffff15 	stw	r7,-4(fp)
    int x = x1;
 100070c:	e0bffc17 	ldw	r2,-16(fp)
 1000710:	e0bffb15 	stw	r2,-20(fp)
    int y = y1;
 1000714:	e0bffd17 	ldw	r2,-12(fp)
 1000718:	e0bffa15 	stw	r2,-24(fp)
    int dx = abs(x2 - x1);
 100071c:	e0fffe17 	ldw	r3,-8(fp)
 1000720:	e0bffc17 	ldw	r2,-16(fp)
 1000724:	1885c83a 	sub	r2,r3,r2
 1000728:	e0bff915 	stw	r2,-28(fp)
 100072c:	e0bff917 	ldw	r2,-28(fp)
 1000730:	1004403a 	cmpge	r2,r2,zero
 1000734:	1000031e 	bne	r2,zero,1000744 <Line+0x58>
 1000738:	e0bff917 	ldw	r2,-28(fp)
 100073c:	0085c83a 	sub	r2,zero,r2
 1000740:	e0bff915 	stw	r2,-28(fp)
    int dy = abs(y2 - y1);
 1000744:	e0ffff17 	ldw	r3,-4(fp)
 1000748:	e0bffd17 	ldw	r2,-12(fp)
 100074c:	1885c83a 	sub	r2,r3,r2
 1000750:	e0bff815 	stw	r2,-32(fp)
 1000754:	e0bff817 	ldw	r2,-32(fp)
 1000758:	1004403a 	cmpge	r2,r2,zero
 100075c:	1000031e 	bne	r2,zero,100076c <Line+0x80>
 1000760:	e0bff817 	ldw	r2,-32(fp)
 1000764:	0085c83a 	sub	r2,zero,r2
 1000768:	e0bff815 	stw	r2,-32(fp)

    int s1 = sign(x2 - x1);
 100076c:	e0fffe17 	ldw	r3,-8(fp)
 1000770:	e0bffc17 	ldw	r2,-16(fp)
 1000774:	1889c83a 	sub	r4,r3,r2
 1000778:	10006940 	call	1000694 <sign>
 100077c:	e0bff715 	stw	r2,-36(fp)
    int s2 = sign(y2 - y1);
 1000780:	e0ffff17 	ldw	r3,-4(fp)
 1000784:	e0bffd17 	ldw	r2,-12(fp)
 1000788:	1889c83a 	sub	r4,r3,r2
 100078c:	10006940 	call	1000694 <sign>
 1000790:	e0bff615 	stw	r2,-40(fp)
    int i, temp, interchange = 0, error ;
 1000794:	e03ff315 	stw	zero,-52(fp)

// if x1=x2 and y1=y2 then it is a line of zero length

    if(dx == 0 && dy == 0)
 1000798:	e0bff917 	ldw	r2,-28(fp)
 100079c:	1004c03a 	cmpne	r2,r2,zero
 10007a0:	1000041e 	bne	r2,zero,10007b4 <Line+0xc8>
 10007a4:	e0bff817 	ldw	r2,-32(fp)
 10007a8:	1004c03a 	cmpne	r2,r2,zero
 10007ac:	1000011e 	bne	r2,zero,10007b4 <Line+0xc8>
        return ;
 10007b0:	00004606 	br	10008cc <Line+0x1e0>
 // must be a complex line so use bresenhams algorithm
    else    {

// swap delta x and delta y depending upon slop of line

        if(dy > dx) {
 10007b4:	e0fff817 	ldw	r3,-32(fp)
 10007b8:	e0bff917 	ldw	r2,-28(fp)
 10007bc:	10c0080e 	bge	r2,r3,10007e0 <Line+0xf4>
            temp = dx ;
 10007c0:	e0bff917 	ldw	r2,-28(fp)
 10007c4:	e0bff415 	stw	r2,-48(fp)
            dx = dy ;
 10007c8:	e0bff817 	ldw	r2,-32(fp)
 10007cc:	e0bff915 	stw	r2,-28(fp)
            dy = temp ;
 10007d0:	e0bff417 	ldw	r2,-48(fp)
 10007d4:	e0bff815 	stw	r2,-32(fp)
            interchange = 1 ;
 10007d8:	00800044 	movi	r2,1
 10007dc:	e0bff315 	stw	r2,-52(fp)
        }

// initialise the error term to compensate for non-zero intercept

        error = (dy << 1) - dx ;    // (2 * dy) - dx
 10007e0:	e0bff817 	ldw	r2,-32(fp)
 10007e4:	1085883a 	add	r2,r2,r2
 10007e8:	1007883a 	mov	r3,r2
 10007ec:	e0bff917 	ldw	r2,-28(fp)
 10007f0:	1885c83a 	sub	r2,r3,r2
 10007f4:	e0bff215 	stw	r2,-56(fp)

// main loop
        for(i = 1; i <= dx; i++)    {
 10007f8:	00800044 	movi	r2,1
 10007fc:	e0bff515 	stw	r2,-44(fp)
 1000800:	00002f06 	br	10008c0 <Line+0x1d4>
            WriteAPixel(x, y, Colour);
 1000804:	e13ffb17 	ldw	r4,-20(fp)
 1000808:	e17ffa17 	ldw	r5,-24(fp)
 100080c:	e1800217 	ldw	r6,8(fp)
 1000810:	10002040 	call	1000204 <WriteAPixel>

            while(error >= 0)   {
 1000814:	00001206 	br	1000860 <Line+0x174>
                if(interchange == 1)
 1000818:	e0bff317 	ldw	r2,-52(fp)
 100081c:	10800058 	cmpnei	r2,r2,1
 1000820:	1000051e 	bne	r2,zero,1000838 <Line+0x14c>
                    x += s1 ;
 1000824:	e0bffb17 	ldw	r2,-20(fp)
 1000828:	e0fff717 	ldw	r3,-36(fp)
 100082c:	10c5883a 	add	r2,r2,r3
 1000830:	e0bffb15 	stw	r2,-20(fp)
 1000834:	00000406 	br	1000848 <Line+0x15c>
                else
                    y += s2 ;
 1000838:	e0bffa17 	ldw	r2,-24(fp)
 100083c:	e0fff617 	ldw	r3,-40(fp)
 1000840:	10c5883a 	add	r2,r2,r3
 1000844:	e0bffa15 	stw	r2,-24(fp)

                error -= (dx << 1) ;    // times 2
 1000848:	e0bff917 	ldw	r2,-28(fp)
 100084c:	1085883a 	add	r2,r2,r2
 1000850:	1007883a 	mov	r3,r2
 1000854:	e0bff217 	ldw	r2,-56(fp)
 1000858:	10c5c83a 	sub	r2,r2,r3
 100085c:	e0bff215 	stw	r2,-56(fp)

// main loop
        for(i = 1; i <= dx; i++)    {
            WriteAPixel(x, y, Colour);

            while(error >= 0)   {
 1000860:	e0bff217 	ldw	r2,-56(fp)
 1000864:	1004403a 	cmpge	r2,r2,zero
 1000868:	103feb1e 	bne	r2,zero,1000818 <Line+0x12c>
                    y += s2 ;

                error -= (dx << 1) ;    // times 2
            }

            if(interchange == 1)
 100086c:	e0bff317 	ldw	r2,-52(fp)
 1000870:	10800058 	cmpnei	r2,r2,1
 1000874:	1000051e 	bne	r2,zero,100088c <Line+0x1a0>
                y += s2 ;
 1000878:	e0bffa17 	ldw	r2,-24(fp)
 100087c:	e0fff617 	ldw	r3,-40(fp)
 1000880:	10c5883a 	add	r2,r2,r3
 1000884:	e0bffa15 	stw	r2,-24(fp)
 1000888:	00000406 	br	100089c <Line+0x1b0>
            else
                x += s1 ;
 100088c:	e0bffb17 	ldw	r2,-20(fp)
 1000890:	e0fff717 	ldw	r3,-36(fp)
 1000894:	10c5883a 	add	r2,r2,r3
 1000898:	e0bffb15 	stw	r2,-20(fp)

            error += (dy << 1) ;    // times 2
 100089c:	e0bff817 	ldw	r2,-32(fp)
 10008a0:	1085883a 	add	r2,r2,r2
 10008a4:	1007883a 	mov	r3,r2
 10008a8:	e0bff217 	ldw	r2,-56(fp)
 10008ac:	10c5883a 	add	r2,r2,r3
 10008b0:	e0bff215 	stw	r2,-56(fp)
// initialise the error term to compensate for non-zero intercept

        error = (dy << 1) - dx ;    // (2 * dy) - dx

// main loop
        for(i = 1; i <= dx; i++)    {
 10008b4:	e0bff517 	ldw	r2,-44(fp)
 10008b8:	10800044 	addi	r2,r2,1
 10008bc:	e0bff515 	stw	r2,-44(fp)
 10008c0:	e0fff517 	ldw	r3,-44(fp)
 10008c4:	e0bff917 	ldw	r2,-28(fp)
 10008c8:	10ffce0e 	bge	r2,r3,1000804 <Line+0x118>
                x += s1 ;

            error += (dy << 1) ;    // times 2
        }
    }
}
 10008cc:	e037883a 	mov	sp,fp
 10008d0:	dfc00117 	ldw	ra,4(sp)
 10008d4:	df000017 	ldw	fp,0(sp)
 10008d8:	dec00204 	addi	sp,sp,8
 10008dc:	f800283a 	ret

010008e0 <black_screen>:
#include "graphics.h"

#define HEIGHT 150
#define STARTY 350

void black_screen() {
 10008e0:	defffd04 	addi	sp,sp,-12
 10008e4:	dfc00215 	stw	ra,8(sp)
 10008e8:	df000115 	stw	fp,4(sp)
 10008ec:	df000104 	addi	fp,sp,4
	// write black lines over the entire screen area
	//first fill the entire screen with black
	int i;
	for(i = 1; i <= YRES; i++) {
 10008f0:	00800044 	movi	r2,1
 10008f4:	e0bfff15 	stw	r2,-4(fp)
 10008f8:	00000806 	br	100091c <black_screen+0x3c>
		WriteHLine(1, i, XRES, BLACK);
 10008fc:	01000044 	movi	r4,1
 1000900:	e17fff17 	ldw	r5,-4(fp)
 1000904:	0180c804 	movi	r6,800
 1000908:	000f883a 	mov	r7,zero
 100090c:	10003100 	call	1000310 <WriteHLine>

void black_screen() {
	// write black lines over the entire screen area
	//first fill the entire screen with black
	int i;
	for(i = 1; i <= YRES; i++) {
 1000910:	e0bfff17 	ldw	r2,-4(fp)
 1000914:	10800044 	addi	r2,r2,1
 1000918:	e0bfff15 	stw	r2,-4(fp)
 100091c:	e0bfff17 	ldw	r2,-4(fp)
 1000920:	10807850 	cmplti	r2,r2,481
 1000924:	103ff51e 	bne	r2,zero,10008fc <black_screen+0x1c>
		WriteHLine(1, i, XRES, BLACK);
	}
}
 1000928:	e037883a 	mov	sp,fp
 100092c:	dfc00117 	ldw	ra,4(sp)
 1000930:	df000017 	ldw	fp,0(sp)
 1000934:	dec00204 	addi	sp,sp,8
 1000938:	f800283a 	ret

0100093c <white_red_screen>:

void white_red_screen() {
 100093c:	defffd04 	addi	sp,sp,-12
 1000940:	dfc00215 	stw	ra,8(sp)
 1000944:	df000115 	stw	fp,4(sp)
 1000948:	df000104 	addi	fp,sp,4
	// fill the left half of the screen in white
	// and the right half of the screen in red
	int i;
	for(i = 1; i <= YRES; i++) {
 100094c:	00800044 	movi	r2,1
 1000950:	e0bfff15 	stw	r2,-4(fp)
 1000954:	00000806 	br	1000978 <white_red_screen+0x3c>
		WriteHLine(1, i, XRES/2, WHITE);
 1000958:	01000044 	movi	r4,1
 100095c:	e17fff17 	ldw	r5,-4(fp)
 1000960:	01806404 	movi	r6,400
 1000964:	01c00044 	movi	r7,1
 1000968:	10003100 	call	1000310 <WriteHLine>

void white_red_screen() {
	// fill the left half of the screen in white
	// and the right half of the screen in red
	int i;
	for(i = 1; i <= YRES; i++) {
 100096c:	e0bfff17 	ldw	r2,-4(fp)
 1000970:	10800044 	addi	r2,r2,1
 1000974:	e0bfff15 	stw	r2,-4(fp)
 1000978:	e0bfff17 	ldw	r2,-4(fp)
 100097c:	10807850 	cmplti	r2,r2,481
 1000980:	103ff51e 	bne	r2,zero,1000958 <white_red_screen+0x1c>
		WriteHLine(1, i, XRES/2, WHITE);
	}
	for(i = 1; i <= YRES; i++) {
 1000984:	00800044 	movi	r2,1
 1000988:	e0bfff15 	stw	r2,-4(fp)
 100098c:	00000806 	br	10009b0 <white_red_screen+0x74>
		WriteHLine(XRES/2, i, XRES/2, RED);
 1000990:	01006404 	movi	r4,400
 1000994:	e17fff17 	ldw	r5,-4(fp)
 1000998:	01806404 	movi	r6,400
 100099c:	01c00084 	movi	r7,2
 10009a0:	10003100 	call	1000310 <WriteHLine>
	// and the right half of the screen in red
	int i;
	for(i = 1; i <= YRES; i++) {
		WriteHLine(1, i, XRES/2, WHITE);
	}
	for(i = 1; i <= YRES; i++) {
 10009a4:	e0bfff17 	ldw	r2,-4(fp)
 10009a8:	10800044 	addi	r2,r2,1
 10009ac:	e0bfff15 	stw	r2,-4(fp)
 10009b0:	e0bfff17 	ldw	r2,-4(fp)
 10009b4:	10807850 	cmplti	r2,r2,481
 10009b8:	103ff51e 	bne	r2,zero,1000990 <white_red_screen+0x54>
		WriteHLine(XRES/2, i, XRES/2, RED);
	}
}
 10009bc:	e037883a 	mov	sp,fp
 10009c0:	dfc00117 	ldw	ra,4(sp)
 10009c4:	df000017 	ldw	fp,0(sp)
 10009c8:	dec00204 	addi	sp,sp,8
 10009cc:	f800283a 	ret

010009d0 <speed_comparison>:

void speed_comparison() {
 10009d0:	defff804 	addi	sp,sp,-32
 10009d4:	dfc00715 	stw	ra,28(sp)
 10009d8:	df000615 	stw	fp,24(sp)
 10009dc:	df000604 	addi	fp,sp,24
	int i = 0;
 10009e0:	e03ffb15 	stw	zero,-20(fp)
	int colour = 0;
 10009e4:	e03ffa15 	stw	zero,-24(fp)
	while(1) {
		colour = (colour + 1) % 8;
 10009e8:	e0bffa17 	ldw	r2,-24(fp)
 10009ec:	10c00044 	addi	r3,r2,1
 10009f0:	00a00034 	movhi	r2,32768
 10009f4:	108001c4 	addi	r2,r2,7
 10009f8:	1886703a 	and	r3,r3,r2
 10009fc:	e0fffc15 	stw	r3,-16(fp)
 1000a00:	e0fffc17 	ldw	r3,-16(fp)
 1000a04:	1804403a 	cmpge	r2,r3,zero
 1000a08:	10000a1e 	bne	r2,zero,1000a34 <speed_comparison+0x64>
 1000a0c:	e0bffc17 	ldw	r2,-16(fp)
 1000a10:	10bfffc4 	addi	r2,r2,-1
 1000a14:	e0bffc15 	stw	r2,-16(fp)
 1000a18:	00bffe04 	movi	r2,-8
 1000a1c:	e0fffc17 	ldw	r3,-16(fp)
 1000a20:	1886b03a 	or	r3,r3,r2
 1000a24:	e0fffc15 	stw	r3,-16(fp)
 1000a28:	e0bffc17 	ldw	r2,-16(fp)
 1000a2c:	10800044 	addi	r2,r2,1
 1000a30:	e0bffc15 	stw	r2,-16(fp)
 1000a34:	e0fffc17 	ldw	r3,-16(fp)
 1000a38:	e0fffa15 	stw	r3,-24(fp)
		for(i = 0; i < XRES; i++) {
 1000a3c:	e03ffb15 	stw	zero,-20(fp)
 1000a40:	00000806 	br	1000a64 <speed_comparison+0x94>
			VLine(i, 0, YRES, 2);
 1000a44:	e13ffb17 	ldw	r4,-20(fp)
 1000a48:	000b883a 	mov	r5,zero
 1000a4c:	01807804 	movi	r6,480
 1000a50:	01c00084 	movi	r7,2
 1000a54:	10005dc0 	call	10005dc <VLine>
void speed_comparison() {
	int i = 0;
	int colour = 0;
	while(1) {
		colour = (colour + 1) % 8;
		for(i = 0; i < XRES; i++) {
 1000a58:	e0bffb17 	ldw	r2,-20(fp)
 1000a5c:	10800044 	addi	r2,r2,1
 1000a60:	e0bffb15 	stw	r2,-20(fp)
 1000a64:	e0bffb17 	ldw	r2,-20(fp)
 1000a68:	1080c810 	cmplti	r2,r2,800
 1000a6c:	103ff51e 	bne	r2,zero,1000a44 <speed_comparison+0x74>
			VLine(i, 0, YRES, 2);
		}
		colour = (colour + 1) % 8;
 1000a70:	e0bffa17 	ldw	r2,-24(fp)
 1000a74:	10c00044 	addi	r3,r2,1
 1000a78:	00a00034 	movhi	r2,32768
 1000a7c:	108001c4 	addi	r2,r2,7
 1000a80:	1886703a 	and	r3,r3,r2
 1000a84:	e0fffd15 	stw	r3,-12(fp)
 1000a88:	e0fffd17 	ldw	r3,-12(fp)
 1000a8c:	1804403a 	cmpge	r2,r3,zero
 1000a90:	10000a1e 	bne	r2,zero,1000abc <speed_comparison+0xec>
 1000a94:	e0bffd17 	ldw	r2,-12(fp)
 1000a98:	10bfffc4 	addi	r2,r2,-1
 1000a9c:	e0bffd15 	stw	r2,-12(fp)
 1000aa0:	00bffe04 	movi	r2,-8
 1000aa4:	e0fffd17 	ldw	r3,-12(fp)
 1000aa8:	1886b03a 	or	r3,r3,r2
 1000aac:	e0fffd15 	stw	r3,-12(fp)
 1000ab0:	e0bffd17 	ldw	r2,-12(fp)
 1000ab4:	10800044 	addi	r2,r2,1
 1000ab8:	e0bffd15 	stw	r2,-12(fp)
 1000abc:	e0fffd17 	ldw	r3,-12(fp)
 1000ac0:	e0fffa15 	stw	r3,-24(fp)
		for(i = 0; i < YRES/3; i++) {
 1000ac4:	e03ffb15 	stw	zero,-20(fp)
 1000ac8:	00000806 	br	1000aec <speed_comparison+0x11c>
			WriteHLine(0, i, XRES, colour);
 1000acc:	0009883a 	mov	r4,zero
 1000ad0:	e17ffb17 	ldw	r5,-20(fp)
 1000ad4:	0180c804 	movi	r6,800
 1000ad8:	e1fffa17 	ldw	r7,-24(fp)
 1000adc:	10003100 	call	1000310 <WriteHLine>
		colour = (colour + 1) % 8;
		for(i = 0; i < XRES; i++) {
			VLine(i, 0, YRES, 2);
		}
		colour = (colour + 1) % 8;
		for(i = 0; i < YRES/3; i++) {
 1000ae0:	e0bffb17 	ldw	r2,-20(fp)
 1000ae4:	10800044 	addi	r2,r2,1
 1000ae8:	e0bffb15 	stw	r2,-20(fp)
 1000aec:	e0bffb17 	ldw	r2,-20(fp)
 1000af0:	10802810 	cmplti	r2,r2,160
 1000af4:	103ff51e 	bne	r2,zero,1000acc <speed_comparison+0xfc>
			WriteHLine(0, i, XRES, colour);
		}
		colour = (colour + 1) % 8;
 1000af8:	e0bffa17 	ldw	r2,-24(fp)
 1000afc:	10c00044 	addi	r3,r2,1
 1000b00:	00a00034 	movhi	r2,32768
 1000b04:	108001c4 	addi	r2,r2,7
 1000b08:	1886703a 	and	r3,r3,r2
 1000b0c:	e0fffe15 	stw	r3,-8(fp)
 1000b10:	e0fffe17 	ldw	r3,-8(fp)
 1000b14:	1804403a 	cmpge	r2,r3,zero
 1000b18:	10000a1e 	bne	r2,zero,1000b44 <speed_comparison+0x174>
 1000b1c:	e0bffe17 	ldw	r2,-8(fp)
 1000b20:	10bfffc4 	addi	r2,r2,-1
 1000b24:	e0bffe15 	stw	r2,-8(fp)
 1000b28:	00bffe04 	movi	r2,-8
 1000b2c:	e0fffe17 	ldw	r3,-8(fp)
 1000b30:	1886b03a 	or	r3,r3,r2
 1000b34:	e0fffe15 	stw	r3,-8(fp)
 1000b38:	e0bffe17 	ldw	r2,-8(fp)
 1000b3c:	10800044 	addi	r2,r2,1
 1000b40:	e0bffe15 	stw	r2,-8(fp)
 1000b44:	e0fffe17 	ldw	r3,-8(fp)
 1000b48:	e0fffa15 	stw	r3,-24(fp)
		for(i = YRES/3; i < 2*YRES/3; i++) {
 1000b4c:	00802804 	movi	r2,160
 1000b50:	e0bffb15 	stw	r2,-20(fp)
 1000b54:	00000806 	br	1000b78 <speed_comparison+0x1a8>
			WriteHLine(0, i, XRES, colour);
 1000b58:	0009883a 	mov	r4,zero
 1000b5c:	e17ffb17 	ldw	r5,-20(fp)
 1000b60:	0180c804 	movi	r6,800
 1000b64:	e1fffa17 	ldw	r7,-24(fp)
 1000b68:	10003100 	call	1000310 <WriteHLine>
		colour = (colour + 1) % 8;
		for(i = 0; i < YRES/3; i++) {
			WriteHLine(0, i, XRES, colour);
		}
		colour = (colour + 1) % 8;
		for(i = YRES/3; i < 2*YRES/3; i++) {
 1000b6c:	e0bffb17 	ldw	r2,-20(fp)
 1000b70:	10800044 	addi	r2,r2,1
 1000b74:	e0bffb15 	stw	r2,-20(fp)
 1000b78:	e0bffb17 	ldw	r2,-20(fp)
 1000b7c:	10805010 	cmplti	r2,r2,320
 1000b80:	103ff51e 	bne	r2,zero,1000b58 <speed_comparison+0x188>
			WriteHLine(0, i, XRES, colour);
		}
		colour = (colour + 1) % 8;
 1000b84:	e0bffa17 	ldw	r2,-24(fp)
 1000b88:	10c00044 	addi	r3,r2,1
 1000b8c:	00a00034 	movhi	r2,32768
 1000b90:	108001c4 	addi	r2,r2,7
 1000b94:	1886703a 	and	r3,r3,r2
 1000b98:	e0ffff15 	stw	r3,-4(fp)
 1000b9c:	e0ffff17 	ldw	r3,-4(fp)
 1000ba0:	1804403a 	cmpge	r2,r3,zero
 1000ba4:	10000a1e 	bne	r2,zero,1000bd0 <speed_comparison+0x200>
 1000ba8:	e0bfff17 	ldw	r2,-4(fp)
 1000bac:	10bfffc4 	addi	r2,r2,-1
 1000bb0:	e0bfff15 	stw	r2,-4(fp)
 1000bb4:	00bffe04 	movi	r2,-8
 1000bb8:	e0ffff17 	ldw	r3,-4(fp)
 1000bbc:	1886b03a 	or	r3,r3,r2
 1000bc0:	e0ffff15 	stw	r3,-4(fp)
 1000bc4:	e0bfff17 	ldw	r2,-4(fp)
 1000bc8:	10800044 	addi	r2,r2,1
 1000bcc:	e0bfff15 	stw	r2,-4(fp)
 1000bd0:	e0ffff17 	ldw	r3,-4(fp)
 1000bd4:	e0fffa15 	stw	r3,-24(fp)
		for(i = 2*YRES/3; i < YRES; i++) {
 1000bd8:	00805004 	movi	r2,320
 1000bdc:	e0bffb15 	stw	r2,-20(fp)
 1000be0:	00000806 	br	1000c04 <speed_comparison+0x234>
			WriteHLine(0, i, XRES, colour);
 1000be4:	0009883a 	mov	r4,zero
 1000be8:	e17ffb17 	ldw	r5,-20(fp)
 1000bec:	0180c804 	movi	r6,800
 1000bf0:	e1fffa17 	ldw	r7,-24(fp)
 1000bf4:	10003100 	call	1000310 <WriteHLine>
		colour = (colour + 1) % 8;
		for(i = YRES/3; i < 2*YRES/3; i++) {
			WriteHLine(0, i, XRES, colour);
		}
		colour = (colour + 1) % 8;
		for(i = 2*YRES/3; i < YRES; i++) {
 1000bf8:	e0bffb17 	ldw	r2,-20(fp)
 1000bfc:	10800044 	addi	r2,r2,1
 1000c00:	e0bffb15 	stw	r2,-20(fp)
 1000c04:	e0bffb17 	ldw	r2,-20(fp)
 1000c08:	10807810 	cmplti	r2,r2,480
 1000c0c:	103ff51e 	bne	r2,zero,1000be4 <speed_comparison+0x214>
			WriteHLine(0, i, XRES, colour);
		}
	}
 1000c10:	003f7506 	br	10009e8 <speed_comparison+0x18>

01000c14 <line_comparison>:
	for(i = 0; i < YRES; i++) {
		WriteLine(0, i, XRES, YRES, colour);
	}
}

void line_comparison() {
 1000c14:	defffd04 	addi	sp,sp,-12
 1000c18:	dfc00215 	stw	ra,8(sp)
 1000c1c:	df000115 	stw	fp,4(sp)
 1000c20:	df000104 	addi	fp,sp,4
	  //compare one-pixel-at-a-time with hardware-accelerated lines
	  //each pair of lines should have the same length

	  HLine(100,100,100,3);
 1000c24:	01001904 	movi	r4,100
 1000c28:	01401904 	movi	r5,100
 1000c2c:	01801904 	movi	r6,100
 1000c30:	01c000c4 	movi	r7,3
 1000c34:	100056c0 	call	100056c <HLine>
	  HLine(100,101,100,3);
 1000c38:	01001904 	movi	r4,100
 1000c3c:	01401944 	movi	r5,101
 1000c40:	01801904 	movi	r6,100
 1000c44:	01c000c4 	movi	r7,3
 1000c48:	100056c0 	call	100056c <HLine>
	  HLine(100,102,100,3);
 1000c4c:	01001904 	movi	r4,100
 1000c50:	01401984 	movi	r5,102
 1000c54:	01801904 	movi	r6,100
 1000c58:	01c000c4 	movi	r7,3
 1000c5c:	100056c0 	call	100056c <HLine>
	  HLine(100,103,100,3);
 1000c60:	01001904 	movi	r4,100
 1000c64:	014019c4 	movi	r5,103
 1000c68:	01801904 	movi	r6,100
 1000c6c:	01c000c4 	movi	r7,3
 1000c70:	100056c0 	call	100056c <HLine>
	  HLine(100,104,100,3);
 1000c74:	01001904 	movi	r4,100
 1000c78:	01401a04 	movi	r5,104
 1000c7c:	01801904 	movi	r6,100
 1000c80:	01c000c4 	movi	r7,3
 1000c84:	100056c0 	call	100056c <HLine>
	  WriteHLine(100,105,100,4);
 1000c88:	01001904 	movi	r4,100
 1000c8c:	01401a44 	movi	r5,105
 1000c90:	01801904 	movi	r6,100
 1000c94:	01c00104 	movi	r7,4
 1000c98:	10003100 	call	1000310 <WriteHLine>
	  WriteHLine(100,106,100,4);
 1000c9c:	01001904 	movi	r4,100
 1000ca0:	01401a84 	movi	r5,106
 1000ca4:	01801904 	movi	r6,100
 1000ca8:	01c00104 	movi	r7,4
 1000cac:	10003100 	call	1000310 <WriteHLine>
	  WriteHLine(100,107,100,4);
 1000cb0:	01001904 	movi	r4,100
 1000cb4:	01401ac4 	movi	r5,107
 1000cb8:	01801904 	movi	r6,100
 1000cbc:	01c00104 	movi	r7,4
 1000cc0:	10003100 	call	1000310 <WriteHLine>
	  WriteHLine(100,108,100,4);
 1000cc4:	01001904 	movi	r4,100
 1000cc8:	01401b04 	movi	r5,108
 1000ccc:	01801904 	movi	r6,100
 1000cd0:	01c00104 	movi	r7,4
 1000cd4:	10003100 	call	1000310 <WriteHLine>
	  WriteHLine(100,109,100,4);
 1000cd8:	01001904 	movi	r4,100
 1000cdc:	01401b44 	movi	r5,109
 1000ce0:	01801904 	movi	r6,100
 1000ce4:	01c00104 	movi	r7,4
 1000ce8:	10003100 	call	1000310 <WriteHLine>

	  VLine(200,200,100,5);
 1000cec:	01003204 	movi	r4,200
 1000cf0:	01403204 	movi	r5,200
 1000cf4:	01801904 	movi	r6,100
 1000cf8:	01c00144 	movi	r7,5
 1000cfc:	10005dc0 	call	10005dc <VLine>
	  VLine(201,200,100,5);
 1000d00:	01003244 	movi	r4,201
 1000d04:	01403204 	movi	r5,200
 1000d08:	01801904 	movi	r6,100
 1000d0c:	01c00144 	movi	r7,5
 1000d10:	10005dc0 	call	10005dc <VLine>
	  VLine(202,200,100,5);
 1000d14:	01003284 	movi	r4,202
 1000d18:	01403204 	movi	r5,200
 1000d1c:	01801904 	movi	r6,100
 1000d20:	01c00144 	movi	r7,5
 1000d24:	10005dc0 	call	10005dc <VLine>
	  VLine(203,200,100,5);
 1000d28:	010032c4 	movi	r4,203
 1000d2c:	01403204 	movi	r5,200
 1000d30:	01801904 	movi	r6,100
 1000d34:	01c00144 	movi	r7,5
 1000d38:	10005dc0 	call	10005dc <VLine>
	  VLine(204,200,100,5);
 1000d3c:	01003304 	movi	r4,204
 1000d40:	01403204 	movi	r5,200
 1000d44:	01801904 	movi	r6,100
 1000d48:	01c00144 	movi	r7,5
 1000d4c:	10005dc0 	call	10005dc <VLine>
	  WriteVLine(205,200,100,6);
 1000d50:	01003344 	movi	r4,205
 1000d54:	01403204 	movi	r5,200
 1000d58:	01801904 	movi	r6,100
 1000d5c:	01c00184 	movi	r7,6
 1000d60:	10003b00 	call	10003b0 <WriteVLine>
	  WriteVLine(206,200,100,6);
 1000d64:	01003384 	movi	r4,206
 1000d68:	01403204 	movi	r5,200
 1000d6c:	01801904 	movi	r6,100
 1000d70:	01c00184 	movi	r7,6
 1000d74:	10003b00 	call	10003b0 <WriteVLine>
	  WriteVLine(207,200,100,6);
 1000d78:	010033c4 	movi	r4,207
 1000d7c:	01403204 	movi	r5,200
 1000d80:	01801904 	movi	r6,100
 1000d84:	01c00184 	movi	r7,6
 1000d88:	10003b00 	call	10003b0 <WriteVLine>
	  WriteVLine(208,200,100,6);
 1000d8c:	01003404 	movi	r4,208
 1000d90:	01403204 	movi	r5,200
 1000d94:	01801904 	movi	r6,100
 1000d98:	01c00184 	movi	r7,6
 1000d9c:	10003b00 	call	10003b0 <WriteVLine>
	  WriteVLine(209,200,100,6);
 1000da0:	01003444 	movi	r4,209
 1000da4:	01403204 	movi	r5,200
 1000da8:	01801904 	movi	r6,100
 1000dac:	01c00184 	movi	r7,6
 1000db0:	10003b00 	call	10003b0 <WriteVLine>

	  HLine(500,100,100,3);
 1000db4:	01007d04 	movi	r4,500
 1000db8:	01401904 	movi	r5,100
 1000dbc:	01801904 	movi	r6,100
 1000dc0:	01c000c4 	movi	r7,3
 1000dc4:	100056c0 	call	100056c <HLine>
	  HLine(500,101,100,3);
 1000dc8:	01007d04 	movi	r4,500
 1000dcc:	01401944 	movi	r5,101
 1000dd0:	01801904 	movi	r6,100
 1000dd4:	01c000c4 	movi	r7,3
 1000dd8:	100056c0 	call	100056c <HLine>
	  HLine(500,102,100,3);
 1000ddc:	01007d04 	movi	r4,500
 1000de0:	01401984 	movi	r5,102
 1000de4:	01801904 	movi	r6,100
 1000de8:	01c000c4 	movi	r7,3
 1000dec:	100056c0 	call	100056c <HLine>
	  HLine(500,103,100,3);
 1000df0:	01007d04 	movi	r4,500
 1000df4:	014019c4 	movi	r5,103
 1000df8:	01801904 	movi	r6,100
 1000dfc:	01c000c4 	movi	r7,3
 1000e00:	100056c0 	call	100056c <HLine>
	  HLine(500,104,100,3);
 1000e04:	01007d04 	movi	r4,500
 1000e08:	01401a04 	movi	r5,104
 1000e0c:	01801904 	movi	r6,100
 1000e10:	01c000c4 	movi	r7,3
 1000e14:	100056c0 	call	100056c <HLine>
	  WriteHLine(500,105,100,4);
 1000e18:	01007d04 	movi	r4,500
 1000e1c:	01401a44 	movi	r5,105
 1000e20:	01801904 	movi	r6,100
 1000e24:	01c00104 	movi	r7,4
 1000e28:	10003100 	call	1000310 <WriteHLine>
	  WriteHLine(500,106,100,4);
 1000e2c:	01007d04 	movi	r4,500
 1000e30:	01401a84 	movi	r5,106
 1000e34:	01801904 	movi	r6,100
 1000e38:	01c00104 	movi	r7,4
 1000e3c:	10003100 	call	1000310 <WriteHLine>
	  WriteHLine(500,107,100,4);
 1000e40:	01007d04 	movi	r4,500
 1000e44:	01401ac4 	movi	r5,107
 1000e48:	01801904 	movi	r6,100
 1000e4c:	01c00104 	movi	r7,4
 1000e50:	10003100 	call	1000310 <WriteHLine>
	  WriteHLine(500,108,100,4);
 1000e54:	01007d04 	movi	r4,500
 1000e58:	01401b04 	movi	r5,108
 1000e5c:	01801904 	movi	r6,100
 1000e60:	01c00104 	movi	r7,4
 1000e64:	10003100 	call	1000310 <WriteHLine>
	  WriteHLine(500,109,100,4);
 1000e68:	01007d04 	movi	r4,500
 1000e6c:	01401b44 	movi	r5,109
 1000e70:	01801904 	movi	r6,100
 1000e74:	01c00104 	movi	r7,4
 1000e78:	10003100 	call	1000310 <WriteHLine>

	  VLine(500,200,100,5);
 1000e7c:	01007d04 	movi	r4,500
 1000e80:	01403204 	movi	r5,200
 1000e84:	01801904 	movi	r6,100
 1000e88:	01c00144 	movi	r7,5
 1000e8c:	10005dc0 	call	10005dc <VLine>
	  VLine(501,200,100,5);
 1000e90:	01007d44 	movi	r4,501
 1000e94:	01403204 	movi	r5,200
 1000e98:	01801904 	movi	r6,100
 1000e9c:	01c00144 	movi	r7,5
 1000ea0:	10005dc0 	call	10005dc <VLine>
	  VLine(502,200,100,5);
 1000ea4:	01007d84 	movi	r4,502
 1000ea8:	01403204 	movi	r5,200
 1000eac:	01801904 	movi	r6,100
 1000eb0:	01c00144 	movi	r7,5
 1000eb4:	10005dc0 	call	10005dc <VLine>
	  VLine(503,200,100,5);
 1000eb8:	01007dc4 	movi	r4,503
 1000ebc:	01403204 	movi	r5,200
 1000ec0:	01801904 	movi	r6,100
 1000ec4:	01c00144 	movi	r7,5
 1000ec8:	10005dc0 	call	10005dc <VLine>
	  VLine(504,200,100,5);
 1000ecc:	01007e04 	movi	r4,504
 1000ed0:	01403204 	movi	r5,200
 1000ed4:	01801904 	movi	r6,100
 1000ed8:	01c00144 	movi	r7,5
 1000edc:	10005dc0 	call	10005dc <VLine>
	  WriteVLine(505,200,100,6);
 1000ee0:	01007e44 	movi	r4,505
 1000ee4:	01403204 	movi	r5,200
 1000ee8:	01801904 	movi	r6,100
 1000eec:	01c00184 	movi	r7,6
 1000ef0:	10003b00 	call	10003b0 <WriteVLine>
	  WriteVLine(506,200,100,6);
 1000ef4:	01007e84 	movi	r4,506
 1000ef8:	01403204 	movi	r5,200
 1000efc:	01801904 	movi	r6,100
 1000f00:	01c00184 	movi	r7,6
 1000f04:	10003b00 	call	10003b0 <WriteVLine>
	  WriteVLine(507,200,100,6);
 1000f08:	01007ec4 	movi	r4,507
 1000f0c:	01403204 	movi	r5,200
 1000f10:	01801904 	movi	r6,100
 1000f14:	01c00184 	movi	r7,6
 1000f18:	10003b00 	call	10003b0 <WriteVLine>
	  WriteVLine(508,200,100,6);
 1000f1c:	01007f04 	movi	r4,508
 1000f20:	01403204 	movi	r5,200
 1000f24:	01801904 	movi	r6,100
 1000f28:	01c00184 	movi	r7,6
 1000f2c:	10003b00 	call	10003b0 <WriteVLine>
	  WriteVLine(509,200,100,6);
 1000f30:	01007f44 	movi	r4,509
 1000f34:	01403204 	movi	r5,200
 1000f38:	01801904 	movi	r6,100
 1000f3c:	01c00184 	movi	r7,6
 1000f40:	10003b00 	call	10003b0 <WriteVLine>
	  // compare bresenham lines
	  // should see a black line on top
	  // and a purple line a few pixels below it
	  // otherwise the hardware-accelerated line doesn't perfectly match

	  WriteLine(240,340,440,440,7);
 1000f44:	008001c4 	movi	r2,7
 1000f48:	d8800015 	stw	r2,0(sp)
 1000f4c:	01003c04 	movi	r4,240
 1000f50:	01405504 	movi	r5,340
 1000f54:	01806e04 	movi	r6,440
 1000f58:	01c06e04 	movi	r7,440
 1000f5c:	10004500 	call	1000450 <WriteLine>
	  WriteLine(239,339,439,439,7);
 1000f60:	008001c4 	movi	r2,7
 1000f64:	d8800015 	stw	r2,0(sp)
 1000f68:	01003bc4 	movi	r4,239
 1000f6c:	014054c4 	movi	r5,339
 1000f70:	01806dc4 	movi	r6,439
 1000f74:	01c06dc4 	movi	r7,439
 1000f78:	10004500 	call	1000450 <WriteLine>
	  Line(240,340,440,440,0);
 1000f7c:	d8000015 	stw	zero,0(sp)
 1000f80:	01003c04 	movi	r4,240
 1000f84:	01405504 	movi	r5,340
 1000f88:	01806e04 	movi	r6,440
 1000f8c:	01c06e04 	movi	r7,440
 1000f90:	10006ec0 	call	10006ec <Line>
	  Line(239,339,439,439,0);
 1000f94:	d8000015 	stw	zero,0(sp)
 1000f98:	01003bc4 	movi	r4,239
 1000f9c:	014054c4 	movi	r5,339
 1000fa0:	01806dc4 	movi	r6,439
 1000fa4:	01c06dc4 	movi	r7,439
 1000fa8:	10006ec0 	call	10006ec <Line>

	  Line(250,350,450,450,0);
 1000fac:	d8000015 	stw	zero,0(sp)
 1000fb0:	01003e84 	movi	r4,250
 1000fb4:	01405784 	movi	r5,350
 1000fb8:	01807084 	movi	r6,450
 1000fbc:	01c07084 	movi	r7,450
 1000fc0:	10006ec0 	call	10006ec <Line>
	  Line(249,349,449,449,0);
 1000fc4:	d8000015 	stw	zero,0(sp)
 1000fc8:	01003e44 	movi	r4,249
 1000fcc:	01405744 	movi	r5,349
 1000fd0:	01807044 	movi	r6,449
 1000fd4:	01c07044 	movi	r7,449
 1000fd8:	10006ec0 	call	10006ec <Line>
	  WriteLine(250,350,450,450,7);
 1000fdc:	008001c4 	movi	r2,7
 1000fe0:	d8800015 	stw	r2,0(sp)
 1000fe4:	01003e84 	movi	r4,250
 1000fe8:	01405784 	movi	r5,350
 1000fec:	01807084 	movi	r6,450
 1000ff0:	01c07084 	movi	r7,450
 1000ff4:	10004500 	call	1000450 <WriteLine>
	  WriteLine(249,349,449,449,7);
 1000ff8:	008001c4 	movi	r2,7
 1000ffc:	d8800015 	stw	r2,0(sp)
 1001000:	01003e44 	movi	r4,249
 1001004:	01405744 	movi	r5,349
 1001008:	01807044 	movi	r6,449
 100100c:	01c07044 	movi	r7,449
 1001010:	10004500 	call	1000450 <WriteLine>
}
 1001014:	e037883a 	mov	sp,fp
 1001018:	dfc00117 	ldw	ra,4(sp)
 100101c:	df000017 	ldw	fp,0(sp)
 1001020:	dec00204 	addi	sp,sp,8
 1001024:	f800283a 	ret

01001028 <connect_points>:
struct point {
	int x;
	int y;
};

void connect_points(int colour) {
 1001028:	defff204 	addi	sp,sp,-56
 100102c:	dfc00d15 	stw	ra,52(sp)
 1001030:	df000c15 	stw	fp,48(sp)
 1001034:	df000c04 	addi	fp,sp,48
 1001038:	e13ffc15 	stw	r4,-16(fp)
 100103c:	e6ffff15 	stw	sp,-4(fp)
 1001040:	d805883a 	mov	r2,sp
 1001044:	e0bffd15 	stw	r2,-12(fp)
	int number_of_points = 6;
 1001048:	00800184 	movi	r2,6
 100104c:	e0bff615 	stw	r2,-40(fp)
	struct point points[number_of_points];
 1001050:	e0bff617 	ldw	r2,-40(fp)
 1001054:	100490fa 	slli	r2,r2,3
 1001058:	108000c4 	addi	r2,r2,3
 100105c:	108000c4 	addi	r2,r2,3
 1001060:	1004d0ba 	srli	r2,r2,2
 1001064:	1085883a 	add	r2,r2,r2
 1001068:	1085883a 	add	r2,r2,r2
 100106c:	d8b7c83a 	sub	sp,sp,r2
 1001070:	d8800104 	addi	r2,sp,4
 1001074:	e0bffe15 	stw	r2,-8(fp)
 1001078:	e0fffe17 	ldw	r3,-8(fp)
 100107c:	188000c4 	addi	r2,r3,3
 1001080:	1004d0ba 	srli	r2,r2,2
 1001084:	1085883a 	add	r2,r2,r2
 1001088:	1085883a 	add	r2,r2,r2
 100108c:	e0bffe15 	stw	r2,-8(fp)
 1001090:	e0bffe17 	ldw	r2,-8(fp)
 1001094:	e0bff715 	stw	r2,-36(fp)

	points[0].x = 0;
 1001098:	e0bff717 	ldw	r2,-36(fp)
 100109c:	10000015 	stw	zero,0(r2)
	points[0].y = 0;
 10010a0:	e0bff717 	ldw	r2,-36(fp)
 10010a4:	10000115 	stw	zero,4(r2)

	points[1].x = 100;
 10010a8:	e0fff717 	ldw	r3,-36(fp)
 10010ac:	00801904 	movi	r2,100
 10010b0:	18800215 	stw	r2,8(r3)
	points[1].y = 100;
 10010b4:	e0fff717 	ldw	r3,-36(fp)
 10010b8:	00801904 	movi	r2,100
 10010bc:	18800315 	stw	r2,12(r3)

	points[2].x = 60;
 10010c0:	e0fff717 	ldw	r3,-36(fp)
 10010c4:	00800f04 	movi	r2,60
 10010c8:	18800415 	stw	r2,16(r3)
	points[2].y = 120;
 10010cc:	e0fff717 	ldw	r3,-36(fp)
 10010d0:	00801e04 	movi	r2,120
 10010d4:	18800515 	stw	r2,20(r3)

	points[3].x = 200;
 10010d8:	e0fff717 	ldw	r3,-36(fp)
 10010dc:	00803204 	movi	r2,200
 10010e0:	18800615 	stw	r2,24(r3)
	points[3].y = 100;
 10010e4:	e0fff717 	ldw	r3,-36(fp)
 10010e8:	00801904 	movi	r2,100
 10010ec:	18800715 	stw	r2,28(r3)

	points[4].x = 0;
 10010f0:	e0bff717 	ldw	r2,-36(fp)
 10010f4:	10000815 	stw	zero,32(r2)
	points[4].y = 300;
 10010f8:	e0fff717 	ldw	r3,-36(fp)
 10010fc:	00804b04 	movi	r2,300
 1001100:	18800915 	stw	r2,36(r3)

	points[5].x = XRES;
 1001104:	e0fff717 	ldw	r3,-36(fp)
 1001108:	0080c804 	movi	r2,800
 100110c:	18800a15 	stw	r2,40(r3)
	points[5].y = 0;
 1001110:	e0bff717 	ldw	r2,-36(fp)
 1001114:	10000b15 	stw	zero,44(r2)

	int i;
	struct point point_a;
	struct point point_b;
	for(i = 1; i < number_of_points; i++) {
 1001118:	00800044 	movi	r2,1
 100111c:	e0bff515 	stw	r2,-44(fp)
 1001120:	00001b06 	br	1001190 <connect_points+0x168>
		point_a = points[i-1];
 1001124:	e0bff517 	ldw	r2,-44(fp)
 1001128:	10bfffc4 	addi	r2,r2,-1
 100112c:	e0fff717 	ldw	r3,-36(fp)
 1001130:	100490fa 	slli	r2,r2,3
 1001134:	10c9883a 	add	r4,r2,r3
 1001138:	20800017 	ldw	r2,0(r4)
 100113c:	20c00117 	ldw	r3,4(r4)
 1001140:	e0bff815 	stw	r2,-32(fp)
 1001144:	e0fff915 	stw	r3,-28(fp)
		point_b = points[i];
 1001148:	e0bff517 	ldw	r2,-44(fp)
 100114c:	e0fff717 	ldw	r3,-36(fp)
 1001150:	100490fa 	slli	r2,r2,3
 1001154:	10c9883a 	add	r4,r2,r3
 1001158:	20800017 	ldw	r2,0(r4)
 100115c:	20c00117 	ldw	r3,4(r4)
 1001160:	e0bffa15 	stw	r2,-24(fp)
 1001164:	e0fffb15 	stw	r3,-20(fp)
		WriteLine(point_a.x, point_a.y, point_b.x, point_b.y, colour);
 1001168:	e13ff817 	ldw	r4,-32(fp)
 100116c:	e17ff917 	ldw	r5,-28(fp)
 1001170:	e1bffa17 	ldw	r6,-24(fp)
 1001174:	e1fffb17 	ldw	r7,-20(fp)
 1001178:	e0bffc17 	ldw	r2,-16(fp)
 100117c:	d8800015 	stw	r2,0(sp)
 1001180:	10004500 	call	1000450 <WriteLine>
	points[5].y = 0;

	int i;
	struct point point_a;
	struct point point_b;
	for(i = 1; i < number_of_points; i++) {
 1001184:	e0bff517 	ldw	r2,-44(fp)
 1001188:	10800044 	addi	r2,r2,1
 100118c:	e0bff515 	stw	r2,-44(fp)
 1001190:	e0fff517 	ldw	r3,-44(fp)
 1001194:	e0bff617 	ldw	r2,-40(fp)
 1001198:	18bfe216 	blt	r3,r2,1001124 <connect_points+0xfc>
 100119c:	e6fffd17 	ldw	sp,-12(fp)
		point_a = points[i-1];
		point_b = points[i];
		WriteLine(point_a.x, point_a.y, point_b.x, point_b.y, colour);
	}
}
 10011a0:	e6ffff17 	ldw	sp,-4(fp)
 10011a4:	e037883a 	mov	sp,fp
 10011a8:	dfc00117 	ldw	ra,4(sp)
 10011ac:	df000017 	ldw	fp,0(sp)
 10011b0:	dec00204 	addi	sp,sp,8
 10011b4:	f800283a 	ret

010011b8 <draw_bottom_part>:

void draw_bottom_part() {
 10011b8:	defffd04 	addi	sp,sp,-12
 10011bc:	dfc00215 	stw	ra,8(sp)
 10011c0:	df000115 	stw	fp,4(sp)
 10011c4:	df000104 	addi	fp,sp,4
	WriteHLine(1, 349, XRES, WHITE);
 10011c8:	01000044 	movi	r4,1
 10011cc:	01405744 	movi	r5,349
 10011d0:	0180c804 	movi	r6,800
 10011d4:	01c00044 	movi	r7,1
 10011d8:	10003100 	call	1000310 <WriteHLine>
	int i;
	for(i = 350; i < YRES; i++) {
 10011dc:	00805784 	movi	r2,350
 10011e0:	e0bfff15 	stw	r2,-4(fp)
 10011e4:	00000806 	br	1001208 <draw_bottom_part+0x50>
		WriteHLine(1, i, XRES/4, BLACK);
 10011e8:	01000044 	movi	r4,1
 10011ec:	e17fff17 	ldw	r5,-4(fp)
 10011f0:	01803204 	movi	r6,200
 10011f4:	000f883a 	mov	r7,zero
 10011f8:	10003100 	call	1000310 <WriteHLine>
}

void draw_bottom_part() {
	WriteHLine(1, 349, XRES, WHITE);
	int i;
	for(i = 350; i < YRES; i++) {
 10011fc:	e0bfff17 	ldw	r2,-4(fp)
 1001200:	10800044 	addi	r2,r2,1
 1001204:	e0bfff15 	stw	r2,-4(fp)
 1001208:	e0bfff17 	ldw	r2,-4(fp)
 100120c:	10807810 	cmplti	r2,r2,480
 1001210:	103ff51e 	bne	r2,zero,10011e8 <draw_bottom_part+0x30>
		WriteHLine(1, i, XRES/4, BLACK);
	}
	for(i = 350; i < YRES; i++) {
 1001214:	00805784 	movi	r2,350
 1001218:	e0bfff15 	stw	r2,-4(fp)
 100121c:	00000806 	br	1001240 <draw_bottom_part+0x88>
		WriteHLine(XRES/4, i, XRES/4, RED);
 1001220:	01003204 	movi	r4,200
 1001224:	e17fff17 	ldw	r5,-4(fp)
 1001228:	01803204 	movi	r6,200
 100122c:	01c00084 	movi	r7,2
 1001230:	10003100 	call	1000310 <WriteHLine>
	WriteHLine(1, 349, XRES, WHITE);
	int i;
	for(i = 350; i < YRES; i++) {
		WriteHLine(1, i, XRES/4, BLACK);
	}
	for(i = 350; i < YRES; i++) {
 1001234:	e0bfff17 	ldw	r2,-4(fp)
 1001238:	10800044 	addi	r2,r2,1
 100123c:	e0bfff15 	stw	r2,-4(fp)
 1001240:	e0bfff17 	ldw	r2,-4(fp)
 1001244:	10807810 	cmplti	r2,r2,480
 1001248:	103ff51e 	bne	r2,zero,1001220 <draw_bottom_part+0x68>
		WriteHLine(XRES/4, i, XRES/4, RED);
	}
	for(i = 350; i < YRES; i++) {
 100124c:	00805784 	movi	r2,350
 1001250:	e0bfff15 	stw	r2,-4(fp)
 1001254:	00000806 	br	1001278 <draw_bottom_part+0xc0>
		WriteHLine(2*XRES/4, i, XRES/4, BLUE);
 1001258:	01006404 	movi	r4,400
 100125c:	e17fff17 	ldw	r5,-4(fp)
 1001260:	01803204 	movi	r6,200
 1001264:	01c00104 	movi	r7,4
 1001268:	10003100 	call	1000310 <WriteHLine>
		WriteHLine(1, i, XRES/4, BLACK);
	}
	for(i = 350; i < YRES; i++) {
		WriteHLine(XRES/4, i, XRES/4, RED);
	}
	for(i = 350; i < YRES; i++) {
 100126c:	e0bfff17 	ldw	r2,-4(fp)
 1001270:	10800044 	addi	r2,r2,1
 1001274:	e0bfff15 	stw	r2,-4(fp)
 1001278:	e0bfff17 	ldw	r2,-4(fp)
 100127c:	10807810 	cmplti	r2,r2,480
 1001280:	103ff51e 	bne	r2,zero,1001258 <draw_bottom_part+0xa0>
		WriteHLine(2*XRES/4, i, XRES/4, BLUE);
	}
	for(i = 350; i < YRES; i++) {
 1001284:	00805784 	movi	r2,350
 1001288:	e0bfff15 	stw	r2,-4(fp)
 100128c:	00000806 	br	10012b0 <draw_bottom_part+0xf8>
		WriteHLine(3*XRES/4, i, XRES/4, LIME);
 1001290:	01009604 	movi	r4,600
 1001294:	e17fff17 	ldw	r5,-4(fp)
 1001298:	01803204 	movi	r6,200
 100129c:	01c000c4 	movi	r7,3
 10012a0:	10003100 	call	1000310 <WriteHLine>
		WriteHLine(XRES/4, i, XRES/4, RED);
	}
	for(i = 350; i < YRES; i++) {
		WriteHLine(2*XRES/4, i, XRES/4, BLUE);
	}
	for(i = 350; i < YRES; i++) {
 10012a4:	e0bfff17 	ldw	r2,-4(fp)
 10012a8:	10800044 	addi	r2,r2,1
 10012ac:	e0bfff15 	stw	r2,-4(fp)
 10012b0:	e0bfff17 	ldw	r2,-4(fp)
 10012b4:	10807810 	cmplti	r2,r2,480
 10012b8:	103ff51e 	bne	r2,zero,1001290 <draw_bottom_part+0xd8>
		WriteHLine(3*XRES/4, i, XRES/4, LIME);
	}
}
 10012bc:	e037883a 	mov	sp,fp
 10012c0:	dfc00117 	ldw	ra,4(sp)
 10012c4:	df000017 	ldw	fp,0(sp)
 10012c8:	dec00204 	addi	sp,sp,8
 10012cc:	f800283a 	ret

010012d0 <draw_top_part>:

void draw_top_part(int colour) {
 10012d0:	defffc04 	addi	sp,sp,-16
 10012d4:	dfc00315 	stw	ra,12(sp)
 10012d8:	df000215 	stw	fp,8(sp)
 10012dc:	df000204 	addi	fp,sp,8
 10012e0:	e13fff15 	stw	r4,-4(fp)
	int i;
	for(i = 1; i <= 348; i++) {
 10012e4:	00800044 	movi	r2,1
 10012e8:	e0bffe15 	stw	r2,-8(fp)
 10012ec:	00000806 	br	1001310 <draw_top_part+0x40>
		WriteHLine(1, i, (XRES), colour);
 10012f0:	01000044 	movi	r4,1
 10012f4:	e17ffe17 	ldw	r5,-8(fp)
 10012f8:	0180c804 	movi	r6,800
 10012fc:	e1ffff17 	ldw	r7,-4(fp)
 1001300:	10003100 	call	1000310 <WriteHLine>
	}
}

void draw_top_part(int colour) {
	int i;
	for(i = 1; i <= 348; i++) {
 1001304:	e0bffe17 	ldw	r2,-8(fp)
 1001308:	10800044 	addi	r2,r2,1
 100130c:	e0bffe15 	stw	r2,-8(fp)
 1001310:	e0bffe17 	ldw	r2,-8(fp)
 1001314:	10805750 	cmplti	r2,r2,349
 1001318:	103ff51e 	bne	r2,zero,10012f0 <draw_top_part+0x20>
		WriteHLine(1, i, (XRES), colour);
	}
	connect_points(WHITE);
 100131c:	01000044 	movi	r4,1
 1001320:	10010280 	call	1001028 <connect_points>
}
 1001324:	e037883a 	mov	sp,fp
 1001328:	dfc00117 	ldw	ra,4(sp)
 100132c:	df000017 	ldw	fp,0(sp)
 1001330:	dec00204 	addi	sp,sp,8
 1001334:	f800283a 	ret

01001338 <main>:

int main() {
 1001338:	defffc04 	addi	sp,sp,-16
 100133c:	dfc00315 	stw	ra,12(sp)
 1001340:	df000215 	stw	fp,8(sp)
 1001344:	df000204 	addi	fp,sp,8
	//Init_Touch();


  //black_screen();

  draw_bottom_part();
 1001348:	10011b80 	call	10011b8 <draw_bottom_part>
  printf("Demo start\n");
 100134c:	01004074 	movhi	r4,257
 1001350:	21209304 	addi	r4,r4,-32180
 1001354:	10027780 	call	1002778 <puts>
  draw_top_part(BLACK);
 1001358:	0009883a 	mov	r4,zero
 100135c:	10012d00 	call	10012d0 <draw_top_part>
 1001360:	00000006 	br	1001364 <main+0x2c>

  do{
	  GetPress();
 1001364:	10015640 	call	1001564 <GetPress>
  	  Point p = GetRelease();
 1001368:	10017580 	call	1001758 <GetRelease>
 100136c:	1009883a 	mov	r4,r2
 1001370:	180b883a 	mov	r5,r3
 1001374:	e13ffe15 	stw	r4,-8(fp)
 1001378:	e17fff15 	stw	r5,-4(fp)
  	  if(p.y >= STARTY){
 100137c:	e0bfff17 	ldw	r2,-4(fp)
 1001380:	10805790 	cmplti	r2,r2,350
 1001384:	103ff71e 	bne	r2,zero,1001364 <main+0x2c>
  		  if(p.x <= XRES / 4){
 1001388:	e0bffe17 	ldw	r2,-8(fp)
 100138c:	10803248 	cmpgei	r2,r2,201
 1001390:	1000031e 	bne	r2,zero,10013a0 <main+0x68>
  			  draw_top_part(BLACK);
 1001394:	0009883a 	mov	r4,zero
 1001398:	10012d00 	call	10012d0 <draw_top_part>
 100139c:	003ff106 	br	1001364 <main+0x2c>
  		  }else if(p.x <= XRES / 2){
 10013a0:	e0bffe17 	ldw	r2,-8(fp)
 10013a4:	10806448 	cmpgei	r2,r2,401
 10013a8:	1000031e 	bne	r2,zero,10013b8 <main+0x80>
  			  draw_top_part(RED);
 10013ac:	01000084 	movi	r4,2
 10013b0:	10012d00 	call	10012d0 <draw_top_part>
 10013b4:	003feb06 	br	1001364 <main+0x2c>
  		  }else if(p.x <= 3 * XRES / 4){
 10013b8:	e0bffe17 	ldw	r2,-8(fp)
 10013bc:	10809648 	cmpgei	r2,r2,601
 10013c0:	1000031e 	bne	r2,zero,10013d0 <main+0x98>
  			  draw_top_part(BLUE);
 10013c4:	01000104 	movi	r4,4
 10013c8:	10012d00 	call	10012d0 <draw_top_part>
 10013cc:	003fe506 	br	1001364 <main+0x2c>
  		  }else{
  			  draw_top_part(LIME);
 10013d0:	010000c4 	movi	r4,3
 10013d4:	10012d00 	call	10012d0 <draw_top_part>
  		  }
  	  }
  }while(1);
 10013d8:	003fe206 	br	1001364 <main+0x2c>

010013dc <Init_Touch>:

#define TOUCH_STATUS_RX_MASK 0x01
#define TOUCH_STATUS_TX_MASK 0x02

void Init_Touch ( void )
{
 10013dc:	defffd04 	addi	sp,sp,-12
 10013e0:	df000215 	stw	fp,8(sp)
 10013e4:	df000204 	addi	fp,sp,8
// Program 6850 and baud rate generator to communicate with touchscreen
// send touchscreen controller an "enable touch" command
	TOUCH_CONTROL = 0x03;
 10013e8:	00e10034 	movhi	r3,33792
 10013ec:	18c08c04 	addi	r3,r3,560
 10013f0:	008000c4 	movi	r2,3
 10013f4:	18800005 	stb	r2,0(r3)
	TOUCH_BAUD = 0x07;
 10013f8:	00e10034 	movhi	r3,33792
 10013fc:	18c08d04 	addi	r3,r3,564
 1001400:	008001c4 	movi	r2,7
 1001404:	18800005 	stb	r2,0(r3)
	TOUCH_CONTROL = 0x15;
 1001408:	00e10034 	movhi	r3,33792
 100140c:	18c08c04 	addi	r3,r3,560
 1001410:	00800544 	movi	r2,21
 1001414:	18800005 	stb	r2,0(r3)


	int i;
	for( i = 0; i < 3; i++){
 1001418:	e03ffe15 	stw	zero,-8(fp)
 100141c:	00002406 	br	10014b0 <Init_Touch+0xd4>
		while(1){
			if(TOUCH_STATUS & TOUCH_STATUS_TX_MASK){
 1001420:	00a10034 	movhi	r2,33792
 1001424:	10808c04 	addi	r2,r2,560
 1001428:	10800003 	ldbu	r2,0(r2)
 100142c:	10803fcc 	andi	r2,r2,255
 1001430:	1080008c 	andi	r2,r2,2
 1001434:	1005003a 	cmpeq	r2,r2,zero
 1001438:	103ff91e 	bne	r2,zero,1001420 <Init_Touch+0x44>
				switch(i){
 100143c:	e0bffe17 	ldw	r2,-8(fp)
 1001440:	e0bfff15 	stw	r2,-4(fp)
 1001444:	e0ffff17 	ldw	r3,-4(fp)
 1001448:	18800060 	cmpeqi	r2,r3,1
 100144c:	10000c1e 	bne	r2,zero,1001480 <Init_Touch+0xa4>
 1001450:	e0ffff17 	ldw	r3,-4(fp)
 1001454:	188000a0 	cmpeqi	r2,r3,2
 1001458:	10000e1e 	bne	r2,zero,1001494 <Init_Touch+0xb8>
 100145c:	e0ffff17 	ldw	r3,-4(fp)
 1001460:	1805003a 	cmpeq	r2,r3,zero
 1001464:	1000011e 	bne	r2,zero,100146c <Init_Touch+0x90>
 1001468:	00000e06 	br	10014a4 <Init_Touch+0xc8>
				case 0:
					TOUCH_TX = 0x55;
 100146c:	00e10034 	movhi	r3,33792
 1001470:	18c08c84 	addi	r3,r3,562
 1001474:	00801544 	movi	r2,85
 1001478:	18800005 	stb	r2,0(r3)
					break;
 100147c:	00000906 	br	10014a4 <Init_Touch+0xc8>
				case 1:
					TOUCH_TX = 0x01;
 1001480:	00e10034 	movhi	r3,33792
 1001484:	18c08c84 	addi	r3,r3,562
 1001488:	00800044 	movi	r2,1
 100148c:	18800005 	stb	r2,0(r3)
					break;
 1001490:	00000406 	br	10014a4 <Init_Touch+0xc8>
				case 2:
					TOUCH_TX = 0x12;
 1001494:	00e10034 	movhi	r3,33792
 1001498:	18c08c84 	addi	r3,r3,562
 100149c:	00800484 	movi	r2,18
 10014a0:	18800005 	stb	r2,0(r3)
	TOUCH_BAUD = 0x07;
	TOUCH_CONTROL = 0x15;


	int i;
	for( i = 0; i < 3; i++){
 10014a4:	e0bffe17 	ldw	r2,-8(fp)
 10014a8:	10800044 	addi	r2,r2,1
 10014ac:	e0bffe15 	stw	r2,-8(fp)
 10014b0:	e0bffe17 	ldw	r2,-8(fp)
 10014b4:	108000d0 	cmplti	r2,r2,3
 10014b8:	103fd91e 	bne	r2,zero,1001420 <Init_Touch+0x44>
				break;
			}
		}
	}

}
 10014bc:	e037883a 	mov	sp,fp
 10014c0:	df000017 	ldw	fp,0(sp)
 10014c4:	dec00104 	addi	sp,sp,4
 10014c8:	f800283a 	ret

010014cc <ScreenTouched>:
/*****************************************************************************
**   test if screen touched
*****************************************************************************/
int ScreenTouched( void)
{
 10014cc:	defffe04 	addi	sp,sp,-8
 10014d0:	df000115 	stw	fp,4(sp)
 10014d4:	df000104 	addi	fp,sp,4
// return TRUE if any data received from 6850 connected to touchscreen
// or FALSE otherwise
	if(TOUCH_STATUS_RX_MASK & TOUCH_STATUS){
 10014d8:	00a10034 	movhi	r2,33792
 10014dc:	10808c04 	addi	r2,r2,560
 10014e0:	10800003 	ldbu	r2,0(r2)
 10014e4:	10803fcc 	andi	r2,r2,255
 10014e8:	1080004c 	andi	r2,r2,1
 10014ec:	10803fcc 	andi	r2,r2,255
 10014f0:	1005003a 	cmpeq	r2,r2,zero
 10014f4:	1000091e 	bne	r2,zero,100151c <ScreenTouched+0x50>
		if(TOUCH_RX == 0x81){
 10014f8:	00a10034 	movhi	r2,33792
 10014fc:	10808c84 	addi	r2,r2,562
 1001500:	10800003 	ldbu	r2,0(r2)
 1001504:	10803fcc 	andi	r2,r2,255
 1001508:	10802058 	cmpnei	r2,r2,129
 100150c:	1000031e 	bne	r2,zero,100151c <ScreenTouched+0x50>
			return 1;
 1001510:	00800044 	movi	r2,1
 1001514:	e0bfff15 	stw	r2,-4(fp)
 1001518:	00000106 	br	1001520 <ScreenTouched+0x54>
		}
	}

	return 0;
 100151c:	e03fff15 	stw	zero,-4(fp)
 1001520:	e0bfff17 	ldw	r2,-4(fp)
}
 1001524:	e037883a 	mov	sp,fp
 1001528:	df000017 	ldw	fp,0(sp)
 100152c:	dec00104 	addi	sp,sp,4
 1001530:	f800283a 	ret

01001534 <WaitForTouch>:
/*****************************************************************************
**   wait for screen to be touched
*****************************************************************************/
void WaitForTouch(){
 1001534:	defffe04 	addi	sp,sp,-8
 1001538:	dfc00115 	stw	ra,4(sp)
 100153c:	df000015 	stw	fp,0(sp)
 1001540:	d839883a 	mov	fp,sp
	while(!ScreenTouched())
 1001544:	10014cc0 	call	10014cc <ScreenTouched>
 1001548:	1005003a 	cmpeq	r2,r2,zero
 100154c:	103ffd1e 	bne	r2,zero,1001544 <WaitForTouch+0x10>
		;
}
 1001550:	e037883a 	mov	sp,fp
 1001554:	dfc00117 	ldw	ra,4(sp)
 1001558:	df000017 	ldw	fp,0(sp)
 100155c:	dec00204 	addi	sp,sp,8
 1001560:	f800283a 	ret

01001564 <GetPress>:
a touch screen press
event
and returns X,Y coord
*****************************************************************************/
Point GetPress(void)
{
 1001564:	defffc04 	addi	sp,sp,-16
 1001568:	dfc00315 	stw	ra,12(sp)
 100156c:	df000215 	stw	fp,8(sp)
 1001570:	df000204 	addi	fp,sp,8
Point p1;
// wait for a pen down command then return the X,Y coord of the point
// calibrated correctly so that it maps to a pixel on screen
WaitForTouch();
 1001574:	10015340 	call	1001534 <WaitForTouch>

while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
 1001578:	00a10034 	movhi	r2,33792
 100157c:	10808c04 	addi	r2,r2,560
 1001580:	10800003 	ldbu	r2,0(r2)
 1001584:	10803fcc 	andi	r2,r2,255
 1001588:	1080004c 	andi	r2,r2,1
 100158c:	1005003a 	cmpeq	r2,r2,zero
 1001590:	103ff91e 	bne	r2,zero,1001578 <GetPress+0x14>
	;

p1.x = TOUCH_RX;
 1001594:	00a10034 	movhi	r2,33792
 1001598:	10808c84 	addi	r2,r2,562
 100159c:	10800003 	ldbu	r2,0(r2)
 10015a0:	10803fcc 	andi	r2,r2,255
 10015a4:	e0bffe15 	stw	r2,-8(fp)

while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
 10015a8:	00a10034 	movhi	r2,33792
 10015ac:	10808c04 	addi	r2,r2,560
 10015b0:	10800003 	ldbu	r2,0(r2)
 10015b4:	10803fcc 	andi	r2,r2,255
 10015b8:	1080004c 	andi	r2,r2,1
 10015bc:	1005003a 	cmpeq	r2,r2,zero
 10015c0:	103ff91e 	bne	r2,zero,10015a8 <GetPress+0x44>
	;
p1.x += TOUCH_RX << 7;
 10015c4:	e0fffe17 	ldw	r3,-8(fp)
 10015c8:	00a10034 	movhi	r2,33792
 10015cc:	10808c84 	addi	r2,r2,562
 10015d0:	10800003 	ldbu	r2,0(r2)
 10015d4:	10803fcc 	andi	r2,r2,255
 10015d8:	100491fa 	slli	r2,r2,7
 10015dc:	1885883a 	add	r2,r3,r2
 10015e0:	e0bffe15 	stw	r2,-8(fp)

while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
 10015e4:	00a10034 	movhi	r2,33792
 10015e8:	10808c04 	addi	r2,r2,560
 10015ec:	10800003 	ldbu	r2,0(r2)
 10015f0:	10803fcc 	andi	r2,r2,255
 10015f4:	1080004c 	andi	r2,r2,1
 10015f8:	1005003a 	cmpeq	r2,r2,zero
 10015fc:	103ff91e 	bne	r2,zero,10015e4 <GetPress+0x80>
	;
p1.y = TOUCH_RX;
 1001600:	00a10034 	movhi	r2,33792
 1001604:	10808c84 	addi	r2,r2,562
 1001608:	10800003 	ldbu	r2,0(r2)
 100160c:	10803fcc 	andi	r2,r2,255
 1001610:	e0bfff15 	stw	r2,-4(fp)

while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
 1001614:	00a10034 	movhi	r2,33792
 1001618:	10808c04 	addi	r2,r2,560
 100161c:	10800003 	ldbu	r2,0(r2)
 1001620:	10803fcc 	andi	r2,r2,255
 1001624:	1080004c 	andi	r2,r2,1
 1001628:	1005003a 	cmpeq	r2,r2,zero
 100162c:	103ff91e 	bne	r2,zero,1001614 <GetPress+0xb0>
	;
p1.y += TOUCH_RX << 7;
 1001630:	e0ffff17 	ldw	r3,-4(fp)
 1001634:	00a10034 	movhi	r2,33792
 1001638:	10808c84 	addi	r2,r2,562
 100163c:	10800003 	ldbu	r2,0(r2)
 1001640:	10803fcc 	andi	r2,r2,255
 1001644:	100491fa 	slli	r2,r2,7
 1001648:	1885883a 	add	r2,r3,r2
 100164c:	e0bfff15 	stw	r2,-4(fp)

p1.x = (int) ((p1.x) / 4090.0 * 800.0);
 1001650:	e13ffe17 	ldw	r4,-8(fp)
 1001654:	1001fa40 	call	1001fa4 <__floatsidf>
 1001658:	100b883a 	mov	r5,r2
 100165c:	180d883a 	mov	r6,r3
 1001660:	2809883a 	mov	r4,r5
 1001664:	300b883a 	mov	r5,r6
 1001668:	000d883a 	mov	r6,zero
 100166c:	01d02c34 	movhi	r7,16560
 1001670:	39fd0004 	addi	r7,r7,-3072
 1001674:	1001d4c0 	call	1001d4c <__divdf3>
 1001678:	1009883a 	mov	r4,r2
 100167c:	180b883a 	mov	r5,r3
 1001680:	2005883a 	mov	r2,r4
 1001684:	2807883a 	mov	r3,r5
 1001688:	1009883a 	mov	r4,r2
 100168c:	180b883a 	mov	r5,r3
 1001690:	000d883a 	mov	r6,zero
 1001694:	01d02274 	movhi	r7,16521
 1001698:	10019880 	call	1001988 <__muldf3>
 100169c:	1009883a 	mov	r4,r2
 10016a0:	180b883a 	mov	r5,r3
 10016a4:	2005883a 	mov	r2,r4
 10016a8:	2807883a 	mov	r3,r5
 10016ac:	1009883a 	mov	r4,r2
 10016b0:	180b883a 	mov	r5,r3
 10016b4:	100209c0 	call	100209c <__fixdfsi>
 10016b8:	e0bffe15 	stw	r2,-8(fp)

p1.y = (int) ((p1.y - 30) / 4070.0 * 480.0);
 10016bc:	e0bfff17 	ldw	r2,-4(fp)
 10016c0:	113ff884 	addi	r4,r2,-30
 10016c4:	1001fa40 	call	1001fa4 <__floatsidf>
 10016c8:	100b883a 	mov	r5,r2
 10016cc:	180d883a 	mov	r6,r3
 10016d0:	2809883a 	mov	r4,r5
 10016d4:	300b883a 	mov	r5,r6
 10016d8:	000d883a 	mov	r6,zero
 10016dc:	01d02c34 	movhi	r7,16560
 10016e0:	39f30004 	addi	r7,r7,-13312
 10016e4:	1001d4c0 	call	1001d4c <__divdf3>
 10016e8:	1009883a 	mov	r4,r2
 10016ec:	180b883a 	mov	r5,r3
 10016f0:	2005883a 	mov	r2,r4
 10016f4:	2807883a 	mov	r3,r5
 10016f8:	1009883a 	mov	r4,r2
 10016fc:	180b883a 	mov	r5,r3
 1001700:	000d883a 	mov	r6,zero
 1001704:	01d01fb4 	movhi	r7,16510
 1001708:	10019880 	call	1001988 <__muldf3>
 100170c:	1009883a 	mov	r4,r2
 1001710:	180b883a 	mov	r5,r3
 1001714:	2005883a 	mov	r2,r4
 1001718:	2807883a 	mov	r3,r5
 100171c:	1009883a 	mov	r4,r2
 1001720:	180b883a 	mov	r5,r3
 1001724:	100209c0 	call	100209c <__fixdfsi>
 1001728:	e0bfff15 	stw	r2,-4(fp)
return p1;
 100172c:	e17ffe17 	ldw	r5,-8(fp)
 1001730:	e1bfff17 	ldw	r6,-4(fp)
 1001734:	2807883a 	mov	r3,r5
 1001738:	3009883a 	mov	r4,r6
}
 100173c:	1805883a 	mov	r2,r3
 1001740:	2007883a 	mov	r3,r4
 1001744:	e037883a 	mov	sp,fp
 1001748:	dfc00117 	ldw	ra,4(sp)
 100174c:	df000017 	ldw	fp,0(sp)
 1001750:	dec00204 	addi	sp,sp,8
 1001754:	f800283a 	ret

01001758 <GetRelease>:
waits for
a touch screen release
event
and returns X,Y coord
*****************************************************************************/
Point GetRelease(void){
 1001758:	defffc04 	addi	sp,sp,-16
 100175c:	dfc00315 	stw	ra,12(sp)
 1001760:	df000215 	stw	fp,8(sp)
 1001764:	df000204 	addi	fp,sp,8
 1001768:	00000006 	br	100176c <GetRelease+0x14>
	Point p1;
// wait for a pen up command then return the X,Y coord of the point
// calibrated correctly so that it maps to a pixel on screen
	while(1){
		if(TOUCH_STATUS_RX_MASK & TOUCH_STATUS){
 100176c:	00a10034 	movhi	r2,33792
 1001770:	10808c04 	addi	r2,r2,560
 1001774:	10800003 	ldbu	r2,0(r2)
 1001778:	10803fcc 	andi	r2,r2,255
 100177c:	1080004c 	andi	r2,r2,1
 1001780:	10803fcc 	andi	r2,r2,255
 1001784:	1005003a 	cmpeq	r2,r2,zero
 1001788:	103ff81e 	bne	r2,zero,100176c <GetRelease+0x14>
			if(TOUCH_RX == 0x80){
 100178c:	00a10034 	movhi	r2,33792
 1001790:	10808c84 	addi	r2,r2,562
 1001794:	10800003 	ldbu	r2,0(r2)
 1001798:	10803fcc 	andi	r2,r2,255
 100179c:	10802020 	cmpeqi	r2,r2,128
 10017a0:	1000011e 	bne	r2,zero,10017a8 <GetRelease+0x50>
				break;
			}
		}
	}
 10017a4:	003ff106 	br	100176c <GetRelease+0x14>

while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
 10017a8:	00a10034 	movhi	r2,33792
 10017ac:	10808c04 	addi	r2,r2,560
 10017b0:	10800003 	ldbu	r2,0(r2)
 10017b4:	10803fcc 	andi	r2,r2,255
 10017b8:	1080004c 	andi	r2,r2,1
 10017bc:	1005003a 	cmpeq	r2,r2,zero
 10017c0:	103ff91e 	bne	r2,zero,10017a8 <GetRelease+0x50>
	;

	p1.x = TOUCH_RX;
 10017c4:	00a10034 	movhi	r2,33792
 10017c8:	10808c84 	addi	r2,r2,562
 10017cc:	10800003 	ldbu	r2,0(r2)
 10017d0:	10803fcc 	andi	r2,r2,255
 10017d4:	e0bffe15 	stw	r2,-8(fp)

	while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
 10017d8:	00a10034 	movhi	r2,33792
 10017dc:	10808c04 	addi	r2,r2,560
 10017e0:	10800003 	ldbu	r2,0(r2)
 10017e4:	10803fcc 	andi	r2,r2,255
 10017e8:	1080004c 	andi	r2,r2,1
 10017ec:	1005003a 	cmpeq	r2,r2,zero
 10017f0:	103ff91e 	bne	r2,zero,10017d8 <GetRelease+0x80>
		;
	p1.x += TOUCH_RX << 7;
 10017f4:	e0fffe17 	ldw	r3,-8(fp)
 10017f8:	00a10034 	movhi	r2,33792
 10017fc:	10808c84 	addi	r2,r2,562
 1001800:	10800003 	ldbu	r2,0(r2)
 1001804:	10803fcc 	andi	r2,r2,255
 1001808:	100491fa 	slli	r2,r2,7
 100180c:	1885883a 	add	r2,r3,r2
 1001810:	e0bffe15 	stw	r2,-8(fp)

	while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
 1001814:	00a10034 	movhi	r2,33792
 1001818:	10808c04 	addi	r2,r2,560
 100181c:	10800003 	ldbu	r2,0(r2)
 1001820:	10803fcc 	andi	r2,r2,255
 1001824:	1080004c 	andi	r2,r2,1
 1001828:	1005003a 	cmpeq	r2,r2,zero
 100182c:	103ff91e 	bne	r2,zero,1001814 <GetRelease+0xbc>
		;
	p1.y = TOUCH_RX;
 1001830:	00a10034 	movhi	r2,33792
 1001834:	10808c84 	addi	r2,r2,562
 1001838:	10800003 	ldbu	r2,0(r2)
 100183c:	10803fcc 	andi	r2,r2,255
 1001840:	e0bfff15 	stw	r2,-4(fp)

	while(!(TOUCH_STATUS_RX_MASK & TOUCH_STATUS))
 1001844:	00a10034 	movhi	r2,33792
 1001848:	10808c04 	addi	r2,r2,560
 100184c:	10800003 	ldbu	r2,0(r2)
 1001850:	10803fcc 	andi	r2,r2,255
 1001854:	1080004c 	andi	r2,r2,1
 1001858:	1005003a 	cmpeq	r2,r2,zero
 100185c:	103ff91e 	bne	r2,zero,1001844 <GetRelease+0xec>
		;
	p1.y += TOUCH_RX << 7;
 1001860:	e0ffff17 	ldw	r3,-4(fp)
 1001864:	00a10034 	movhi	r2,33792
 1001868:	10808c84 	addi	r2,r2,562
 100186c:	10800003 	ldbu	r2,0(r2)
 1001870:	10803fcc 	andi	r2,r2,255
 1001874:	100491fa 	slli	r2,r2,7
 1001878:	1885883a 	add	r2,r3,r2
 100187c:	e0bfff15 	stw	r2,-4(fp)

	p1.x = (int) ((p1.x) / 4090.0 * 800.0);
 1001880:	e13ffe17 	ldw	r4,-8(fp)
 1001884:	1001fa40 	call	1001fa4 <__floatsidf>
 1001888:	100b883a 	mov	r5,r2
 100188c:	180d883a 	mov	r6,r3
 1001890:	2809883a 	mov	r4,r5
 1001894:	300b883a 	mov	r5,r6
 1001898:	000d883a 	mov	r6,zero
 100189c:	01d02c34 	movhi	r7,16560
 10018a0:	39fd0004 	addi	r7,r7,-3072
 10018a4:	1001d4c0 	call	1001d4c <__divdf3>
 10018a8:	1009883a 	mov	r4,r2
 10018ac:	180b883a 	mov	r5,r3
 10018b0:	2005883a 	mov	r2,r4
 10018b4:	2807883a 	mov	r3,r5
 10018b8:	1009883a 	mov	r4,r2
 10018bc:	180b883a 	mov	r5,r3
 10018c0:	000d883a 	mov	r6,zero
 10018c4:	01d02274 	movhi	r7,16521
 10018c8:	10019880 	call	1001988 <__muldf3>
 10018cc:	1009883a 	mov	r4,r2
 10018d0:	180b883a 	mov	r5,r3
 10018d4:	2005883a 	mov	r2,r4
 10018d8:	2807883a 	mov	r3,r5
 10018dc:	1009883a 	mov	r4,r2
 10018e0:	180b883a 	mov	r5,r3
 10018e4:	100209c0 	call	100209c <__fixdfsi>
 10018e8:	e0bffe15 	stw	r2,-8(fp)

	p1.y = (int) ((p1.y - 30) / 4070.0 * 480.0);
 10018ec:	e0bfff17 	ldw	r2,-4(fp)
 10018f0:	113ff884 	addi	r4,r2,-30
 10018f4:	1001fa40 	call	1001fa4 <__floatsidf>
 10018f8:	100b883a 	mov	r5,r2
 10018fc:	180d883a 	mov	r6,r3
 1001900:	2809883a 	mov	r4,r5
 1001904:	300b883a 	mov	r5,r6
 1001908:	000d883a 	mov	r6,zero
 100190c:	01d02c34 	movhi	r7,16560
 1001910:	39f30004 	addi	r7,r7,-13312
 1001914:	1001d4c0 	call	1001d4c <__divdf3>
 1001918:	1009883a 	mov	r4,r2
 100191c:	180b883a 	mov	r5,r3
 1001920:	2005883a 	mov	r2,r4
 1001924:	2807883a 	mov	r3,r5
 1001928:	1009883a 	mov	r4,r2
 100192c:	180b883a 	mov	r5,r3
 1001930:	000d883a 	mov	r6,zero
 1001934:	01d01fb4 	movhi	r7,16510
 1001938:	10019880 	call	1001988 <__muldf3>
 100193c:	1009883a 	mov	r4,r2
 1001940:	180b883a 	mov	r5,r3
 1001944:	2005883a 	mov	r2,r4
 1001948:	2807883a 	mov	r3,r5
 100194c:	1009883a 	mov	r4,r2
 1001950:	180b883a 	mov	r5,r3
 1001954:	100209c0 	call	100209c <__fixdfsi>
 1001958:	e0bfff15 	stw	r2,-4(fp)
	return p1;
 100195c:	e17ffe17 	ldw	r5,-8(fp)
 1001960:	e1bfff17 	ldw	r6,-4(fp)
 1001964:	2807883a 	mov	r3,r5
 1001968:	3009883a 	mov	r4,r6
}
 100196c:	1805883a 	mov	r2,r3
 1001970:	2007883a 	mov	r3,r4
 1001974:	e037883a 	mov	sp,fp
 1001978:	dfc00117 	ldw	ra,4(sp)
 100197c:	df000017 	ldw	fp,0(sp)
 1001980:	dec00204 	addi	sp,sp,8
 1001984:	f800283a 	ret

01001988 <__muldf3>:
 1001988:	deffe004 	addi	sp,sp,-128
 100198c:	dc401815 	stw	r17,96(sp)
 1001990:	dc400404 	addi	r17,sp,16
 1001994:	2011883a 	mov	r8,r4
 1001998:	2813883a 	mov	r9,r5
 100199c:	dc001715 	stw	r16,92(sp)
 10019a0:	d809883a 	mov	r4,sp
 10019a4:	880b883a 	mov	r5,r17
 10019a8:	dc000904 	addi	r16,sp,36
 10019ac:	dfc01f15 	stw	ra,124(sp)
 10019b0:	da400115 	stw	r9,4(sp)
 10019b4:	d9c00315 	stw	r7,12(sp)
 10019b8:	da000015 	stw	r8,0(sp)
 10019bc:	d9800215 	stw	r6,8(sp)
 10019c0:	ddc01e15 	stw	r23,120(sp)
 10019c4:	dd801d15 	stw	r22,116(sp)
 10019c8:	dd401c15 	stw	r21,112(sp)
 10019cc:	dd001b15 	stw	r20,108(sp)
 10019d0:	dcc01a15 	stw	r19,104(sp)
 10019d4:	dc801915 	stw	r18,100(sp)
 10019d8:	10025a00 	call	10025a0 <__unpack_d>
 10019dc:	d9000204 	addi	r4,sp,8
 10019e0:	800b883a 	mov	r5,r16
 10019e4:	10025a00 	call	10025a0 <__unpack_d>
 10019e8:	d9000417 	ldw	r4,16(sp)
 10019ec:	00800044 	movi	r2,1
 10019f0:	1100102e 	bgeu	r2,r4,1001a34 <__muldf3+0xac>
 10019f4:	d8c00917 	ldw	r3,36(sp)
 10019f8:	10c0062e 	bgeu	r2,r3,1001a14 <__muldf3+0x8c>
 10019fc:	00800104 	movi	r2,4
 1001a00:	20800a26 	beq	r4,r2,1001a2c <__muldf3+0xa4>
 1001a04:	1880cc26 	beq	r3,r2,1001d38 <__muldf3+0x3b0>
 1001a08:	00800084 	movi	r2,2
 1001a0c:	20800926 	beq	r4,r2,1001a34 <__muldf3+0xac>
 1001a10:	1880191e 	bne	r3,r2,1001a78 <__muldf3+0xf0>
 1001a14:	d8c00a17 	ldw	r3,40(sp)
 1001a18:	d8800517 	ldw	r2,20(sp)
 1001a1c:	8009883a 	mov	r4,r16
 1001a20:	10c4c03a 	cmpne	r2,r2,r3
 1001a24:	d8800a15 	stw	r2,40(sp)
 1001a28:	00000706 	br	1001a48 <__muldf3+0xc0>
 1001a2c:	00800084 	movi	r2,2
 1001a30:	1880c326 	beq	r3,r2,1001d40 <__muldf3+0x3b8>
 1001a34:	d8800517 	ldw	r2,20(sp)
 1001a38:	d8c00a17 	ldw	r3,40(sp)
 1001a3c:	8809883a 	mov	r4,r17
 1001a40:	10c4c03a 	cmpne	r2,r2,r3
 1001a44:	d8800515 	stw	r2,20(sp)
 1001a48:	100228c0 	call	100228c <__pack_d>
 1001a4c:	dfc01f17 	ldw	ra,124(sp)
 1001a50:	ddc01e17 	ldw	r23,120(sp)
 1001a54:	dd801d17 	ldw	r22,116(sp)
 1001a58:	dd401c17 	ldw	r21,112(sp)
 1001a5c:	dd001b17 	ldw	r20,108(sp)
 1001a60:	dcc01a17 	ldw	r19,104(sp)
 1001a64:	dc801917 	ldw	r18,100(sp)
 1001a68:	dc401817 	ldw	r17,96(sp)
 1001a6c:	dc001717 	ldw	r16,92(sp)
 1001a70:	dec02004 	addi	sp,sp,128
 1001a74:	f800283a 	ret
 1001a78:	dd800717 	ldw	r22,28(sp)
 1001a7c:	dc800c17 	ldw	r18,48(sp)
 1001a80:	002b883a 	mov	r21,zero
 1001a84:	0023883a 	mov	r17,zero
 1001a88:	a80b883a 	mov	r5,r21
 1001a8c:	b00d883a 	mov	r6,r22
 1001a90:	880f883a 	mov	r7,r17
 1001a94:	ddc00817 	ldw	r23,32(sp)
 1001a98:	dcc00d17 	ldw	r19,52(sp)
 1001a9c:	9009883a 	mov	r4,r18
 1001aa0:	10021740 	call	1002174 <__muldi3>
 1001aa4:	001b883a 	mov	r13,zero
 1001aa8:	680f883a 	mov	r7,r13
 1001aac:	b009883a 	mov	r4,r22
 1001ab0:	000b883a 	mov	r5,zero
 1001ab4:	980d883a 	mov	r6,r19
 1001ab8:	b82d883a 	mov	r22,r23
 1001abc:	002f883a 	mov	r23,zero
 1001ac0:	db401615 	stw	r13,88(sp)
 1001ac4:	d8801315 	stw	r2,76(sp)
 1001ac8:	d8c01415 	stw	r3,80(sp)
 1001acc:	dcc01515 	stw	r19,84(sp)
 1001ad0:	10021740 	call	1002174 <__muldi3>
 1001ad4:	b00d883a 	mov	r6,r22
 1001ad8:	000b883a 	mov	r5,zero
 1001adc:	9009883a 	mov	r4,r18
 1001ae0:	b80f883a 	mov	r7,r23
 1001ae4:	1021883a 	mov	r16,r2
 1001ae8:	1823883a 	mov	r17,r3
 1001aec:	10021740 	call	1002174 <__muldi3>
 1001af0:	8085883a 	add	r2,r16,r2
 1001af4:	140d803a 	cmpltu	r6,r2,r16
 1001af8:	88c7883a 	add	r3,r17,r3
 1001afc:	30cd883a 	add	r6,r6,r3
 1001b00:	1029883a 	mov	r20,r2
 1001b04:	302b883a 	mov	r21,r6
 1001b08:	da801317 	ldw	r10,76(sp)
 1001b0c:	dac01417 	ldw	r11,80(sp)
 1001b10:	db001517 	ldw	r12,84(sp)
 1001b14:	db401617 	ldw	r13,88(sp)
 1001b18:	3440612e 	bgeu	r6,r17,1001ca0 <__muldf3+0x318>
 1001b1c:	0009883a 	mov	r4,zero
 1001b20:	5105883a 	add	r2,r10,r4
 1001b24:	128d803a 	cmpltu	r6,r2,r10
 1001b28:	5d07883a 	add	r3,r11,r20
 1001b2c:	30cd883a 	add	r6,r6,r3
 1001b30:	0021883a 	mov	r16,zero
 1001b34:	04400044 	movi	r17,1
 1001b38:	1025883a 	mov	r18,r2
 1001b3c:	3027883a 	mov	r19,r6
 1001b40:	32c06236 	bltu	r6,r11,1001ccc <__muldf3+0x344>
 1001b44:	59807a26 	beq	r11,r6,1001d30 <__muldf3+0x3a8>
 1001b48:	680b883a 	mov	r5,r13
 1001b4c:	b80f883a 	mov	r7,r23
 1001b50:	6009883a 	mov	r4,r12
 1001b54:	b00d883a 	mov	r6,r22
 1001b58:	10021740 	call	1002174 <__muldi3>
 1001b5c:	1009883a 	mov	r4,r2
 1001b60:	000f883a 	mov	r7,zero
 1001b64:	1545883a 	add	r2,r2,r21
 1001b68:	1111803a 	cmpltu	r8,r2,r4
 1001b6c:	19c7883a 	add	r3,r3,r7
 1001b70:	40c7883a 	add	r3,r8,r3
 1001b74:	88cb883a 	add	r5,r17,r3
 1001b78:	d8c00617 	ldw	r3,24(sp)
 1001b7c:	8089883a 	add	r4,r16,r2
 1001b80:	d8800b17 	ldw	r2,44(sp)
 1001b84:	18c00104 	addi	r3,r3,4
 1001b88:	240d803a 	cmpltu	r6,r4,r16
 1001b8c:	10c7883a 	add	r3,r2,r3
 1001b90:	2013883a 	mov	r9,r4
 1001b94:	d8800a17 	ldw	r2,40(sp)
 1001b98:	d9000517 	ldw	r4,20(sp)
 1001b9c:	314d883a 	add	r6,r6,r5
 1001ba0:	3015883a 	mov	r10,r6
 1001ba4:	2088c03a 	cmpne	r4,r4,r2
 1001ba8:	00880034 	movhi	r2,8192
 1001bac:	10bfffc4 	addi	r2,r2,-1
 1001bb0:	d9000f15 	stw	r4,60(sp)
 1001bb4:	d8c01015 	stw	r3,64(sp)
 1001bb8:	1180162e 	bgeu	r2,r6,1001c14 <__muldf3+0x28c>
 1001bbc:	1811883a 	mov	r8,r3
 1001bc0:	101f883a 	mov	r15,r2
 1001bc4:	980497fa 	slli	r2,r19,31
 1001bc8:	9016d07a 	srli	r11,r18,1
 1001bcc:	500697fa 	slli	r3,r10,31
 1001bd0:	480cd07a 	srli	r6,r9,1
 1001bd4:	500ed07a 	srli	r7,r10,1
 1001bd8:	12d6b03a 	or	r11,r2,r11
 1001bdc:	00800044 	movi	r2,1
 1001be0:	198cb03a 	or	r6,r3,r6
 1001be4:	4888703a 	and	r4,r9,r2
 1001be8:	9818d07a 	srli	r12,r19,1
 1001bec:	001b883a 	mov	r13,zero
 1001bf0:	03a00034 	movhi	r14,32768
 1001bf4:	3013883a 	mov	r9,r6
 1001bf8:	3815883a 	mov	r10,r7
 1001bfc:	4091883a 	add	r8,r8,r2
 1001c00:	20000226 	beq	r4,zero,1001c0c <__muldf3+0x284>
 1001c04:	5b64b03a 	or	r18,r11,r13
 1001c08:	63a6b03a 	or	r19,r12,r14
 1001c0c:	7abfed36 	bltu	r15,r10,1001bc4 <__muldf3+0x23c>
 1001c10:	da001015 	stw	r8,64(sp)
 1001c14:	00840034 	movhi	r2,4096
 1001c18:	10bfffc4 	addi	r2,r2,-1
 1001c1c:	12801436 	bltu	r2,r10,1001c70 <__muldf3+0x2e8>
 1001c20:	da001017 	ldw	r8,64(sp)
 1001c24:	101f883a 	mov	r15,r2
 1001c28:	4a45883a 	add	r2,r9,r9
 1001c2c:	124d803a 	cmpltu	r6,r2,r9
 1001c30:	5287883a 	add	r3,r10,r10
 1001c34:	9497883a 	add	r11,r18,r18
 1001c38:	5c8f803a 	cmpltu	r7,r11,r18
 1001c3c:	9cd9883a 	add	r12,r19,r19
 1001c40:	01000044 	movi	r4,1
 1001c44:	30cd883a 	add	r6,r6,r3
 1001c48:	3b0f883a 	add	r7,r7,r12
 1001c4c:	423fffc4 	addi	r8,r8,-1
 1001c50:	1013883a 	mov	r9,r2
 1001c54:	3015883a 	mov	r10,r6
 1001c58:	111ab03a 	or	r13,r2,r4
 1001c5c:	98003016 	blt	r19,zero,1001d20 <__muldf3+0x398>
 1001c60:	5825883a 	mov	r18,r11
 1001c64:	3827883a 	mov	r19,r7
 1001c68:	7abfef2e 	bgeu	r15,r10,1001c28 <__muldf3+0x2a0>
 1001c6c:	da001015 	stw	r8,64(sp)
 1001c70:	00803fc4 	movi	r2,255
 1001c74:	488e703a 	and	r7,r9,r2
 1001c78:	00802004 	movi	r2,128
 1001c7c:	0007883a 	mov	r3,zero
 1001c80:	0011883a 	mov	r8,zero
 1001c84:	38801826 	beq	r7,r2,1001ce8 <__muldf3+0x360>
 1001c88:	008000c4 	movi	r2,3
 1001c8c:	d9000e04 	addi	r4,sp,56
 1001c90:	da801215 	stw	r10,72(sp)
 1001c94:	d8800e15 	stw	r2,56(sp)
 1001c98:	da401115 	stw	r9,68(sp)
 1001c9c:	003f6a06 	br	1001a48 <__muldf3+0xc0>
 1001ca0:	89802126 	beq	r17,r6,1001d28 <__muldf3+0x3a0>
 1001ca4:	0009883a 	mov	r4,zero
 1001ca8:	5105883a 	add	r2,r10,r4
 1001cac:	128d803a 	cmpltu	r6,r2,r10
 1001cb0:	5d07883a 	add	r3,r11,r20
 1001cb4:	30cd883a 	add	r6,r6,r3
 1001cb8:	0021883a 	mov	r16,zero
 1001cbc:	0023883a 	mov	r17,zero
 1001cc0:	1025883a 	mov	r18,r2
 1001cc4:	3027883a 	mov	r19,r6
 1001cc8:	32ff9e2e 	bgeu	r6,r11,1001b44 <__muldf3+0x1bc>
 1001ccc:	00800044 	movi	r2,1
 1001cd0:	8089883a 	add	r4,r16,r2
 1001cd4:	240d803a 	cmpltu	r6,r4,r16
 1001cd8:	344d883a 	add	r6,r6,r17
 1001cdc:	2021883a 	mov	r16,r4
 1001ce0:	3023883a 	mov	r17,r6
 1001ce4:	003f9806 	br	1001b48 <__muldf3+0x1c0>
 1001ce8:	403fe71e 	bne	r8,zero,1001c88 <__muldf3+0x300>
 1001cec:	01004004 	movi	r4,256
 1001cf0:	4904703a 	and	r2,r9,r4
 1001cf4:	10c4b03a 	or	r2,r2,r3
 1001cf8:	103fe31e 	bne	r2,zero,1001c88 <__muldf3+0x300>
 1001cfc:	94c4b03a 	or	r2,r18,r19
 1001d00:	103fe126 	beq	r2,zero,1001c88 <__muldf3+0x300>
 1001d04:	49c5883a 	add	r2,r9,r7
 1001d08:	1251803a 	cmpltu	r8,r2,r9
 1001d0c:	4291883a 	add	r8,r8,r10
 1001d10:	013fc004 	movi	r4,-256
 1001d14:	1112703a 	and	r9,r2,r4
 1001d18:	4015883a 	mov	r10,r8
 1001d1c:	003fda06 	br	1001c88 <__muldf3+0x300>
 1001d20:	6813883a 	mov	r9,r13
 1001d24:	003fce06 	br	1001c60 <__muldf3+0x2d8>
 1001d28:	143f7c36 	bltu	r2,r16,1001b1c <__muldf3+0x194>
 1001d2c:	003fdd06 	br	1001ca4 <__muldf3+0x31c>
 1001d30:	12bf852e 	bgeu	r2,r10,1001b48 <__muldf3+0x1c0>
 1001d34:	003fe506 	br	1001ccc <__muldf3+0x344>
 1001d38:	00800084 	movi	r2,2
 1001d3c:	20bf351e 	bne	r4,r2,1001a14 <__muldf3+0x8c>
 1001d40:	01004074 	movhi	r4,257
 1001d44:	21209604 	addi	r4,r4,-32168
 1001d48:	003f3f06 	br	1001a48 <__muldf3+0xc0>

01001d4c <__divdf3>:
 1001d4c:	deffed04 	addi	sp,sp,-76
 1001d50:	dcc01115 	stw	r19,68(sp)
 1001d54:	dcc00404 	addi	r19,sp,16
 1001d58:	2011883a 	mov	r8,r4
 1001d5c:	2813883a 	mov	r9,r5
 1001d60:	dc000e15 	stw	r16,56(sp)
 1001d64:	d809883a 	mov	r4,sp
 1001d68:	980b883a 	mov	r5,r19
 1001d6c:	dc000904 	addi	r16,sp,36
 1001d70:	dfc01215 	stw	ra,72(sp)
 1001d74:	da400115 	stw	r9,4(sp)
 1001d78:	d9c00315 	stw	r7,12(sp)
 1001d7c:	da000015 	stw	r8,0(sp)
 1001d80:	d9800215 	stw	r6,8(sp)
 1001d84:	dc801015 	stw	r18,64(sp)
 1001d88:	dc400f15 	stw	r17,60(sp)
 1001d8c:	10025a00 	call	10025a0 <__unpack_d>
 1001d90:	d9000204 	addi	r4,sp,8
 1001d94:	800b883a 	mov	r5,r16
 1001d98:	10025a00 	call	10025a0 <__unpack_d>
 1001d9c:	d9000417 	ldw	r4,16(sp)
 1001da0:	00800044 	movi	r2,1
 1001da4:	11000b2e 	bgeu	r2,r4,1001dd4 <__divdf3+0x88>
 1001da8:	d9400917 	ldw	r5,36(sp)
 1001dac:	1140762e 	bgeu	r2,r5,1001f88 <__divdf3+0x23c>
 1001db0:	d8800517 	ldw	r2,20(sp)
 1001db4:	d8c00a17 	ldw	r3,40(sp)
 1001db8:	01800104 	movi	r6,4
 1001dbc:	10c4f03a 	xor	r2,r2,r3
 1001dc0:	d8800515 	stw	r2,20(sp)
 1001dc4:	21800226 	beq	r4,r6,1001dd0 <__divdf3+0x84>
 1001dc8:	00800084 	movi	r2,2
 1001dcc:	2080141e 	bne	r4,r2,1001e20 <__divdf3+0xd4>
 1001dd0:	29000926 	beq	r5,r4,1001df8 <__divdf3+0xac>
 1001dd4:	9809883a 	mov	r4,r19
 1001dd8:	100228c0 	call	100228c <__pack_d>
 1001ddc:	dfc01217 	ldw	ra,72(sp)
 1001de0:	dcc01117 	ldw	r19,68(sp)
 1001de4:	dc801017 	ldw	r18,64(sp)
 1001de8:	dc400f17 	ldw	r17,60(sp)
 1001dec:	dc000e17 	ldw	r16,56(sp)
 1001df0:	dec01304 	addi	sp,sp,76
 1001df4:	f800283a 	ret
 1001df8:	01004074 	movhi	r4,257
 1001dfc:	21209604 	addi	r4,r4,-32168
 1001e00:	100228c0 	call	100228c <__pack_d>
 1001e04:	dfc01217 	ldw	ra,72(sp)
 1001e08:	dcc01117 	ldw	r19,68(sp)
 1001e0c:	dc801017 	ldw	r18,64(sp)
 1001e10:	dc400f17 	ldw	r17,60(sp)
 1001e14:	dc000e17 	ldw	r16,56(sp)
 1001e18:	dec01304 	addi	sp,sp,76
 1001e1c:	f800283a 	ret
 1001e20:	29805b26 	beq	r5,r6,1001f90 <__divdf3+0x244>
 1001e24:	28802d26 	beq	r5,r2,1001edc <__divdf3+0x190>
 1001e28:	d8c00617 	ldw	r3,24(sp)
 1001e2c:	d8800b17 	ldw	r2,44(sp)
 1001e30:	d9c00817 	ldw	r7,32(sp)
 1001e34:	dc400d17 	ldw	r17,52(sp)
 1001e38:	188bc83a 	sub	r5,r3,r2
 1001e3c:	d9800717 	ldw	r6,28(sp)
 1001e40:	dc000c17 	ldw	r16,48(sp)
 1001e44:	d9400615 	stw	r5,24(sp)
 1001e48:	3c403836 	bltu	r7,r17,1001f2c <__divdf3+0x1e0>
 1001e4c:	89c03626 	beq	r17,r7,1001f28 <__divdf3+0x1dc>
 1001e50:	0015883a 	mov	r10,zero
 1001e54:	001d883a 	mov	r14,zero
 1001e58:	02c40034 	movhi	r11,4096
 1001e5c:	001f883a 	mov	r15,zero
 1001e60:	003f883a 	mov	ra,zero
 1001e64:	04800f44 	movi	r18,61
 1001e68:	00000f06 	br	1001ea8 <__divdf3+0x15c>
 1001e6c:	601d883a 	mov	r14,r12
 1001e70:	681f883a 	mov	r15,r13
 1001e74:	400d883a 	mov	r6,r8
 1001e78:	100f883a 	mov	r7,r2
 1001e7c:	3191883a 	add	r8,r6,r6
 1001e80:	5808d07a 	srli	r4,r11,1
 1001e84:	4185803a 	cmpltu	r2,r8,r6
 1001e88:	39d3883a 	add	r9,r7,r7
 1001e8c:	28c6b03a 	or	r3,r5,r3
 1001e90:	1245883a 	add	r2,r2,r9
 1001e94:	1815883a 	mov	r10,r3
 1001e98:	2017883a 	mov	r11,r4
 1001e9c:	400d883a 	mov	r6,r8
 1001ea0:	100f883a 	mov	r7,r2
 1001ea4:	fc801726 	beq	ra,r18,1001f04 <__divdf3+0x1b8>
 1001ea8:	580a97fa 	slli	r5,r11,31
 1001eac:	5006d07a 	srli	r3,r10,1
 1001eb0:	ffc00044 	addi	ra,ra,1
 1001eb4:	3c7ff136 	bltu	r7,r17,1001e7c <__divdf3+0x130>
 1001eb8:	3411c83a 	sub	r8,r6,r16
 1001ebc:	3205803a 	cmpltu	r2,r6,r8
 1001ec0:	3c53c83a 	sub	r9,r7,r17
 1001ec4:	7298b03a 	or	r12,r14,r10
 1001ec8:	7adab03a 	or	r13,r15,r11
 1001ecc:	4885c83a 	sub	r2,r9,r2
 1001ed0:	89ffe61e 	bne	r17,r7,1001e6c <__divdf3+0x120>
 1001ed4:	343fe936 	bltu	r6,r16,1001e7c <__divdf3+0x130>
 1001ed8:	003fe406 	br	1001e6c <__divdf3+0x120>
 1001edc:	9809883a 	mov	r4,r19
 1001ee0:	d9800415 	stw	r6,16(sp)
 1001ee4:	100228c0 	call	100228c <__pack_d>
 1001ee8:	dfc01217 	ldw	ra,72(sp)
 1001eec:	dcc01117 	ldw	r19,68(sp)
 1001ef0:	dc801017 	ldw	r18,64(sp)
 1001ef4:	dc400f17 	ldw	r17,60(sp)
 1001ef8:	dc000e17 	ldw	r16,56(sp)
 1001efc:	dec01304 	addi	sp,sp,76
 1001f00:	f800283a 	ret
 1001f04:	00803fc4 	movi	r2,255
 1001f08:	7090703a 	and	r8,r14,r2
 1001f0c:	00802004 	movi	r2,128
 1001f10:	0007883a 	mov	r3,zero
 1001f14:	0013883a 	mov	r9,zero
 1001f18:	40800d26 	beq	r8,r2,1001f50 <__divdf3+0x204>
 1001f1c:	dbc00815 	stw	r15,32(sp)
 1001f20:	db800715 	stw	r14,28(sp)
 1001f24:	003fab06 	br	1001dd4 <__divdf3+0x88>
 1001f28:	343fc92e 	bgeu	r6,r16,1001e50 <__divdf3+0x104>
 1001f2c:	3185883a 	add	r2,r6,r6
 1001f30:	1189803a 	cmpltu	r4,r2,r6
 1001f34:	39c7883a 	add	r3,r7,r7
 1001f38:	20c9883a 	add	r4,r4,r3
 1001f3c:	297fffc4 	addi	r5,r5,-1
 1001f40:	100d883a 	mov	r6,r2
 1001f44:	200f883a 	mov	r7,r4
 1001f48:	d9400615 	stw	r5,24(sp)
 1001f4c:	003fc006 	br	1001e50 <__divdf3+0x104>
 1001f50:	483ff21e 	bne	r9,zero,1001f1c <__divdf3+0x1d0>
 1001f54:	01004004 	movi	r4,256
 1001f58:	7104703a 	and	r2,r14,r4
 1001f5c:	10c4b03a 	or	r2,r2,r3
 1001f60:	103fee1e 	bne	r2,zero,1001f1c <__divdf3+0x1d0>
 1001f64:	31c4b03a 	or	r2,r6,r7
 1001f68:	103fec26 	beq	r2,zero,1001f1c <__divdf3+0x1d0>
 1001f6c:	7205883a 	add	r2,r14,r8
 1001f70:	1391803a 	cmpltu	r8,r2,r14
 1001f74:	43d1883a 	add	r8,r8,r15
 1001f78:	013fc004 	movi	r4,-256
 1001f7c:	111c703a 	and	r14,r2,r4
 1001f80:	401f883a 	mov	r15,r8
 1001f84:	003fe506 	br	1001f1c <__divdf3+0x1d0>
 1001f88:	8009883a 	mov	r4,r16
 1001f8c:	003f9206 	br	1001dd8 <__divdf3+0x8c>
 1001f90:	9809883a 	mov	r4,r19
 1001f94:	d8000715 	stw	zero,28(sp)
 1001f98:	d8000815 	stw	zero,32(sp)
 1001f9c:	d8000615 	stw	zero,24(sp)
 1001fa0:	003f8d06 	br	1001dd8 <__divdf3+0x8c>

01001fa4 <__floatsidf>:
 1001fa4:	2006d7fa 	srli	r3,r4,31
 1001fa8:	defff604 	addi	sp,sp,-40
 1001fac:	008000c4 	movi	r2,3
 1001fb0:	dfc00915 	stw	ra,36(sp)
 1001fb4:	dcc00815 	stw	r19,32(sp)
 1001fb8:	dc800715 	stw	r18,28(sp)
 1001fbc:	dc400615 	stw	r17,24(sp)
 1001fc0:	dc000515 	stw	r16,20(sp)
 1001fc4:	d8800015 	stw	r2,0(sp)
 1001fc8:	d8c00115 	stw	r3,4(sp)
 1001fcc:	20000f1e 	bne	r4,zero,100200c <__floatsidf+0x68>
 1001fd0:	00800084 	movi	r2,2
 1001fd4:	d8800015 	stw	r2,0(sp)
 1001fd8:	d809883a 	mov	r4,sp
 1001fdc:	100228c0 	call	100228c <__pack_d>
 1001fe0:	1009883a 	mov	r4,r2
 1001fe4:	180b883a 	mov	r5,r3
 1001fe8:	2005883a 	mov	r2,r4
 1001fec:	2807883a 	mov	r3,r5
 1001ff0:	dfc00917 	ldw	ra,36(sp)
 1001ff4:	dcc00817 	ldw	r19,32(sp)
 1001ff8:	dc800717 	ldw	r18,28(sp)
 1001ffc:	dc400617 	ldw	r17,24(sp)
 1002000:	dc000517 	ldw	r16,20(sp)
 1002004:	dec00a04 	addi	sp,sp,40
 1002008:	f800283a 	ret
 100200c:	00800f04 	movi	r2,60
 1002010:	1807003a 	cmpeq	r3,r3,zero
 1002014:	d8800215 	stw	r2,8(sp)
 1002018:	18001126 	beq	r3,zero,1002060 <__floatsidf+0xbc>
 100201c:	0027883a 	mov	r19,zero
 1002020:	2025883a 	mov	r18,r4
 1002024:	d9000315 	stw	r4,12(sp)
 1002028:	dcc00415 	stw	r19,16(sp)
 100202c:	100220c0 	call	100220c <__clzsi2>
 1002030:	11000744 	addi	r4,r2,29
 1002034:	013fe80e 	bge	zero,r4,1001fd8 <__floatsidf+0x34>
 1002038:	10bfff44 	addi	r2,r2,-3
 100203c:	10000c16 	blt	r2,zero,1002070 <__floatsidf+0xcc>
 1002040:	90a2983a 	sll	r17,r18,r2
 1002044:	0021883a 	mov	r16,zero
 1002048:	d8800217 	ldw	r2,8(sp)
 100204c:	dc400415 	stw	r17,16(sp)
 1002050:	dc000315 	stw	r16,12(sp)
 1002054:	1105c83a 	sub	r2,r2,r4
 1002058:	d8800215 	stw	r2,8(sp)
 100205c:	003fde06 	br	1001fd8 <__floatsidf+0x34>
 1002060:	00a00034 	movhi	r2,32768
 1002064:	20800a26 	beq	r4,r2,1002090 <__floatsidf+0xec>
 1002068:	0109c83a 	sub	r4,zero,r4
 100206c:	003feb06 	br	100201c <__floatsidf+0x78>
 1002070:	9006d07a 	srli	r3,r18,1
 1002074:	008007c4 	movi	r2,31
 1002078:	1105c83a 	sub	r2,r2,r4
 100207c:	1886d83a 	srl	r3,r3,r2
 1002080:	9922983a 	sll	r17,r19,r4
 1002084:	9120983a 	sll	r16,r18,r4
 1002088:	1c62b03a 	or	r17,r3,r17
 100208c:	003fee06 	br	1002048 <__floatsidf+0xa4>
 1002090:	0009883a 	mov	r4,zero
 1002094:	01707834 	movhi	r5,49632
 1002098:	003fd306 	br	1001fe8 <__floatsidf+0x44>

0100209c <__fixdfsi>:
 100209c:	defff804 	addi	sp,sp,-32
 10020a0:	2005883a 	mov	r2,r4
 10020a4:	2807883a 	mov	r3,r5
 10020a8:	d809883a 	mov	r4,sp
 10020ac:	d9400204 	addi	r5,sp,8
 10020b0:	d8c00115 	stw	r3,4(sp)
 10020b4:	d8800015 	stw	r2,0(sp)
 10020b8:	dfc00715 	stw	ra,28(sp)
 10020bc:	10025a00 	call	10025a0 <__unpack_d>
 10020c0:	d8c00217 	ldw	r3,8(sp)
 10020c4:	00800084 	movi	r2,2
 10020c8:	1880051e 	bne	r3,r2,10020e0 <__fixdfsi+0x44>
 10020cc:	0007883a 	mov	r3,zero
 10020d0:	1805883a 	mov	r2,r3
 10020d4:	dfc00717 	ldw	ra,28(sp)
 10020d8:	dec00804 	addi	sp,sp,32
 10020dc:	f800283a 	ret
 10020e0:	00800044 	movi	r2,1
 10020e4:	10fff92e 	bgeu	r2,r3,10020cc <__fixdfsi+0x30>
 10020e8:	00800104 	movi	r2,4
 10020ec:	18800426 	beq	r3,r2,1002100 <__fixdfsi+0x64>
 10020f0:	d8c00417 	ldw	r3,16(sp)
 10020f4:	183ff516 	blt	r3,zero,10020cc <__fixdfsi+0x30>
 10020f8:	00800784 	movi	r2,30
 10020fc:	10c0080e 	bge	r2,r3,1002120 <__fixdfsi+0x84>
 1002100:	d8800317 	ldw	r2,12(sp)
 1002104:	1000121e 	bne	r2,zero,1002150 <__fixdfsi+0xb4>
 1002108:	00e00034 	movhi	r3,32768
 100210c:	18ffffc4 	addi	r3,r3,-1
 1002110:	1805883a 	mov	r2,r3
 1002114:	dfc00717 	ldw	ra,28(sp)
 1002118:	dec00804 	addi	sp,sp,32
 100211c:	f800283a 	ret
 1002120:	00800f04 	movi	r2,60
 1002124:	10d1c83a 	sub	r8,r2,r3
 1002128:	40bff804 	addi	r2,r8,-32
 100212c:	d9800517 	ldw	r6,20(sp)
 1002130:	d9c00617 	ldw	r7,24(sp)
 1002134:	10000816 	blt	r2,zero,1002158 <__fixdfsi+0xbc>
 1002138:	3888d83a 	srl	r4,r7,r2
 100213c:	d8800317 	ldw	r2,12(sp)
 1002140:	2007883a 	mov	r3,r4
 1002144:	103fe226 	beq	r2,zero,10020d0 <__fixdfsi+0x34>
 1002148:	0107c83a 	sub	r3,zero,r4
 100214c:	003fe006 	br	10020d0 <__fixdfsi+0x34>
 1002150:	00e00034 	movhi	r3,32768
 1002154:	003fde06 	br	10020d0 <__fixdfsi+0x34>
 1002158:	39c7883a 	add	r3,r7,r7
 100215c:	008007c4 	movi	r2,31
 1002160:	1205c83a 	sub	r2,r2,r8
 1002164:	1886983a 	sll	r3,r3,r2
 1002168:	3208d83a 	srl	r4,r6,r8
 100216c:	1908b03a 	or	r4,r3,r4
 1002170:	003ff206 	br	100213c <__fixdfsi+0xa0>

01002174 <__muldi3>:
 1002174:	2011883a 	mov	r8,r4
 1002178:	427fffcc 	andi	r9,r8,65535
 100217c:	4018d43a 	srli	r12,r8,16
 1002180:	32bfffcc 	andi	r10,r6,65535
 1002184:	3016d43a 	srli	r11,r6,16
 1002188:	4a85383a 	mul	r2,r9,r10
 100218c:	6295383a 	mul	r10,r12,r10
 1002190:	4ad3383a 	mul	r9,r9,r11
 1002194:	113fffcc 	andi	r4,r2,65535
 1002198:	1004d43a 	srli	r2,r2,16
 100219c:	4a93883a 	add	r9,r9,r10
 10021a0:	3807883a 	mov	r3,r7
 10021a4:	1245883a 	add	r2,r2,r9
 10021a8:	280f883a 	mov	r7,r5
 10021ac:	180b883a 	mov	r5,r3
 10021b0:	1006943a 	slli	r3,r2,16
 10021b4:	defffd04 	addi	sp,sp,-12
 10021b8:	dc800215 	stw	r18,8(sp)
 10021bc:	1907883a 	add	r3,r3,r4
 10021c0:	dc400115 	stw	r17,4(sp)
 10021c4:	dc000015 	stw	r16,0(sp)
 10021c8:	4165383a 	mul	r18,r8,r5
 10021cc:	31e3383a 	mul	r17,r6,r7
 10021d0:	1012d43a 	srli	r9,r2,16
 10021d4:	62d9383a 	mul	r12,r12,r11
 10021d8:	181f883a 	mov	r15,r3
 10021dc:	1280022e 	bgeu	r2,r10,10021e8 <__muldi3+0x74>
 10021e0:	00800074 	movhi	r2,1
 10021e4:	6099883a 	add	r12,r12,r2
 10021e8:	624d883a 	add	r6,r12,r9
 10021ec:	9187883a 	add	r3,r18,r6
 10021f0:	88c7883a 	add	r3,r17,r3
 10021f4:	7805883a 	mov	r2,r15
 10021f8:	dc800217 	ldw	r18,8(sp)
 10021fc:	dc400117 	ldw	r17,4(sp)
 1002200:	dc000017 	ldw	r16,0(sp)
 1002204:	dec00304 	addi	sp,sp,12
 1002208:	f800283a 	ret

0100220c <__clzsi2>:
 100220c:	00bfffd4 	movui	r2,65535
 1002210:	11000e36 	bltu	r2,r4,100224c <__clzsi2+0x40>
 1002214:	00803fc4 	movi	r2,255
 1002218:	01400204 	movi	r5,8
 100221c:	0007883a 	mov	r3,zero
 1002220:	11001036 	bltu	r2,r4,1002264 <__clzsi2+0x58>
 1002224:	000b883a 	mov	r5,zero
 1002228:	20c6d83a 	srl	r3,r4,r3
 100222c:	00804074 	movhi	r2,257
 1002230:	10a09b04 	addi	r2,r2,-32148
 1002234:	1887883a 	add	r3,r3,r2
 1002238:	18800003 	ldbu	r2,0(r3)
 100223c:	00c00804 	movi	r3,32
 1002240:	2885883a 	add	r2,r5,r2
 1002244:	1885c83a 	sub	r2,r3,r2
 1002248:	f800283a 	ret
 100224c:	01400404 	movi	r5,16
 1002250:	00804034 	movhi	r2,256
 1002254:	10bfffc4 	addi	r2,r2,-1
 1002258:	2807883a 	mov	r3,r5
 100225c:	113ff22e 	bgeu	r2,r4,1002228 <__clzsi2+0x1c>
 1002260:	01400604 	movi	r5,24
 1002264:	2807883a 	mov	r3,r5
 1002268:	20c6d83a 	srl	r3,r4,r3
 100226c:	00804074 	movhi	r2,257
 1002270:	10a09b04 	addi	r2,r2,-32148
 1002274:	1887883a 	add	r3,r3,r2
 1002278:	18800003 	ldbu	r2,0(r3)
 100227c:	00c00804 	movi	r3,32
 1002280:	2885883a 	add	r2,r5,r2
 1002284:	1885c83a 	sub	r2,r3,r2
 1002288:	f800283a 	ret

0100228c <__pack_d>:
 100228c:	20c00017 	ldw	r3,0(r4)
 1002290:	defffd04 	addi	sp,sp,-12
 1002294:	dc000015 	stw	r16,0(sp)
 1002298:	dc800215 	stw	r18,8(sp)
 100229c:	dc400115 	stw	r17,4(sp)
 10022a0:	00800044 	movi	r2,1
 10022a4:	22000317 	ldw	r8,12(r4)
 10022a8:	001f883a 	mov	r15,zero
 10022ac:	22400417 	ldw	r9,16(r4)
 10022b0:	24000117 	ldw	r16,4(r4)
 10022b4:	10c0552e 	bgeu	r2,r3,100240c <__pack_d+0x180>
 10022b8:	00800104 	movi	r2,4
 10022bc:	18804f26 	beq	r3,r2,10023fc <__pack_d+0x170>
 10022c0:	00800084 	movi	r2,2
 10022c4:	18800226 	beq	r3,r2,10022d0 <__pack_d+0x44>
 10022c8:	4244b03a 	or	r2,r8,r9
 10022cc:	10001a1e 	bne	r2,zero,1002338 <__pack_d+0xac>
 10022d0:	000d883a 	mov	r6,zero
 10022d4:	000f883a 	mov	r7,zero
 10022d8:	0011883a 	mov	r8,zero
 10022dc:	00800434 	movhi	r2,16
 10022e0:	10bfffc4 	addi	r2,r2,-1
 10022e4:	301d883a 	mov	r14,r6
 10022e8:	3884703a 	and	r2,r7,r2
 10022ec:	400a953a 	slli	r5,r8,20
 10022f0:	79bffc2c 	andhi	r6,r15,65520
 10022f4:	308cb03a 	or	r6,r6,r2
 10022f8:	00e00434 	movhi	r3,32784
 10022fc:	18ffffc4 	addi	r3,r3,-1
 1002300:	800497fa 	slli	r2,r16,31
 1002304:	30c6703a 	and	r3,r6,r3
 1002308:	1946b03a 	or	r3,r3,r5
 100230c:	01600034 	movhi	r5,32768
 1002310:	297fffc4 	addi	r5,r5,-1
 1002314:	194a703a 	and	r5,r3,r5
 1002318:	288ab03a 	or	r5,r5,r2
 100231c:	2807883a 	mov	r3,r5
 1002320:	7005883a 	mov	r2,r14
 1002324:	dc800217 	ldw	r18,8(sp)
 1002328:	dc400117 	ldw	r17,4(sp)
 100232c:	dc000017 	ldw	r16,0(sp)
 1002330:	dec00304 	addi	sp,sp,12
 1002334:	f800283a 	ret
 1002338:	21000217 	ldw	r4,8(r4)
 100233c:	00bf0084 	movi	r2,-1022
 1002340:	20803f16 	blt	r4,r2,1002440 <__pack_d+0x1b4>
 1002344:	0080ffc4 	movi	r2,1023
 1002348:	11002c16 	blt	r2,r4,10023fc <__pack_d+0x170>
 100234c:	00803fc4 	movi	r2,255
 1002350:	408c703a 	and	r6,r8,r2
 1002354:	00802004 	movi	r2,128
 1002358:	0007883a 	mov	r3,zero
 100235c:	000f883a 	mov	r7,zero
 1002360:	2280ffc4 	addi	r10,r4,1023
 1002364:	30801e26 	beq	r6,r2,10023e0 <__pack_d+0x154>
 1002368:	00801fc4 	movi	r2,127
 100236c:	4089883a 	add	r4,r8,r2
 1002370:	220d803a 	cmpltu	r6,r4,r8
 1002374:	324d883a 	add	r6,r6,r9
 1002378:	2011883a 	mov	r8,r4
 100237c:	3013883a 	mov	r9,r6
 1002380:	00880034 	movhi	r2,8192
 1002384:	10bfffc4 	addi	r2,r2,-1
 1002388:	12400d36 	bltu	r2,r9,10023c0 <__pack_d+0x134>
 100238c:	4804963a 	slli	r2,r9,24
 1002390:	400cd23a 	srli	r6,r8,8
 1002394:	480ed23a 	srli	r7,r9,8
 1002398:	013fffc4 	movi	r4,-1
 100239c:	118cb03a 	or	r6,r2,r6
 10023a0:	01400434 	movhi	r5,16
 10023a4:	297fffc4 	addi	r5,r5,-1
 10023a8:	3104703a 	and	r2,r6,r4
 10023ac:	3946703a 	and	r3,r7,r5
 10023b0:	5201ffcc 	andi	r8,r10,2047
 10023b4:	100d883a 	mov	r6,r2
 10023b8:	180f883a 	mov	r7,r3
 10023bc:	003fc706 	br	10022dc <__pack_d+0x50>
 10023c0:	480897fa 	slli	r4,r9,31
 10023c4:	4004d07a 	srli	r2,r8,1
 10023c8:	4806d07a 	srli	r3,r9,1
 10023cc:	52800044 	addi	r10,r10,1
 10023d0:	2084b03a 	or	r2,r4,r2
 10023d4:	1011883a 	mov	r8,r2
 10023d8:	1813883a 	mov	r9,r3
 10023dc:	003feb06 	br	100238c <__pack_d+0x100>
 10023e0:	383fe11e 	bne	r7,zero,1002368 <__pack_d+0xdc>
 10023e4:	01004004 	movi	r4,256
 10023e8:	4104703a 	and	r2,r8,r4
 10023ec:	10c4b03a 	or	r2,r2,r3
 10023f0:	103fe326 	beq	r2,zero,1002380 <__pack_d+0xf4>
 10023f4:	3005883a 	mov	r2,r6
 10023f8:	003fdc06 	br	100236c <__pack_d+0xe0>
 10023fc:	000d883a 	mov	r6,zero
 1002400:	000f883a 	mov	r7,zero
 1002404:	0201ffc4 	movi	r8,2047
 1002408:	003fb406 	br	10022dc <__pack_d+0x50>
 100240c:	0005883a 	mov	r2,zero
 1002410:	00c00234 	movhi	r3,8
 1002414:	408cb03a 	or	r6,r8,r2
 1002418:	48ceb03a 	or	r7,r9,r3
 100241c:	013fffc4 	movi	r4,-1
 1002420:	01400434 	movhi	r5,16
 1002424:	297fffc4 	addi	r5,r5,-1
 1002428:	3104703a 	and	r2,r6,r4
 100242c:	3946703a 	and	r3,r7,r5
 1002430:	100d883a 	mov	r6,r2
 1002434:	180f883a 	mov	r7,r3
 1002438:	0201ffc4 	movi	r8,2047
 100243c:	003fa706 	br	10022dc <__pack_d+0x50>
 1002440:	1109c83a 	sub	r4,r2,r4
 1002444:	00800e04 	movi	r2,56
 1002448:	11004316 	blt	r2,r4,1002558 <__pack_d+0x2cc>
 100244c:	21fff804 	addi	r7,r4,-32
 1002450:	38004516 	blt	r7,zero,1002568 <__pack_d+0x2dc>
 1002454:	49d8d83a 	srl	r12,r9,r7
 1002458:	001b883a 	mov	r13,zero
 100245c:	0023883a 	mov	r17,zero
 1002460:	01400044 	movi	r5,1
 1002464:	0025883a 	mov	r18,zero
 1002468:	38004716 	blt	r7,zero,1002588 <__pack_d+0x2fc>
 100246c:	29d6983a 	sll	r11,r5,r7
 1002470:	0015883a 	mov	r10,zero
 1002474:	00bfffc4 	movi	r2,-1
 1002478:	5089883a 	add	r4,r10,r2
 100247c:	588b883a 	add	r5,r11,r2
 1002480:	228d803a 	cmpltu	r6,r4,r10
 1002484:	314b883a 	add	r5,r6,r5
 1002488:	4104703a 	and	r2,r8,r4
 100248c:	4946703a 	and	r3,r9,r5
 1002490:	10c4b03a 	or	r2,r2,r3
 1002494:	10000226 	beq	r2,zero,10024a0 <__pack_d+0x214>
 1002498:	04400044 	movi	r17,1
 100249c:	0025883a 	mov	r18,zero
 10024a0:	00803fc4 	movi	r2,255
 10024a4:	644eb03a 	or	r7,r12,r17
 10024a8:	3892703a 	and	r9,r7,r2
 10024ac:	00802004 	movi	r2,128
 10024b0:	6c90b03a 	or	r8,r13,r18
 10024b4:	0015883a 	mov	r10,zero
 10024b8:	48801626 	beq	r9,r2,1002514 <__pack_d+0x288>
 10024bc:	01001fc4 	movi	r4,127
 10024c0:	3905883a 	add	r2,r7,r4
 10024c4:	11cd803a 	cmpltu	r6,r2,r7
 10024c8:	320d883a 	add	r6,r6,r8
 10024cc:	100f883a 	mov	r7,r2
 10024d0:	00840034 	movhi	r2,4096
 10024d4:	10bfffc4 	addi	r2,r2,-1
 10024d8:	3011883a 	mov	r8,r6
 10024dc:	0007883a 	mov	r3,zero
 10024e0:	11801b36 	bltu	r2,r6,1002550 <__pack_d+0x2c4>
 10024e4:	4004963a 	slli	r2,r8,24
 10024e8:	3808d23a 	srli	r4,r7,8
 10024ec:	400ad23a 	srli	r5,r8,8
 10024f0:	1813883a 	mov	r9,r3
 10024f4:	1108b03a 	or	r4,r2,r4
 10024f8:	00bfffc4 	movi	r2,-1
 10024fc:	00c00434 	movhi	r3,16
 1002500:	18ffffc4 	addi	r3,r3,-1
 1002504:	208c703a 	and	r6,r4,r2
 1002508:	28ce703a 	and	r7,r5,r3
 100250c:	4a01ffcc 	andi	r8,r9,2047
 1002510:	003f7206 	br	10022dc <__pack_d+0x50>
 1002514:	503fe91e 	bne	r10,zero,10024bc <__pack_d+0x230>
 1002518:	01004004 	movi	r4,256
 100251c:	3904703a 	and	r2,r7,r4
 1002520:	0007883a 	mov	r3,zero
 1002524:	10c4b03a 	or	r2,r2,r3
 1002528:	10000626 	beq	r2,zero,1002544 <__pack_d+0x2b8>
 100252c:	3a45883a 	add	r2,r7,r9
 1002530:	11cd803a 	cmpltu	r6,r2,r7
 1002534:	320d883a 	add	r6,r6,r8
 1002538:	100f883a 	mov	r7,r2
 100253c:	3011883a 	mov	r8,r6
 1002540:	0007883a 	mov	r3,zero
 1002544:	00840034 	movhi	r2,4096
 1002548:	10bfffc4 	addi	r2,r2,-1
 100254c:	123fe52e 	bgeu	r2,r8,10024e4 <__pack_d+0x258>
 1002550:	00c00044 	movi	r3,1
 1002554:	003fe306 	br	10024e4 <__pack_d+0x258>
 1002558:	0009883a 	mov	r4,zero
 100255c:	0013883a 	mov	r9,zero
 1002560:	000b883a 	mov	r5,zero
 1002564:	003fe406 	br	10024f8 <__pack_d+0x26c>
 1002568:	4a47883a 	add	r3,r9,r9
 100256c:	008007c4 	movi	r2,31
 1002570:	1105c83a 	sub	r2,r2,r4
 1002574:	1886983a 	sll	r3,r3,r2
 1002578:	4118d83a 	srl	r12,r8,r4
 100257c:	491ad83a 	srl	r13,r9,r4
 1002580:	1b18b03a 	or	r12,r3,r12
 1002584:	003fb506 	br	100245c <__pack_d+0x1d0>
 1002588:	2806d07a 	srli	r3,r5,1
 100258c:	008007c4 	movi	r2,31
 1002590:	1105c83a 	sub	r2,r2,r4
 1002594:	1896d83a 	srl	r11,r3,r2
 1002598:	2914983a 	sll	r10,r5,r4
 100259c:	003fb506 	br	1002474 <__pack_d+0x1e8>

010025a0 <__unpack_d>:
 10025a0:	20c00117 	ldw	r3,4(r4)
 10025a4:	22400017 	ldw	r9,0(r4)
 10025a8:	00800434 	movhi	r2,16
 10025ac:	10bfffc4 	addi	r2,r2,-1
 10025b0:	1808d53a 	srli	r4,r3,20
 10025b4:	180cd7fa 	srli	r6,r3,31
 10025b8:	1894703a 	and	r10,r3,r2
 10025bc:	2201ffcc 	andi	r8,r4,2047
 10025c0:	281b883a 	mov	r13,r5
 10025c4:	4817883a 	mov	r11,r9
 10025c8:	29800115 	stw	r6,4(r5)
 10025cc:	5019883a 	mov	r12,r10
 10025d0:	40001e1e 	bne	r8,zero,100264c <__unpack_d+0xac>
 10025d4:	4a84b03a 	or	r2,r9,r10
 10025d8:	10001926 	beq	r2,zero,1002640 <__unpack_d+0xa0>
 10025dc:	4804d63a 	srli	r2,r9,24
 10025e0:	500c923a 	slli	r6,r10,8
 10025e4:	013f0084 	movi	r4,-1022
 10025e8:	00c40034 	movhi	r3,4096
 10025ec:	18ffffc4 	addi	r3,r3,-1
 10025f0:	118cb03a 	or	r6,r2,r6
 10025f4:	008000c4 	movi	r2,3
 10025f8:	480a923a 	slli	r5,r9,8
 10025fc:	68800015 	stw	r2,0(r13)
 1002600:	69000215 	stw	r4,8(r13)
 1002604:	19800b36 	bltu	r3,r6,1002634 <__unpack_d+0x94>
 1002608:	200f883a 	mov	r7,r4
 100260c:	1811883a 	mov	r8,r3
 1002610:	2945883a 	add	r2,r5,r5
 1002614:	1149803a 	cmpltu	r4,r2,r5
 1002618:	3187883a 	add	r3,r6,r6
 100261c:	20c9883a 	add	r4,r4,r3
 1002620:	100b883a 	mov	r5,r2
 1002624:	200d883a 	mov	r6,r4
 1002628:	39ffffc4 	addi	r7,r7,-1
 100262c:	413ff82e 	bgeu	r8,r4,1002610 <__unpack_d+0x70>
 1002630:	69c00215 	stw	r7,8(r13)
 1002634:	69800415 	stw	r6,16(r13)
 1002638:	69400315 	stw	r5,12(r13)
 100263c:	f800283a 	ret
 1002640:	00800084 	movi	r2,2
 1002644:	28800015 	stw	r2,0(r5)
 1002648:	f800283a 	ret
 100264c:	0081ffc4 	movi	r2,2047
 1002650:	40800f26 	beq	r8,r2,1002690 <__unpack_d+0xf0>
 1002654:	480cd63a 	srli	r6,r9,24
 1002658:	5006923a 	slli	r3,r10,8
 100265c:	4804923a 	slli	r2,r9,8
 1002660:	0009883a 	mov	r4,zero
 1002664:	30c6b03a 	or	r3,r6,r3
 1002668:	01440034 	movhi	r5,4096
 100266c:	110cb03a 	or	r6,r2,r4
 1002670:	423f0044 	addi	r8,r8,-1023
 1002674:	194eb03a 	or	r7,r3,r5
 1002678:	008000c4 	movi	r2,3
 100267c:	69c00415 	stw	r7,16(r13)
 1002680:	6a000215 	stw	r8,8(r13)
 1002684:	68800015 	stw	r2,0(r13)
 1002688:	69800315 	stw	r6,12(r13)
 100268c:	f800283a 	ret
 1002690:	4a84b03a 	or	r2,r9,r10
 1002694:	1000031e 	bne	r2,zero,10026a4 <__unpack_d+0x104>
 1002698:	00800104 	movi	r2,4
 100269c:	28800015 	stw	r2,0(r5)
 10026a0:	f800283a 	ret
 10026a4:	0009883a 	mov	r4,zero
 10026a8:	01400234 	movhi	r5,8
 10026ac:	4904703a 	and	r2,r9,r4
 10026b0:	5146703a 	and	r3,r10,r5
 10026b4:	10c4b03a 	or	r2,r2,r3
 10026b8:	10000526 	beq	r2,zero,10026d0 <__unpack_d+0x130>
 10026bc:	00800044 	movi	r2,1
 10026c0:	68800015 	stw	r2,0(r13)
 10026c4:	6b000415 	stw	r12,16(r13)
 10026c8:	6ac00315 	stw	r11,12(r13)
 10026cc:	f800283a 	ret
 10026d0:	68000015 	stw	zero,0(r13)
 10026d4:	003ffb06 	br	10026c4 <__unpack_d+0x124>

010026d8 <_puts_r>:
 10026d8:	defff604 	addi	sp,sp,-40
 10026dc:	dc400715 	stw	r17,28(sp)
 10026e0:	2023883a 	mov	r17,r4
 10026e4:	2809883a 	mov	r4,r5
 10026e8:	dfc00915 	stw	ra,36(sp)
 10026ec:	dcc00815 	stw	r19,32(sp)
 10026f0:	2827883a 	mov	r19,r5
 10026f4:	100278c0 	call	100278c <strlen>
 10026f8:	89400217 	ldw	r5,8(r17)
 10026fc:	00c04074 	movhi	r3,257
 1002700:	18e0db04 	addi	r3,r3,-31892
 1002704:	01c00044 	movi	r7,1
 1002708:	12000044 	addi	r8,r2,1
 100270c:	d8c00515 	stw	r3,20(sp)
 1002710:	d9c00615 	stw	r7,24(sp)
 1002714:	d8c00304 	addi	r3,sp,12
 1002718:	01c00084 	movi	r7,2
 100271c:	8809883a 	mov	r4,r17
 1002720:	d80d883a 	mov	r6,sp
 1002724:	d8c00015 	stw	r3,0(sp)
 1002728:	dcc00315 	stw	r19,12(sp)
 100272c:	da000215 	stw	r8,8(sp)
 1002730:	d9c00115 	stw	r7,4(sp)
 1002734:	d8800415 	stw	r2,16(sp)
 1002738:	10028000 	call	1002800 <__sfvwrite_r>
 100273c:	00ffffc4 	movi	r3,-1
 1002740:	10000626 	beq	r2,zero,100275c <_puts_r+0x84>
 1002744:	1805883a 	mov	r2,r3
 1002748:	dfc00917 	ldw	ra,36(sp)
 100274c:	dcc00817 	ldw	r19,32(sp)
 1002750:	dc400717 	ldw	r17,28(sp)
 1002754:	dec00a04 	addi	sp,sp,40
 1002758:	f800283a 	ret
 100275c:	00c00284 	movi	r3,10
 1002760:	1805883a 	mov	r2,r3
 1002764:	dfc00917 	ldw	ra,36(sp)
 1002768:	dcc00817 	ldw	r19,32(sp)
 100276c:	dc400717 	ldw	r17,28(sp)
 1002770:	dec00a04 	addi	sp,sp,40
 1002774:	f800283a 	ret

01002778 <puts>:
 1002778:	00804074 	movhi	r2,257
 100277c:	10a78e04 	addi	r2,r2,-25032
 1002780:	200b883a 	mov	r5,r4
 1002784:	11000017 	ldw	r4,0(r2)
 1002788:	10026d81 	jmpi	10026d8 <_puts_r>

0100278c <strlen>:
 100278c:	208000cc 	andi	r2,r4,3
 1002790:	2011883a 	mov	r8,r4
 1002794:	1000161e 	bne	r2,zero,10027f0 <strlen+0x64>
 1002798:	20c00017 	ldw	r3,0(r4)
 100279c:	017fbff4 	movhi	r5,65279
 10027a0:	297fbfc4 	addi	r5,r5,-257
 10027a4:	01e02074 	movhi	r7,32897
 10027a8:	39e02004 	addi	r7,r7,-32640
 10027ac:	1945883a 	add	r2,r3,r5
 10027b0:	11c4703a 	and	r2,r2,r7
 10027b4:	00c6303a 	nor	r3,zero,r3
 10027b8:	1886703a 	and	r3,r3,r2
 10027bc:	18000c1e 	bne	r3,zero,10027f0 <strlen+0x64>
 10027c0:	280d883a 	mov	r6,r5
 10027c4:	380b883a 	mov	r5,r7
 10027c8:	21000104 	addi	r4,r4,4
 10027cc:	20800017 	ldw	r2,0(r4)
 10027d0:	1187883a 	add	r3,r2,r6
 10027d4:	1946703a 	and	r3,r3,r5
 10027d8:	0084303a 	nor	r2,zero,r2
 10027dc:	10c4703a 	and	r2,r2,r3
 10027e0:	103ff926 	beq	r2,zero,10027c8 <strlen+0x3c>
 10027e4:	20800007 	ldb	r2,0(r4)
 10027e8:	10000326 	beq	r2,zero,10027f8 <strlen+0x6c>
 10027ec:	21000044 	addi	r4,r4,1
 10027f0:	20800007 	ldb	r2,0(r4)
 10027f4:	103ffd1e 	bne	r2,zero,10027ec <strlen+0x60>
 10027f8:	2205c83a 	sub	r2,r4,r8
 10027fc:	f800283a 	ret

01002800 <__sfvwrite_r>:
 1002800:	30800217 	ldw	r2,8(r6)
 1002804:	defff504 	addi	sp,sp,-44
 1002808:	df000915 	stw	fp,36(sp)
 100280c:	dd800715 	stw	r22,28(sp)
 1002810:	dc800315 	stw	r18,12(sp)
 1002814:	dfc00a15 	stw	ra,40(sp)
 1002818:	ddc00815 	stw	r23,32(sp)
 100281c:	dd400615 	stw	r21,24(sp)
 1002820:	dd000515 	stw	r20,20(sp)
 1002824:	dcc00415 	stw	r19,16(sp)
 1002828:	dc400215 	stw	r17,8(sp)
 100282c:	dc000115 	stw	r16,4(sp)
 1002830:	302d883a 	mov	r22,r6
 1002834:	2039883a 	mov	fp,r4
 1002838:	2825883a 	mov	r18,r5
 100283c:	10001c26 	beq	r2,zero,10028b0 <__sfvwrite_r+0xb0>
 1002840:	29c0030b 	ldhu	r7,12(r5)
 1002844:	3880020c 	andi	r2,r7,8
 1002848:	10002726 	beq	r2,zero,10028e8 <__sfvwrite_r+0xe8>
 100284c:	28800417 	ldw	r2,16(r5)
 1002850:	10002526 	beq	r2,zero,10028e8 <__sfvwrite_r+0xe8>
 1002854:	3880008c 	andi	r2,r7,2
 1002858:	b5400017 	ldw	r21,0(r22)
 100285c:	10002826 	beq	r2,zero,1002900 <__sfvwrite_r+0x100>
 1002860:	0021883a 	mov	r16,zero
 1002864:	0023883a 	mov	r17,zero
 1002868:	880d883a 	mov	r6,r17
 100286c:	e009883a 	mov	r4,fp
 1002870:	00810004 	movi	r2,1024
 1002874:	80006e26 	beq	r16,zero,1002a30 <__sfvwrite_r+0x230>
 1002878:	800f883a 	mov	r7,r16
 100287c:	91400717 	ldw	r5,28(r18)
 1002880:	1400012e 	bgeu	r2,r16,1002888 <__sfvwrite_r+0x88>
 1002884:	100f883a 	mov	r7,r2
 1002888:	90c00917 	ldw	r3,36(r18)
 100288c:	183ee83a 	callr	r3
 1002890:	1007883a 	mov	r3,r2
 1002894:	80a1c83a 	sub	r16,r16,r2
 1002898:	88a3883a 	add	r17,r17,r2
 100289c:	00806d0e 	bge	zero,r2,1002a54 <__sfvwrite_r+0x254>
 10028a0:	b0800217 	ldw	r2,8(r22)
 10028a4:	10c5c83a 	sub	r2,r2,r3
 10028a8:	b0800215 	stw	r2,8(r22)
 10028ac:	103fee1e 	bne	r2,zero,1002868 <__sfvwrite_r+0x68>
 10028b0:	0009883a 	mov	r4,zero
 10028b4:	2005883a 	mov	r2,r4
 10028b8:	dfc00a17 	ldw	ra,40(sp)
 10028bc:	df000917 	ldw	fp,36(sp)
 10028c0:	ddc00817 	ldw	r23,32(sp)
 10028c4:	dd800717 	ldw	r22,28(sp)
 10028c8:	dd400617 	ldw	r21,24(sp)
 10028cc:	dd000517 	ldw	r20,20(sp)
 10028d0:	dcc00417 	ldw	r19,16(sp)
 10028d4:	dc800317 	ldw	r18,12(sp)
 10028d8:	dc400217 	ldw	r17,8(sp)
 10028dc:	dc000117 	ldw	r16,4(sp)
 10028e0:	dec00b04 	addi	sp,sp,44
 10028e4:	f800283a 	ret
 10028e8:	1003ca40 	call	1003ca4 <__swsetup_r>
 10028ec:	1000e41e 	bne	r2,zero,1002c80 <__sfvwrite_r+0x480>
 10028f0:	91c0030b 	ldhu	r7,12(r18)
 10028f4:	b5400017 	ldw	r21,0(r22)
 10028f8:	3880008c 	andi	r2,r7,2
 10028fc:	103fd81e 	bne	r2,zero,1002860 <__sfvwrite_r+0x60>
 1002900:	3880004c 	andi	r2,r7,1
 1002904:	1005003a 	cmpeq	r2,r2,zero
 1002908:	10005726 	beq	r2,zero,1002a68 <__sfvwrite_r+0x268>
 100290c:	0029883a 	mov	r20,zero
 1002910:	002f883a 	mov	r23,zero
 1002914:	a0004226 	beq	r20,zero,1002a20 <__sfvwrite_r+0x220>
 1002918:	3880800c 	andi	r2,r7,512
 100291c:	94000217 	ldw	r16,8(r18)
 1002920:	10008b26 	beq	r2,zero,1002b50 <__sfvwrite_r+0x350>
 1002924:	800d883a 	mov	r6,r16
 1002928:	a400a536 	bltu	r20,r16,1002bc0 <__sfvwrite_r+0x3c0>
 100292c:	3881200c 	andi	r2,r7,1152
 1002930:	10002726 	beq	r2,zero,10029d0 <__sfvwrite_r+0x1d0>
 1002934:	90800517 	ldw	r2,20(r18)
 1002938:	92000417 	ldw	r8,16(r18)
 100293c:	91400017 	ldw	r5,0(r18)
 1002940:	1087883a 	add	r3,r2,r2
 1002944:	1887883a 	add	r3,r3,r2
 1002948:	1808d7fa 	srli	r4,r3,31
 100294c:	2a21c83a 	sub	r16,r5,r8
 1002950:	80800044 	addi	r2,r16,1
 1002954:	20c9883a 	add	r4,r4,r3
 1002958:	2027d07a 	srai	r19,r4,1
 100295c:	a085883a 	add	r2,r20,r2
 1002960:	980d883a 	mov	r6,r19
 1002964:	9880022e 	bgeu	r19,r2,1002970 <__sfvwrite_r+0x170>
 1002968:	1027883a 	mov	r19,r2
 100296c:	100d883a 	mov	r6,r2
 1002970:	3881000c 	andi	r2,r7,1024
 1002974:	1000b826 	beq	r2,zero,1002c58 <__sfvwrite_r+0x458>
 1002978:	300b883a 	mov	r5,r6
 100297c:	e009883a 	mov	r4,fp
 1002980:	1002c9c0 	call	1002c9c <_malloc_r>
 1002984:	10003126 	beq	r2,zero,1002a4c <__sfvwrite_r+0x24c>
 1002988:	91400417 	ldw	r5,16(r18)
 100298c:	1009883a 	mov	r4,r2
 1002990:	800d883a 	mov	r6,r16
 1002994:	1023883a 	mov	r17,r2
 1002998:	10034c00 	call	10034c0 <memcpy>
 100299c:	90c0030b 	ldhu	r3,12(r18)
 10029a0:	00beffc4 	movi	r2,-1025
 10029a4:	1886703a 	and	r3,r3,r2
 10029a8:	18c02014 	ori	r3,r3,128
 10029ac:	90c0030d 	sth	r3,12(r18)
 10029b0:	9c07c83a 	sub	r3,r19,r16
 10029b4:	8c05883a 	add	r2,r17,r16
 10029b8:	a00d883a 	mov	r6,r20
 10029bc:	a021883a 	mov	r16,r20
 10029c0:	90800015 	stw	r2,0(r18)
 10029c4:	90c00215 	stw	r3,8(r18)
 10029c8:	94400415 	stw	r17,16(r18)
 10029cc:	94c00515 	stw	r19,20(r18)
 10029d0:	91000017 	ldw	r4,0(r18)
 10029d4:	b80b883a 	mov	r5,r23
 10029d8:	a023883a 	mov	r17,r20
 10029dc:	10035600 	call	1003560 <memmove>
 10029e0:	90c00217 	ldw	r3,8(r18)
 10029e4:	90800017 	ldw	r2,0(r18)
 10029e8:	a027883a 	mov	r19,r20
 10029ec:	1c07c83a 	sub	r3,r3,r16
 10029f0:	1405883a 	add	r2,r2,r16
 10029f4:	90c00215 	stw	r3,8(r18)
 10029f8:	a021883a 	mov	r16,r20
 10029fc:	90800015 	stw	r2,0(r18)
 1002a00:	b0800217 	ldw	r2,8(r22)
 1002a04:	1405c83a 	sub	r2,r2,r16
 1002a08:	b0800215 	stw	r2,8(r22)
 1002a0c:	103fa826 	beq	r2,zero,10028b0 <__sfvwrite_r+0xb0>
 1002a10:	a469c83a 	sub	r20,r20,r17
 1002a14:	91c0030b 	ldhu	r7,12(r18)
 1002a18:	bcef883a 	add	r23,r23,r19
 1002a1c:	a03fbe1e 	bne	r20,zero,1002918 <__sfvwrite_r+0x118>
 1002a20:	adc00017 	ldw	r23,0(r21)
 1002a24:	ad000117 	ldw	r20,4(r21)
 1002a28:	ad400204 	addi	r21,r21,8
 1002a2c:	003fb906 	br	1002914 <__sfvwrite_r+0x114>
 1002a30:	ac400017 	ldw	r17,0(r21)
 1002a34:	ac000117 	ldw	r16,4(r21)
 1002a38:	ad400204 	addi	r21,r21,8
 1002a3c:	003f8a06 	br	1002868 <__sfvwrite_r+0x68>
 1002a40:	91400417 	ldw	r5,16(r18)
 1002a44:	e009883a 	mov	r4,fp
 1002a48:	10043fc0 	call	10043fc <_free_r>
 1002a4c:	00800304 	movi	r2,12
 1002a50:	e0800015 	stw	r2,0(fp)
 1002a54:	9080030b 	ldhu	r2,12(r18)
 1002a58:	013fffc4 	movi	r4,-1
 1002a5c:	10801014 	ori	r2,r2,64
 1002a60:	9080030d 	sth	r2,12(r18)
 1002a64:	003f9306 	br	10028b4 <__sfvwrite_r+0xb4>
 1002a68:	0027883a 	mov	r19,zero
 1002a6c:	002f883a 	mov	r23,zero
 1002a70:	d8000015 	stw	zero,0(sp)
 1002a74:	0029883a 	mov	r20,zero
 1002a78:	98001e26 	beq	r19,zero,1002af4 <__sfvwrite_r+0x2f4>
 1002a7c:	d8c00017 	ldw	r3,0(sp)
 1002a80:	1804c03a 	cmpne	r2,r3,zero
 1002a84:	10005e26 	beq	r2,zero,1002c00 <__sfvwrite_r+0x400>
 1002a88:	9821883a 	mov	r16,r19
 1002a8c:	a4c0012e 	bgeu	r20,r19,1002a94 <__sfvwrite_r+0x294>
 1002a90:	a021883a 	mov	r16,r20
 1002a94:	91000017 	ldw	r4,0(r18)
 1002a98:	90800417 	ldw	r2,16(r18)
 1002a9c:	91800217 	ldw	r6,8(r18)
 1002aa0:	91c00517 	ldw	r7,20(r18)
 1002aa4:	1100022e 	bgeu	r2,r4,1002ab0 <__sfvwrite_r+0x2b0>
 1002aa8:	31e3883a 	add	r17,r6,r7
 1002aac:	8c001616 	blt	r17,r16,1002b08 <__sfvwrite_r+0x308>
 1002ab0:	81c03816 	blt	r16,r7,1002b94 <__sfvwrite_r+0x394>
 1002ab4:	90c00917 	ldw	r3,36(r18)
 1002ab8:	91400717 	ldw	r5,28(r18)
 1002abc:	e009883a 	mov	r4,fp
 1002ac0:	b80d883a 	mov	r6,r23
 1002ac4:	183ee83a 	callr	r3
 1002ac8:	1023883a 	mov	r17,r2
 1002acc:	00bfe10e 	bge	zero,r2,1002a54 <__sfvwrite_r+0x254>
 1002ad0:	a469c83a 	sub	r20,r20,r17
 1002ad4:	a0001826 	beq	r20,zero,1002b38 <__sfvwrite_r+0x338>
 1002ad8:	b0800217 	ldw	r2,8(r22)
 1002adc:	1445c83a 	sub	r2,r2,r17
 1002ae0:	b0800215 	stw	r2,8(r22)
 1002ae4:	103f7226 	beq	r2,zero,10028b0 <__sfvwrite_r+0xb0>
 1002ae8:	9c67c83a 	sub	r19,r19,r17
 1002aec:	bc6f883a 	add	r23,r23,r17
 1002af0:	983fe21e 	bne	r19,zero,1002a7c <__sfvwrite_r+0x27c>
 1002af4:	adc00017 	ldw	r23,0(r21)
 1002af8:	acc00117 	ldw	r19,4(r21)
 1002afc:	ad400204 	addi	r21,r21,8
 1002b00:	d8000015 	stw	zero,0(sp)
 1002b04:	003fdc06 	br	1002a78 <__sfvwrite_r+0x278>
 1002b08:	b80b883a 	mov	r5,r23
 1002b0c:	880d883a 	mov	r6,r17
 1002b10:	10035600 	call	1003560 <memmove>
 1002b14:	90c00017 	ldw	r3,0(r18)
 1002b18:	e009883a 	mov	r4,fp
 1002b1c:	900b883a 	mov	r5,r18
 1002b20:	1c47883a 	add	r3,r3,r17
 1002b24:	90c00015 	stw	r3,0(r18)
 1002b28:	1003de00 	call	1003de0 <_fflush_r>
 1002b2c:	103fc91e 	bne	r2,zero,1002a54 <__sfvwrite_r+0x254>
 1002b30:	a469c83a 	sub	r20,r20,r17
 1002b34:	a03fe81e 	bne	r20,zero,1002ad8 <__sfvwrite_r+0x2d8>
 1002b38:	e009883a 	mov	r4,fp
 1002b3c:	900b883a 	mov	r5,r18
 1002b40:	1003de00 	call	1003de0 <_fflush_r>
 1002b44:	103fc31e 	bne	r2,zero,1002a54 <__sfvwrite_r+0x254>
 1002b48:	d8000015 	stw	zero,0(sp)
 1002b4c:	003fe206 	br	1002ad8 <__sfvwrite_r+0x2d8>
 1002b50:	91000017 	ldw	r4,0(r18)
 1002b54:	90800417 	ldw	r2,16(r18)
 1002b58:	1100022e 	bgeu	r2,r4,1002b64 <__sfvwrite_r+0x364>
 1002b5c:	8023883a 	mov	r17,r16
 1002b60:	85003136 	bltu	r16,r20,1002c28 <__sfvwrite_r+0x428>
 1002b64:	91c00517 	ldw	r7,20(r18)
 1002b68:	a1c01836 	bltu	r20,r7,1002bcc <__sfvwrite_r+0x3cc>
 1002b6c:	90c00917 	ldw	r3,36(r18)
 1002b70:	91400717 	ldw	r5,28(r18)
 1002b74:	e009883a 	mov	r4,fp
 1002b78:	b80d883a 	mov	r6,r23
 1002b7c:	183ee83a 	callr	r3
 1002b80:	1021883a 	mov	r16,r2
 1002b84:	00bfb30e 	bge	zero,r2,1002a54 <__sfvwrite_r+0x254>
 1002b88:	1023883a 	mov	r17,r2
 1002b8c:	1027883a 	mov	r19,r2
 1002b90:	003f9b06 	br	1002a00 <__sfvwrite_r+0x200>
 1002b94:	b80b883a 	mov	r5,r23
 1002b98:	800d883a 	mov	r6,r16
 1002b9c:	10035600 	call	1003560 <memmove>
 1002ba0:	90c00217 	ldw	r3,8(r18)
 1002ba4:	90800017 	ldw	r2,0(r18)
 1002ba8:	8023883a 	mov	r17,r16
 1002bac:	1c07c83a 	sub	r3,r3,r16
 1002bb0:	1405883a 	add	r2,r2,r16
 1002bb4:	90c00215 	stw	r3,8(r18)
 1002bb8:	90800015 	stw	r2,0(r18)
 1002bbc:	003fc406 	br	1002ad0 <__sfvwrite_r+0x2d0>
 1002bc0:	a00d883a 	mov	r6,r20
 1002bc4:	a021883a 	mov	r16,r20
 1002bc8:	003f8106 	br	10029d0 <__sfvwrite_r+0x1d0>
 1002bcc:	b80b883a 	mov	r5,r23
 1002bd0:	a00d883a 	mov	r6,r20
 1002bd4:	10035600 	call	1003560 <memmove>
 1002bd8:	90c00217 	ldw	r3,8(r18)
 1002bdc:	90800017 	ldw	r2,0(r18)
 1002be0:	a021883a 	mov	r16,r20
 1002be4:	1d07c83a 	sub	r3,r3,r20
 1002be8:	1505883a 	add	r2,r2,r20
 1002bec:	a023883a 	mov	r17,r20
 1002bf0:	a027883a 	mov	r19,r20
 1002bf4:	90c00215 	stw	r3,8(r18)
 1002bf8:	90800015 	stw	r2,0(r18)
 1002bfc:	003f8006 	br	1002a00 <__sfvwrite_r+0x200>
 1002c00:	b809883a 	mov	r4,r23
 1002c04:	01400284 	movi	r5,10
 1002c08:	980d883a 	mov	r6,r19
 1002c0c:	10033dc0 	call	10033dc <memchr>
 1002c10:	10001726 	beq	r2,zero,1002c70 <__sfvwrite_r+0x470>
 1002c14:	15c5c83a 	sub	r2,r2,r23
 1002c18:	15000044 	addi	r20,r2,1
 1002c1c:	00800044 	movi	r2,1
 1002c20:	d8800015 	stw	r2,0(sp)
 1002c24:	003f9806 	br	1002a88 <__sfvwrite_r+0x288>
 1002c28:	b80b883a 	mov	r5,r23
 1002c2c:	800d883a 	mov	r6,r16
 1002c30:	10035600 	call	1003560 <memmove>
 1002c34:	90c00017 	ldw	r3,0(r18)
 1002c38:	e009883a 	mov	r4,fp
 1002c3c:	900b883a 	mov	r5,r18
 1002c40:	1c07883a 	add	r3,r3,r16
 1002c44:	90c00015 	stw	r3,0(r18)
 1002c48:	8027883a 	mov	r19,r16
 1002c4c:	1003de00 	call	1003de0 <_fflush_r>
 1002c50:	103f6b26 	beq	r2,zero,1002a00 <__sfvwrite_r+0x200>
 1002c54:	003f7f06 	br	1002a54 <__sfvwrite_r+0x254>
 1002c58:	400b883a 	mov	r5,r8
 1002c5c:	e009883a 	mov	r4,fp
 1002c60:	10036400 	call	1003640 <_realloc_r>
 1002c64:	103f7626 	beq	r2,zero,1002a40 <__sfvwrite_r+0x240>
 1002c68:	1023883a 	mov	r17,r2
 1002c6c:	003f5006 	br	10029b0 <__sfvwrite_r+0x1b0>
 1002c70:	00c00044 	movi	r3,1
 1002c74:	9d000044 	addi	r20,r19,1
 1002c78:	d8c00015 	stw	r3,0(sp)
 1002c7c:	003f8206 	br	1002a88 <__sfvwrite_r+0x288>
 1002c80:	9080030b 	ldhu	r2,12(r18)
 1002c84:	00c00244 	movi	r3,9
 1002c88:	013fffc4 	movi	r4,-1
 1002c8c:	10801014 	ori	r2,r2,64
 1002c90:	9080030d 	sth	r2,12(r18)
 1002c94:	e0c00015 	stw	r3,0(fp)
 1002c98:	003f0606 	br	10028b4 <__sfvwrite_r+0xb4>

01002c9c <_malloc_r>:
 1002c9c:	defff604 	addi	sp,sp,-40
 1002ca0:	28c002c4 	addi	r3,r5,11
 1002ca4:	00800584 	movi	r2,22
 1002ca8:	dc800215 	stw	r18,8(sp)
 1002cac:	dfc00915 	stw	ra,36(sp)
 1002cb0:	df000815 	stw	fp,32(sp)
 1002cb4:	ddc00715 	stw	r23,28(sp)
 1002cb8:	dd800615 	stw	r22,24(sp)
 1002cbc:	dd400515 	stw	r21,20(sp)
 1002cc0:	dd000415 	stw	r20,16(sp)
 1002cc4:	dcc00315 	stw	r19,12(sp)
 1002cc8:	dc400115 	stw	r17,4(sp)
 1002ccc:	dc000015 	stw	r16,0(sp)
 1002cd0:	2025883a 	mov	r18,r4
 1002cd4:	10c01236 	bltu	r2,r3,1002d20 <_malloc_r+0x84>
 1002cd8:	04400404 	movi	r17,16
 1002cdc:	8940142e 	bgeu	r17,r5,1002d30 <_malloc_r+0x94>
 1002ce0:	00800304 	movi	r2,12
 1002ce4:	0007883a 	mov	r3,zero
 1002ce8:	90800015 	stw	r2,0(r18)
 1002cec:	1805883a 	mov	r2,r3
 1002cf0:	dfc00917 	ldw	ra,36(sp)
 1002cf4:	df000817 	ldw	fp,32(sp)
 1002cf8:	ddc00717 	ldw	r23,28(sp)
 1002cfc:	dd800617 	ldw	r22,24(sp)
 1002d00:	dd400517 	ldw	r21,20(sp)
 1002d04:	dd000417 	ldw	r20,16(sp)
 1002d08:	dcc00317 	ldw	r19,12(sp)
 1002d0c:	dc800217 	ldw	r18,8(sp)
 1002d10:	dc400117 	ldw	r17,4(sp)
 1002d14:	dc000017 	ldw	r16,0(sp)
 1002d18:	dec00a04 	addi	sp,sp,40
 1002d1c:	f800283a 	ret
 1002d20:	00bffe04 	movi	r2,-8
 1002d24:	18a2703a 	and	r17,r3,r2
 1002d28:	883fed16 	blt	r17,zero,1002ce0 <_malloc_r+0x44>
 1002d2c:	897fec36 	bltu	r17,r5,1002ce0 <_malloc_r+0x44>
 1002d30:	9009883a 	mov	r4,r18
 1002d34:	100566c0 	call	100566c <__malloc_lock>
 1002d38:	00807dc4 	movi	r2,503
 1002d3c:	14402b2e 	bgeu	r2,r17,1002dec <_malloc_r+0x150>
 1002d40:	8806d27a 	srli	r3,r17,9
 1002d44:	18003f1e 	bne	r3,zero,1002e44 <_malloc_r+0x1a8>
 1002d48:	880cd0fa 	srli	r6,r17,3
 1002d4c:	300490fa 	slli	r2,r6,3
 1002d50:	02c04074 	movhi	r11,257
 1002d54:	5ae1f404 	addi	r11,r11,-30768
 1002d58:	12cb883a 	add	r5,r2,r11
 1002d5c:	2c000317 	ldw	r16,12(r5)
 1002d60:	580f883a 	mov	r7,r11
 1002d64:	2c00041e 	bne	r5,r16,1002d78 <_malloc_r+0xdc>
 1002d68:	00000a06 	br	1002d94 <_malloc_r+0xf8>
 1002d6c:	1800860e 	bge	r3,zero,1002f88 <_malloc_r+0x2ec>
 1002d70:	84000317 	ldw	r16,12(r16)
 1002d74:	2c000726 	beq	r5,r16,1002d94 <_malloc_r+0xf8>
 1002d78:	80800117 	ldw	r2,4(r16)
 1002d7c:	00ffff04 	movi	r3,-4
 1002d80:	10c8703a 	and	r4,r2,r3
 1002d84:	2447c83a 	sub	r3,r4,r17
 1002d88:	008003c4 	movi	r2,15
 1002d8c:	10fff70e 	bge	r2,r3,1002d6c <_malloc_r+0xd0>
 1002d90:	31bfffc4 	addi	r6,r6,-1
 1002d94:	32400044 	addi	r9,r6,1
 1002d98:	02804074 	movhi	r10,257
 1002d9c:	52a1f604 	addi	r10,r10,-30760
 1002da0:	54000217 	ldw	r16,8(r10)
 1002da4:	8280a026 	beq	r16,r10,1003028 <_malloc_r+0x38c>
 1002da8:	80800117 	ldw	r2,4(r16)
 1002dac:	00ffff04 	movi	r3,-4
 1002db0:	10ca703a 	and	r5,r2,r3
 1002db4:	2c4dc83a 	sub	r6,r5,r17
 1002db8:	008003c4 	movi	r2,15
 1002dbc:	11808316 	blt	r2,r6,1002fcc <_malloc_r+0x330>
 1002dc0:	52800315 	stw	r10,12(r10)
 1002dc4:	52800215 	stw	r10,8(r10)
 1002dc8:	30002916 	blt	r6,zero,1002e70 <_malloc_r+0x1d4>
 1002dcc:	8147883a 	add	r3,r16,r5
 1002dd0:	18800117 	ldw	r2,4(r3)
 1002dd4:	9009883a 	mov	r4,r18
 1002dd8:	10800054 	ori	r2,r2,1
 1002ddc:	18800115 	stw	r2,4(r3)
 1002de0:	100568c0 	call	100568c <__malloc_unlock>
 1002de4:	80c00204 	addi	r3,r16,8
 1002de8:	003fc006 	br	1002cec <_malloc_r+0x50>
 1002dec:	02c04074 	movhi	r11,257
 1002df0:	5ae1f404 	addi	r11,r11,-30768
 1002df4:	8ac5883a 	add	r2,r17,r11
 1002df8:	14000317 	ldw	r16,12(r2)
 1002dfc:	580f883a 	mov	r7,r11
 1002e00:	8806d0fa 	srli	r3,r17,3
 1002e04:	14006c26 	beq	r2,r16,1002fb8 <_malloc_r+0x31c>
 1002e08:	80c00117 	ldw	r3,4(r16)
 1002e0c:	00bfff04 	movi	r2,-4
 1002e10:	81800317 	ldw	r6,12(r16)
 1002e14:	1886703a 	and	r3,r3,r2
 1002e18:	80c7883a 	add	r3,r16,r3
 1002e1c:	18800117 	ldw	r2,4(r3)
 1002e20:	81400217 	ldw	r5,8(r16)
 1002e24:	9009883a 	mov	r4,r18
 1002e28:	10800054 	ori	r2,r2,1
 1002e2c:	18800115 	stw	r2,4(r3)
 1002e30:	31400215 	stw	r5,8(r6)
 1002e34:	29800315 	stw	r6,12(r5)
 1002e38:	100568c0 	call	100568c <__malloc_unlock>
 1002e3c:	80c00204 	addi	r3,r16,8
 1002e40:	003faa06 	br	1002cec <_malloc_r+0x50>
 1002e44:	00800104 	movi	r2,4
 1002e48:	10c0052e 	bgeu	r2,r3,1002e60 <_malloc_r+0x1c4>
 1002e4c:	00800504 	movi	r2,20
 1002e50:	10c07836 	bltu	r2,r3,1003034 <_malloc_r+0x398>
 1002e54:	198016c4 	addi	r6,r3,91
 1002e58:	300490fa 	slli	r2,r6,3
 1002e5c:	003fbc06 	br	1002d50 <_malloc_r+0xb4>
 1002e60:	8804d1ba 	srli	r2,r17,6
 1002e64:	11800e04 	addi	r6,r2,56
 1002e68:	300490fa 	slli	r2,r6,3
 1002e6c:	003fb806 	br	1002d50 <_malloc_r+0xb4>
 1002e70:	00807fc4 	movi	r2,511
 1002e74:	1140bb36 	bltu	r2,r5,1003164 <_malloc_r+0x4c8>
 1002e78:	2806d0fa 	srli	r3,r5,3
 1002e7c:	573ffe04 	addi	fp,r10,-8
 1002e80:	00800044 	movi	r2,1
 1002e84:	180890fa 	slli	r4,r3,3
 1002e88:	1807d0ba 	srai	r3,r3,2
 1002e8c:	e1c00117 	ldw	r7,4(fp)
 1002e90:	5909883a 	add	r4,r11,r4
 1002e94:	21400217 	ldw	r5,8(r4)
 1002e98:	10c4983a 	sll	r2,r2,r3
 1002e9c:	81000315 	stw	r4,12(r16)
 1002ea0:	81400215 	stw	r5,8(r16)
 1002ea4:	388eb03a 	or	r7,r7,r2
 1002ea8:	2c000315 	stw	r16,12(r5)
 1002eac:	24000215 	stw	r16,8(r4)
 1002eb0:	e1c00115 	stw	r7,4(fp)
 1002eb4:	4807883a 	mov	r3,r9
 1002eb8:	4800cd16 	blt	r9,zero,10031f0 <_malloc_r+0x554>
 1002ebc:	1807d0ba 	srai	r3,r3,2
 1002ec0:	00800044 	movi	r2,1
 1002ec4:	10c8983a 	sll	r4,r2,r3
 1002ec8:	39004436 	bltu	r7,r4,1002fdc <_malloc_r+0x340>
 1002ecc:	21c4703a 	and	r2,r4,r7
 1002ed0:	10000a1e 	bne	r2,zero,1002efc <_malloc_r+0x260>
 1002ed4:	2109883a 	add	r4,r4,r4
 1002ed8:	00bfff04 	movi	r2,-4
 1002edc:	4884703a 	and	r2,r9,r2
 1002ee0:	3906703a 	and	r3,r7,r4
 1002ee4:	12400104 	addi	r9,r2,4
 1002ee8:	1800041e 	bne	r3,zero,1002efc <_malloc_r+0x260>
 1002eec:	2109883a 	add	r4,r4,r4
 1002ef0:	3904703a 	and	r2,r7,r4
 1002ef4:	4a400104 	addi	r9,r9,4
 1002ef8:	103ffc26 	beq	r2,zero,1002eec <_malloc_r+0x250>
 1002efc:	480490fa 	slli	r2,r9,3
 1002f00:	4819883a 	mov	r12,r9
 1002f04:	023fff04 	movi	r8,-4
 1002f08:	589b883a 	add	r13,r11,r2
 1002f0c:	6807883a 	mov	r3,r13
 1002f10:	014003c4 	movi	r5,15
 1002f14:	1c000317 	ldw	r16,12(r3)
 1002f18:	1c00041e 	bne	r3,r16,1002f2c <_malloc_r+0x290>
 1002f1c:	0000a706 	br	10031bc <_malloc_r+0x520>
 1002f20:	3000ab0e 	bge	r6,zero,10031d0 <_malloc_r+0x534>
 1002f24:	84000317 	ldw	r16,12(r16)
 1002f28:	1c00a426 	beq	r3,r16,10031bc <_malloc_r+0x520>
 1002f2c:	80800117 	ldw	r2,4(r16)
 1002f30:	1204703a 	and	r2,r2,r8
 1002f34:	144dc83a 	sub	r6,r2,r17
 1002f38:	29bff90e 	bge	r5,r6,1002f20 <_malloc_r+0x284>
 1002f3c:	81000317 	ldw	r4,12(r16)
 1002f40:	80c00217 	ldw	r3,8(r16)
 1002f44:	89400054 	ori	r5,r17,1
 1002f48:	8445883a 	add	r2,r16,r17
 1002f4c:	20c00215 	stw	r3,8(r4)
 1002f50:	19000315 	stw	r4,12(r3)
 1002f54:	81400115 	stw	r5,4(r16)
 1002f58:	1187883a 	add	r3,r2,r6
 1002f5c:	31000054 	ori	r4,r6,1
 1002f60:	50800315 	stw	r2,12(r10)
 1002f64:	50800215 	stw	r2,8(r10)
 1002f68:	19800015 	stw	r6,0(r3)
 1002f6c:	11000115 	stw	r4,4(r2)
 1002f70:	12800215 	stw	r10,8(r2)
 1002f74:	12800315 	stw	r10,12(r2)
 1002f78:	9009883a 	mov	r4,r18
 1002f7c:	100568c0 	call	100568c <__malloc_unlock>
 1002f80:	80c00204 	addi	r3,r16,8
 1002f84:	003f5906 	br	1002cec <_malloc_r+0x50>
 1002f88:	8109883a 	add	r4,r16,r4
 1002f8c:	20800117 	ldw	r2,4(r4)
 1002f90:	80c00217 	ldw	r3,8(r16)
 1002f94:	81400317 	ldw	r5,12(r16)
 1002f98:	10800054 	ori	r2,r2,1
 1002f9c:	20800115 	stw	r2,4(r4)
 1002fa0:	28c00215 	stw	r3,8(r5)
 1002fa4:	19400315 	stw	r5,12(r3)
 1002fa8:	9009883a 	mov	r4,r18
 1002fac:	100568c0 	call	100568c <__malloc_unlock>
 1002fb0:	80c00204 	addi	r3,r16,8
 1002fb4:	003f4d06 	br	1002cec <_malloc_r+0x50>
 1002fb8:	80800204 	addi	r2,r16,8
 1002fbc:	14000317 	ldw	r16,12(r2)
 1002fc0:	143f911e 	bne	r2,r16,1002e08 <_malloc_r+0x16c>
 1002fc4:	1a400084 	addi	r9,r3,2
 1002fc8:	003f7306 	br	1002d98 <_malloc_r+0xfc>
 1002fcc:	88c00054 	ori	r3,r17,1
 1002fd0:	8445883a 	add	r2,r16,r17
 1002fd4:	80c00115 	stw	r3,4(r16)
 1002fd8:	003fdf06 	br	1002f58 <_malloc_r+0x2bc>
 1002fdc:	e4000217 	ldw	r16,8(fp)
 1002fe0:	00bfff04 	movi	r2,-4
 1002fe4:	80c00117 	ldw	r3,4(r16)
 1002fe8:	802d883a 	mov	r22,r16
 1002fec:	18aa703a 	and	r21,r3,r2
 1002ff0:	ac401636 	bltu	r21,r17,100304c <_malloc_r+0x3b0>
 1002ff4:	ac49c83a 	sub	r4,r21,r17
 1002ff8:	008003c4 	movi	r2,15
 1002ffc:	1100130e 	bge	r2,r4,100304c <_malloc_r+0x3b0>
 1003000:	88800054 	ori	r2,r17,1
 1003004:	8447883a 	add	r3,r16,r17
 1003008:	80800115 	stw	r2,4(r16)
 100300c:	20800054 	ori	r2,r4,1
 1003010:	18800115 	stw	r2,4(r3)
 1003014:	e0c00215 	stw	r3,8(fp)
 1003018:	9009883a 	mov	r4,r18
 100301c:	100568c0 	call	100568c <__malloc_unlock>
 1003020:	80c00204 	addi	r3,r16,8
 1003024:	003f3106 	br	1002cec <_malloc_r+0x50>
 1003028:	39c00117 	ldw	r7,4(r7)
 100302c:	573ffe04 	addi	fp,r10,-8
 1003030:	003fa006 	br	1002eb4 <_malloc_r+0x218>
 1003034:	00801504 	movi	r2,84
 1003038:	10c06736 	bltu	r2,r3,10031d8 <_malloc_r+0x53c>
 100303c:	8804d33a 	srli	r2,r17,12
 1003040:	11801b84 	addi	r6,r2,110
 1003044:	300490fa 	slli	r2,r6,3
 1003048:	003f4106 	br	1002d50 <_malloc_r+0xb4>
 100304c:	d0a6b617 	ldw	r2,-25896(gp)
 1003050:	d0e00317 	ldw	r3,-32756(gp)
 1003054:	053fffc4 	movi	r20,-1
 1003058:	10800404 	addi	r2,r2,16
 100305c:	88a7883a 	add	r19,r17,r2
 1003060:	1d000326 	beq	r3,r20,1003070 <_malloc_r+0x3d4>
 1003064:	98c3ffc4 	addi	r3,r19,4095
 1003068:	00bc0004 	movi	r2,-4096
 100306c:	18a6703a 	and	r19,r3,r2
 1003070:	9009883a 	mov	r4,r18
 1003074:	980b883a 	mov	r5,r19
 1003078:	1003c340 	call	1003c34 <_sbrk_r>
 100307c:	1009883a 	mov	r4,r2
 1003080:	15000426 	beq	r2,r20,1003094 <_malloc_r+0x3f8>
 1003084:	854b883a 	add	r5,r16,r21
 1003088:	1029883a 	mov	r20,r2
 100308c:	11405a2e 	bgeu	r2,r5,10031f8 <_malloc_r+0x55c>
 1003090:	87000c26 	beq	r16,fp,10030c4 <_malloc_r+0x428>
 1003094:	e4000217 	ldw	r16,8(fp)
 1003098:	80c00117 	ldw	r3,4(r16)
 100309c:	00bfff04 	movi	r2,-4
 10030a0:	1884703a 	and	r2,r3,r2
 10030a4:	14400336 	bltu	r2,r17,10030b4 <_malloc_r+0x418>
 10030a8:	1449c83a 	sub	r4,r2,r17
 10030ac:	008003c4 	movi	r2,15
 10030b0:	113fd316 	blt	r2,r4,1003000 <_malloc_r+0x364>
 10030b4:	9009883a 	mov	r4,r18
 10030b8:	100568c0 	call	100568c <__malloc_unlock>
 10030bc:	0007883a 	mov	r3,zero
 10030c0:	003f0a06 	br	1002cec <_malloc_r+0x50>
 10030c4:	05c04074 	movhi	r23,257
 10030c8:	bdee4e04 	addi	r23,r23,-18120
 10030cc:	b8800017 	ldw	r2,0(r23)
 10030d0:	988d883a 	add	r6,r19,r2
 10030d4:	b9800015 	stw	r6,0(r23)
 10030d8:	d0e00317 	ldw	r3,-32756(gp)
 10030dc:	00bfffc4 	movi	r2,-1
 10030e0:	18808e26 	beq	r3,r2,100331c <_malloc_r+0x680>
 10030e4:	2145c83a 	sub	r2,r4,r5
 10030e8:	3085883a 	add	r2,r6,r2
 10030ec:	b8800015 	stw	r2,0(r23)
 10030f0:	20c001cc 	andi	r3,r4,7
 10030f4:	18005f1e 	bne	r3,zero,1003274 <_malloc_r+0x5d8>
 10030f8:	000b883a 	mov	r5,zero
 10030fc:	a4c5883a 	add	r2,r20,r19
 1003100:	1083ffcc 	andi	r2,r2,4095
 1003104:	00c40004 	movi	r3,4096
 1003108:	1887c83a 	sub	r3,r3,r2
 100310c:	28e7883a 	add	r19,r5,r3
 1003110:	9009883a 	mov	r4,r18
 1003114:	980b883a 	mov	r5,r19
 1003118:	1003c340 	call	1003c34 <_sbrk_r>
 100311c:	1007883a 	mov	r3,r2
 1003120:	00bfffc4 	movi	r2,-1
 1003124:	18807a26 	beq	r3,r2,1003310 <_malloc_r+0x674>
 1003128:	1d05c83a 	sub	r2,r3,r20
 100312c:	9885883a 	add	r2,r19,r2
 1003130:	10c00054 	ori	r3,r2,1
 1003134:	b8800017 	ldw	r2,0(r23)
 1003138:	a021883a 	mov	r16,r20
 100313c:	a0c00115 	stw	r3,4(r20)
 1003140:	9885883a 	add	r2,r19,r2
 1003144:	b8800015 	stw	r2,0(r23)
 1003148:	e5000215 	stw	r20,8(fp)
 100314c:	b7003626 	beq	r22,fp,1003228 <_malloc_r+0x58c>
 1003150:	018003c4 	movi	r6,15
 1003154:	35404b36 	bltu	r6,r21,1003284 <_malloc_r+0x5e8>
 1003158:	00800044 	movi	r2,1
 100315c:	a0800115 	stw	r2,4(r20)
 1003160:	003fcd06 	br	1003098 <_malloc_r+0x3fc>
 1003164:	2808d27a 	srli	r4,r5,9
 1003168:	2000371e 	bne	r4,zero,1003248 <_malloc_r+0x5ac>
 100316c:	2808d0fa 	srli	r4,r5,3
 1003170:	200690fa 	slli	r3,r4,3
 1003174:	1ad1883a 	add	r8,r3,r11
 1003178:	41800217 	ldw	r6,8(r8)
 100317c:	41805b26 	beq	r8,r6,10032ec <_malloc_r+0x650>
 1003180:	30800117 	ldw	r2,4(r6)
 1003184:	00ffff04 	movi	r3,-4
 1003188:	10c4703a 	and	r2,r2,r3
 100318c:	2880022e 	bgeu	r5,r2,1003198 <_malloc_r+0x4fc>
 1003190:	31800217 	ldw	r6,8(r6)
 1003194:	41bffa1e 	bne	r8,r6,1003180 <_malloc_r+0x4e4>
 1003198:	32000317 	ldw	r8,12(r6)
 100319c:	39c00117 	ldw	r7,4(r7)
 10031a0:	82000315 	stw	r8,12(r16)
 10031a4:	81800215 	stw	r6,8(r16)
 10031a8:	07004074 	movhi	fp,257
 10031ac:	e721f404 	addi	fp,fp,-30768
 10031b0:	34000315 	stw	r16,12(r6)
 10031b4:	44000215 	stw	r16,8(r8)
 10031b8:	003f3e06 	br	1002eb4 <_malloc_r+0x218>
 10031bc:	63000044 	addi	r12,r12,1
 10031c0:	608000cc 	andi	r2,r12,3
 10031c4:	10005d26 	beq	r2,zero,100333c <_malloc_r+0x6a0>
 10031c8:	18c00204 	addi	r3,r3,8
 10031cc:	003f5106 	br	1002f14 <_malloc_r+0x278>
 10031d0:	8089883a 	add	r4,r16,r2
 10031d4:	003f6d06 	br	1002f8c <_malloc_r+0x2f0>
 10031d8:	00805504 	movi	r2,340
 10031dc:	10c02036 	bltu	r2,r3,1003260 <_malloc_r+0x5c4>
 10031e0:	8804d3fa 	srli	r2,r17,15
 10031e4:	11801dc4 	addi	r6,r2,119
 10031e8:	300490fa 	slli	r2,r6,3
 10031ec:	003ed806 	br	1002d50 <_malloc_r+0xb4>
 10031f0:	48c000c4 	addi	r3,r9,3
 10031f4:	003f3106 	br	1002ebc <_malloc_r+0x220>
 10031f8:	05c04074 	movhi	r23,257
 10031fc:	bdee4e04 	addi	r23,r23,-18120
 1003200:	b8800017 	ldw	r2,0(r23)
 1003204:	988d883a 	add	r6,r19,r2
 1003208:	b9800015 	stw	r6,0(r23)
 100320c:	293fb21e 	bne	r5,r4,10030d8 <_malloc_r+0x43c>
 1003210:	2083ffcc 	andi	r2,r4,4095
 1003214:	103fb01e 	bne	r2,zero,10030d8 <_malloc_r+0x43c>
 1003218:	e4000217 	ldw	r16,8(fp)
 100321c:	9d45883a 	add	r2,r19,r21
 1003220:	10800054 	ori	r2,r2,1
 1003224:	80800115 	stw	r2,4(r16)
 1003228:	b8c00017 	ldw	r3,0(r23)
 100322c:	d0a6b717 	ldw	r2,-25892(gp)
 1003230:	10c0012e 	bgeu	r2,r3,1003238 <_malloc_r+0x59c>
 1003234:	d0e6b715 	stw	r3,-25892(gp)
 1003238:	d0a6b817 	ldw	r2,-25888(gp)
 100323c:	10ff962e 	bgeu	r2,r3,1003098 <_malloc_r+0x3fc>
 1003240:	d0e6b815 	stw	r3,-25888(gp)
 1003244:	003f9406 	br	1003098 <_malloc_r+0x3fc>
 1003248:	00800104 	movi	r2,4
 100324c:	11001e36 	bltu	r2,r4,10032c8 <_malloc_r+0x62c>
 1003250:	2804d1ba 	srli	r2,r5,6
 1003254:	11000e04 	addi	r4,r2,56
 1003258:	200690fa 	slli	r3,r4,3
 100325c:	003fc506 	br	1003174 <_malloc_r+0x4d8>
 1003260:	00815504 	movi	r2,1364
 1003264:	10c01d2e 	bgeu	r2,r3,10032dc <_malloc_r+0x640>
 1003268:	01801f84 	movi	r6,126
 100326c:	0080fc04 	movi	r2,1008
 1003270:	003eb706 	br	1002d50 <_malloc_r+0xb4>
 1003274:	00800204 	movi	r2,8
 1003278:	10cbc83a 	sub	r5,r2,r3
 100327c:	2169883a 	add	r20,r4,r5
 1003280:	003f9e06 	br	10030fc <_malloc_r+0x460>
 1003284:	00bffe04 	movi	r2,-8
 1003288:	a93ffd04 	addi	r4,r21,-12
 100328c:	2088703a 	and	r4,r4,r2
 1003290:	b10b883a 	add	r5,r22,r4
 1003294:	00c00144 	movi	r3,5
 1003298:	28c00215 	stw	r3,8(r5)
 100329c:	28c00115 	stw	r3,4(r5)
 10032a0:	b0800117 	ldw	r2,4(r22)
 10032a4:	1080004c 	andi	r2,r2,1
 10032a8:	2084b03a 	or	r2,r4,r2
 10032ac:	b0800115 	stw	r2,4(r22)
 10032b0:	313fdd2e 	bgeu	r6,r4,1003228 <_malloc_r+0x58c>
 10032b4:	b1400204 	addi	r5,r22,8
 10032b8:	9009883a 	mov	r4,r18
 10032bc:	10043fc0 	call	10043fc <_free_r>
 10032c0:	e4000217 	ldw	r16,8(fp)
 10032c4:	003fd806 	br	1003228 <_malloc_r+0x58c>
 10032c8:	00800504 	movi	r2,20
 10032cc:	11001536 	bltu	r2,r4,1003324 <_malloc_r+0x688>
 10032d0:	210016c4 	addi	r4,r4,91
 10032d4:	200690fa 	slli	r3,r4,3
 10032d8:	003fa606 	br	1003174 <_malloc_r+0x4d8>
 10032dc:	8804d4ba 	srli	r2,r17,18
 10032e0:	11801f04 	addi	r6,r2,124
 10032e4:	300490fa 	slli	r2,r6,3
 10032e8:	003e9906 	br	1002d50 <_malloc_r+0xb4>
 10032ec:	2009d0ba 	srai	r4,r4,2
 10032f0:	01404074 	movhi	r5,257
 10032f4:	2961f404 	addi	r5,r5,-30768
 10032f8:	00c00044 	movi	r3,1
 10032fc:	28800117 	ldw	r2,4(r5)
 1003300:	1906983a 	sll	r3,r3,r4
 1003304:	10c4b03a 	or	r2,r2,r3
 1003308:	28800115 	stw	r2,4(r5)
 100330c:	003fa306 	br	100319c <_malloc_r+0x500>
 1003310:	0027883a 	mov	r19,zero
 1003314:	00c00044 	movi	r3,1
 1003318:	003f8606 	br	1003134 <_malloc_r+0x498>
 100331c:	d1200315 	stw	r4,-32756(gp)
 1003320:	003f7306 	br	10030f0 <_malloc_r+0x454>
 1003324:	00801504 	movi	r2,84
 1003328:	11001936 	bltu	r2,r4,1003390 <_malloc_r+0x6f4>
 100332c:	2804d33a 	srli	r2,r5,12
 1003330:	11001b84 	addi	r4,r2,110
 1003334:	200690fa 	slli	r3,r4,3
 1003338:	003f8e06 	br	1003174 <_malloc_r+0x4d8>
 100333c:	480b883a 	mov	r5,r9
 1003340:	6807883a 	mov	r3,r13
 1003344:	288000cc 	andi	r2,r5,3
 1003348:	18fffe04 	addi	r3,r3,-8
 100334c:	297fffc4 	addi	r5,r5,-1
 1003350:	10001526 	beq	r2,zero,10033a8 <_malloc_r+0x70c>
 1003354:	18800217 	ldw	r2,8(r3)
 1003358:	10fffa26 	beq	r2,r3,1003344 <_malloc_r+0x6a8>
 100335c:	2109883a 	add	r4,r4,r4
 1003360:	393f1e36 	bltu	r7,r4,1002fdc <_malloc_r+0x340>
 1003364:	203f1d26 	beq	r4,zero,1002fdc <_malloc_r+0x340>
 1003368:	21c4703a 	and	r2,r4,r7
 100336c:	10000226 	beq	r2,zero,1003378 <_malloc_r+0x6dc>
 1003370:	6013883a 	mov	r9,r12
 1003374:	003ee106 	br	1002efc <_malloc_r+0x260>
 1003378:	2109883a 	add	r4,r4,r4
 100337c:	3904703a 	and	r2,r7,r4
 1003380:	63000104 	addi	r12,r12,4
 1003384:	103ffc26 	beq	r2,zero,1003378 <_malloc_r+0x6dc>
 1003388:	6013883a 	mov	r9,r12
 100338c:	003edb06 	br	1002efc <_malloc_r+0x260>
 1003390:	00805504 	movi	r2,340
 1003394:	11000836 	bltu	r2,r4,10033b8 <_malloc_r+0x71c>
 1003398:	2804d3fa 	srli	r2,r5,15
 100339c:	11001dc4 	addi	r4,r2,119
 10033a0:	200690fa 	slli	r3,r4,3
 10033a4:	003f7306 	br	1003174 <_malloc_r+0x4d8>
 10033a8:	0104303a 	nor	r2,zero,r4
 10033ac:	388e703a 	and	r7,r7,r2
 10033b0:	e1c00115 	stw	r7,4(fp)
 10033b4:	003fe906 	br	100335c <_malloc_r+0x6c0>
 10033b8:	00815504 	movi	r2,1364
 10033bc:	1100032e 	bgeu	r2,r4,10033cc <_malloc_r+0x730>
 10033c0:	01001f84 	movi	r4,126
 10033c4:	00c0fc04 	movi	r3,1008
 10033c8:	003f6a06 	br	1003174 <_malloc_r+0x4d8>
 10033cc:	2804d4ba 	srli	r2,r5,18
 10033d0:	11001f04 	addi	r4,r2,124
 10033d4:	200690fa 	slli	r3,r4,3
 10033d8:	003f6606 	br	1003174 <_malloc_r+0x4d8>

010033dc <memchr>:
 10033dc:	008000c4 	movi	r2,3
 10033e0:	29403fcc 	andi	r5,r5,255
 10033e4:	2007883a 	mov	r3,r4
 10033e8:	1180022e 	bgeu	r2,r6,10033f4 <memchr+0x18>
 10033ec:	2084703a 	and	r2,r4,r2
 10033f0:	10000b26 	beq	r2,zero,1003420 <memchr+0x44>
 10033f4:	313fffc4 	addi	r4,r6,-1
 10033f8:	3000051e 	bne	r6,zero,1003410 <memchr+0x34>
 10033fc:	00002c06 	br	10034b0 <memchr+0xd4>
 1003400:	213fffc4 	addi	r4,r4,-1
 1003404:	00bfffc4 	movi	r2,-1
 1003408:	18c00044 	addi	r3,r3,1
 100340c:	20802826 	beq	r4,r2,10034b0 <memchr+0xd4>
 1003410:	18800003 	ldbu	r2,0(r3)
 1003414:	28bffa1e 	bne	r5,r2,1003400 <memchr+0x24>
 1003418:	1805883a 	mov	r2,r3
 100341c:	f800283a 	ret
 1003420:	0011883a 	mov	r8,zero
 1003424:	0007883a 	mov	r3,zero
 1003428:	01c00104 	movi	r7,4
 100342c:	4004923a 	slli	r2,r8,8
 1003430:	18c00044 	addi	r3,r3,1
 1003434:	1151883a 	add	r8,r2,r5
 1003438:	19fffc1e 	bne	r3,r7,100342c <memchr+0x50>
 100343c:	02bfbff4 	movhi	r10,65279
 1003440:	52bfbfc4 	addi	r10,r10,-257
 1003444:	02602074 	movhi	r9,32897
 1003448:	4a602004 	addi	r9,r9,-32640
 100344c:	02c000c4 	movi	r11,3
 1003450:	20800017 	ldw	r2,0(r4)
 1003454:	31bfff04 	addi	r6,r6,-4
 1003458:	200f883a 	mov	r7,r4
 100345c:	1204f03a 	xor	r2,r2,r8
 1003460:	1287883a 	add	r3,r2,r10
 1003464:	1a46703a 	and	r3,r3,r9
 1003468:	0084303a 	nor	r2,zero,r2
 100346c:	10c4703a 	and	r2,r2,r3
 1003470:	10000b26 	beq	r2,zero,10034a0 <memchr+0xc4>
 1003474:	20800003 	ldbu	r2,0(r4)
 1003478:	28800f26 	beq	r5,r2,10034b8 <memchr+0xdc>
 100347c:	20800043 	ldbu	r2,1(r4)
 1003480:	21c00044 	addi	r7,r4,1
 1003484:	28800c26 	beq	r5,r2,10034b8 <memchr+0xdc>
 1003488:	20800083 	ldbu	r2,2(r4)
 100348c:	21c00084 	addi	r7,r4,2
 1003490:	28800926 	beq	r5,r2,10034b8 <memchr+0xdc>
 1003494:	208000c3 	ldbu	r2,3(r4)
 1003498:	21c000c4 	addi	r7,r4,3
 100349c:	28800626 	beq	r5,r2,10034b8 <memchr+0xdc>
 10034a0:	21000104 	addi	r4,r4,4
 10034a4:	59bfea36 	bltu	r11,r6,1003450 <memchr+0x74>
 10034a8:	2007883a 	mov	r3,r4
 10034ac:	003fd106 	br	10033f4 <memchr+0x18>
 10034b0:	0005883a 	mov	r2,zero
 10034b4:	f800283a 	ret
 10034b8:	3805883a 	mov	r2,r7
 10034bc:	f800283a 	ret

010034c0 <memcpy>:
 10034c0:	01c003c4 	movi	r7,15
 10034c4:	2007883a 	mov	r3,r4
 10034c8:	3980032e 	bgeu	r7,r6,10034d8 <memcpy+0x18>
 10034cc:	2904b03a 	or	r2,r5,r4
 10034d0:	108000cc 	andi	r2,r2,3
 10034d4:	10000926 	beq	r2,zero,10034fc <memcpy+0x3c>
 10034d8:	30000626 	beq	r6,zero,10034f4 <memcpy+0x34>
 10034dc:	30cd883a 	add	r6,r6,r3
 10034e0:	28800003 	ldbu	r2,0(r5)
 10034e4:	29400044 	addi	r5,r5,1
 10034e8:	18800005 	stb	r2,0(r3)
 10034ec:	18c00044 	addi	r3,r3,1
 10034f0:	30fffb1e 	bne	r6,r3,10034e0 <memcpy+0x20>
 10034f4:	2005883a 	mov	r2,r4
 10034f8:	f800283a 	ret
 10034fc:	3811883a 	mov	r8,r7
 1003500:	200f883a 	mov	r7,r4
 1003504:	28c00017 	ldw	r3,0(r5)
 1003508:	31bffc04 	addi	r6,r6,-16
 100350c:	38c00015 	stw	r3,0(r7)
 1003510:	28800117 	ldw	r2,4(r5)
 1003514:	38800115 	stw	r2,4(r7)
 1003518:	28c00217 	ldw	r3,8(r5)
 100351c:	38c00215 	stw	r3,8(r7)
 1003520:	28800317 	ldw	r2,12(r5)
 1003524:	29400404 	addi	r5,r5,16
 1003528:	38800315 	stw	r2,12(r7)
 100352c:	39c00404 	addi	r7,r7,16
 1003530:	41bff436 	bltu	r8,r6,1003504 <memcpy+0x44>
 1003534:	008000c4 	movi	r2,3
 1003538:	1180072e 	bgeu	r2,r6,1003558 <memcpy+0x98>
 100353c:	1007883a 	mov	r3,r2
 1003540:	28800017 	ldw	r2,0(r5)
 1003544:	31bfff04 	addi	r6,r6,-4
 1003548:	29400104 	addi	r5,r5,4
 100354c:	38800015 	stw	r2,0(r7)
 1003550:	39c00104 	addi	r7,r7,4
 1003554:	19bffa36 	bltu	r3,r6,1003540 <memcpy+0x80>
 1003558:	3807883a 	mov	r3,r7
 100355c:	003fde06 	br	10034d8 <memcpy+0x18>

01003560 <memmove>:
 1003560:	2807883a 	mov	r3,r5
 1003564:	2011883a 	mov	r8,r4
 1003568:	29000c2e 	bgeu	r5,r4,100359c <memmove+0x3c>
 100356c:	298f883a 	add	r7,r5,r6
 1003570:	21c00a2e 	bgeu	r4,r7,100359c <memmove+0x3c>
 1003574:	30000726 	beq	r6,zero,1003594 <memmove+0x34>
 1003578:	2187883a 	add	r3,r4,r6
 100357c:	198dc83a 	sub	r6,r3,r6
 1003580:	39ffffc4 	addi	r7,r7,-1
 1003584:	38800003 	ldbu	r2,0(r7)
 1003588:	18ffffc4 	addi	r3,r3,-1
 100358c:	18800005 	stb	r2,0(r3)
 1003590:	19bffb1e 	bne	r3,r6,1003580 <memmove+0x20>
 1003594:	2005883a 	mov	r2,r4
 1003598:	f800283a 	ret
 100359c:	01c003c4 	movi	r7,15
 10035a0:	39800a36 	bltu	r7,r6,10035cc <memmove+0x6c>
 10035a4:	303ffb26 	beq	r6,zero,1003594 <memmove+0x34>
 10035a8:	400f883a 	mov	r7,r8
 10035ac:	320d883a 	add	r6,r6,r8
 10035b0:	28800003 	ldbu	r2,0(r5)
 10035b4:	29400044 	addi	r5,r5,1
 10035b8:	38800005 	stb	r2,0(r7)
 10035bc:	39c00044 	addi	r7,r7,1
 10035c0:	39bffb1e 	bne	r7,r6,10035b0 <memmove+0x50>
 10035c4:	2005883a 	mov	r2,r4
 10035c8:	f800283a 	ret
 10035cc:	1904b03a 	or	r2,r3,r4
 10035d0:	108000cc 	andi	r2,r2,3
 10035d4:	103ff31e 	bne	r2,zero,10035a4 <memmove+0x44>
 10035d8:	3811883a 	mov	r8,r7
 10035dc:	180b883a 	mov	r5,r3
 10035e0:	200f883a 	mov	r7,r4
 10035e4:	28c00017 	ldw	r3,0(r5)
 10035e8:	31bffc04 	addi	r6,r6,-16
 10035ec:	38c00015 	stw	r3,0(r7)
 10035f0:	28800117 	ldw	r2,4(r5)
 10035f4:	38800115 	stw	r2,4(r7)
 10035f8:	28c00217 	ldw	r3,8(r5)
 10035fc:	38c00215 	stw	r3,8(r7)
 1003600:	28800317 	ldw	r2,12(r5)
 1003604:	29400404 	addi	r5,r5,16
 1003608:	38800315 	stw	r2,12(r7)
 100360c:	39c00404 	addi	r7,r7,16
 1003610:	41bff436 	bltu	r8,r6,10035e4 <memmove+0x84>
 1003614:	008000c4 	movi	r2,3
 1003618:	1180072e 	bgeu	r2,r6,1003638 <memmove+0xd8>
 100361c:	1007883a 	mov	r3,r2
 1003620:	28800017 	ldw	r2,0(r5)
 1003624:	31bfff04 	addi	r6,r6,-4
 1003628:	29400104 	addi	r5,r5,4
 100362c:	38800015 	stw	r2,0(r7)
 1003630:	39c00104 	addi	r7,r7,4
 1003634:	19bffa36 	bltu	r3,r6,1003620 <memmove+0xc0>
 1003638:	3811883a 	mov	r8,r7
 100363c:	003fd906 	br	10035a4 <memmove+0x44>

01003640 <_realloc_r>:
 1003640:	defff404 	addi	sp,sp,-48
 1003644:	dd800815 	stw	r22,32(sp)
 1003648:	dc800415 	stw	r18,16(sp)
 100364c:	dc400315 	stw	r17,12(sp)
 1003650:	dfc00b15 	stw	ra,44(sp)
 1003654:	df000a15 	stw	fp,40(sp)
 1003658:	ddc00915 	stw	r23,36(sp)
 100365c:	dd400715 	stw	r21,28(sp)
 1003660:	dd000615 	stw	r20,24(sp)
 1003664:	dcc00515 	stw	r19,20(sp)
 1003668:	dc000215 	stw	r16,8(sp)
 100366c:	2825883a 	mov	r18,r5
 1003670:	3023883a 	mov	r17,r6
 1003674:	202d883a 	mov	r22,r4
 1003678:	2800c926 	beq	r5,zero,10039a0 <_realloc_r+0x360>
 100367c:	100566c0 	call	100566c <__malloc_lock>
 1003680:	943ffe04 	addi	r16,r18,-8
 1003684:	88c002c4 	addi	r3,r17,11
 1003688:	00800584 	movi	r2,22
 100368c:	82000117 	ldw	r8,4(r16)
 1003690:	10c01b2e 	bgeu	r2,r3,1003700 <_realloc_r+0xc0>
 1003694:	00bffe04 	movi	r2,-8
 1003698:	188e703a 	and	r7,r3,r2
 100369c:	3839883a 	mov	fp,r7
 10036a0:	38001a16 	blt	r7,zero,100370c <_realloc_r+0xcc>
 10036a4:	e4401936 	bltu	fp,r17,100370c <_realloc_r+0xcc>
 10036a8:	013fff04 	movi	r4,-4
 10036ac:	4126703a 	and	r19,r8,r4
 10036b0:	99c02616 	blt	r19,r7,100374c <_realloc_r+0x10c>
 10036b4:	802b883a 	mov	r21,r16
 10036b8:	9829883a 	mov	r20,r19
 10036bc:	84000204 	addi	r16,r16,8
 10036c0:	a80f883a 	mov	r7,r21
 10036c4:	a70dc83a 	sub	r6,r20,fp
 10036c8:	008003c4 	movi	r2,15
 10036cc:	1180c136 	bltu	r2,r6,10039d4 <_realloc_r+0x394>
 10036d0:	38800117 	ldw	r2,4(r7)
 10036d4:	a549883a 	add	r4,r20,r21
 10036d8:	1080004c 	andi	r2,r2,1
 10036dc:	a084b03a 	or	r2,r20,r2
 10036e0:	38800115 	stw	r2,4(r7)
 10036e4:	20c00117 	ldw	r3,4(r4)
 10036e8:	18c00054 	ori	r3,r3,1
 10036ec:	20c00115 	stw	r3,4(r4)
 10036f0:	b009883a 	mov	r4,r22
 10036f4:	100568c0 	call	100568c <__malloc_unlock>
 10036f8:	8023883a 	mov	r17,r16
 10036fc:	00000606 	br	1003718 <_realloc_r+0xd8>
 1003700:	01c00404 	movi	r7,16
 1003704:	3839883a 	mov	fp,r7
 1003708:	e47fe72e 	bgeu	fp,r17,10036a8 <_realloc_r+0x68>
 100370c:	00800304 	movi	r2,12
 1003710:	0023883a 	mov	r17,zero
 1003714:	b0800015 	stw	r2,0(r22)
 1003718:	8805883a 	mov	r2,r17
 100371c:	dfc00b17 	ldw	ra,44(sp)
 1003720:	df000a17 	ldw	fp,40(sp)
 1003724:	ddc00917 	ldw	r23,36(sp)
 1003728:	dd800817 	ldw	r22,32(sp)
 100372c:	dd400717 	ldw	r21,28(sp)
 1003730:	dd000617 	ldw	r20,24(sp)
 1003734:	dcc00517 	ldw	r19,20(sp)
 1003738:	dc800417 	ldw	r18,16(sp)
 100373c:	dc400317 	ldw	r17,12(sp)
 1003740:	dc000217 	ldw	r16,8(sp)
 1003744:	dec00c04 	addi	sp,sp,48
 1003748:	f800283a 	ret
 100374c:	00804074 	movhi	r2,257
 1003750:	10a1f404 	addi	r2,r2,-30768
 1003754:	12400217 	ldw	r9,8(r2)
 1003758:	84cd883a 	add	r6,r16,r19
 100375c:	802b883a 	mov	r21,r16
 1003760:	3240b926 	beq	r6,r9,1003a48 <_realloc_r+0x408>
 1003764:	31400117 	ldw	r5,4(r6)
 1003768:	00bfff84 	movi	r2,-2
 100376c:	2884703a 	and	r2,r5,r2
 1003770:	1185883a 	add	r2,r2,r6
 1003774:	10c00117 	ldw	r3,4(r2)
 1003778:	18c0004c 	andi	r3,r3,1
 100377c:	1807003a 	cmpeq	r3,r3,zero
 1003780:	1800a326 	beq	r3,zero,1003a10 <_realloc_r+0x3d0>
 1003784:	2908703a 	and	r4,r5,r4
 1003788:	9929883a 	add	r20,r19,r4
 100378c:	a1c0a30e 	bge	r20,r7,1003a1c <_realloc_r+0x3dc>
 1003790:	4080004c 	andi	r2,r8,1
 1003794:	1000551e 	bne	r2,zero,10038ec <_realloc_r+0x2ac>
 1003798:	80800017 	ldw	r2,0(r16)
 100379c:	80afc83a 	sub	r23,r16,r2
 10037a0:	b8c00117 	ldw	r3,4(r23)
 10037a4:	00bfff04 	movi	r2,-4
 10037a8:	1884703a 	and	r2,r3,r2
 10037ac:	30002e26 	beq	r6,zero,1003868 <_realloc_r+0x228>
 10037b0:	3240b926 	beq	r6,r9,1003a98 <_realloc_r+0x458>
 10037b4:	98a9883a 	add	r20,r19,r2
 10037b8:	2509883a 	add	r4,r4,r20
 10037bc:	d9000015 	stw	r4,0(sp)
 10037c0:	21c02a16 	blt	r4,r7,100386c <_realloc_r+0x22c>
 10037c4:	30800317 	ldw	r2,12(r6)
 10037c8:	30c00217 	ldw	r3,8(r6)
 10037cc:	01400904 	movi	r5,36
 10037d0:	99bfff04 	addi	r6,r19,-4
 10037d4:	18800315 	stw	r2,12(r3)
 10037d8:	10c00215 	stw	r3,8(r2)
 10037dc:	b9000317 	ldw	r4,12(r23)
 10037e0:	b8800217 	ldw	r2,8(r23)
 10037e4:	b82b883a 	mov	r21,r23
 10037e8:	bc000204 	addi	r16,r23,8
 10037ec:	20800215 	stw	r2,8(r4)
 10037f0:	11000315 	stw	r4,12(r2)
 10037f4:	2980e436 	bltu	r5,r6,1003b88 <_realloc_r+0x548>
 10037f8:	008004c4 	movi	r2,19
 10037fc:	9009883a 	mov	r4,r18
 1003800:	8011883a 	mov	r8,r16
 1003804:	11800f2e 	bgeu	r2,r6,1003844 <_realloc_r+0x204>
 1003808:	90800017 	ldw	r2,0(r18)
 100380c:	ba000404 	addi	r8,r23,16
 1003810:	91000204 	addi	r4,r18,8
 1003814:	b8800215 	stw	r2,8(r23)
 1003818:	90c00117 	ldw	r3,4(r18)
 100381c:	008006c4 	movi	r2,27
 1003820:	b8c00315 	stw	r3,12(r23)
 1003824:	1180072e 	bgeu	r2,r6,1003844 <_realloc_r+0x204>
 1003828:	90c00217 	ldw	r3,8(r18)
 100382c:	ba000604 	addi	r8,r23,24
 1003830:	91000404 	addi	r4,r18,16
 1003834:	b8c00415 	stw	r3,16(r23)
 1003838:	90800317 	ldw	r2,12(r18)
 100383c:	b8800515 	stw	r2,20(r23)
 1003840:	3140e726 	beq	r6,r5,1003be0 <_realloc_r+0x5a0>
 1003844:	20800017 	ldw	r2,0(r4)
 1003848:	dd000017 	ldw	r20,0(sp)
 100384c:	b80f883a 	mov	r7,r23
 1003850:	40800015 	stw	r2,0(r8)
 1003854:	20c00117 	ldw	r3,4(r4)
 1003858:	40c00115 	stw	r3,4(r8)
 100385c:	20800217 	ldw	r2,8(r4)
 1003860:	40800215 	stw	r2,8(r8)
 1003864:	003f9706 	br	10036c4 <_realloc_r+0x84>
 1003868:	98a9883a 	add	r20,r19,r2
 100386c:	a1c01f16 	blt	r20,r7,10038ec <_realloc_r+0x2ac>
 1003870:	b8c00317 	ldw	r3,12(r23)
 1003874:	b8800217 	ldw	r2,8(r23)
 1003878:	99bfff04 	addi	r6,r19,-4
 100387c:	01400904 	movi	r5,36
 1003880:	b82b883a 	mov	r21,r23
 1003884:	18800215 	stw	r2,8(r3)
 1003888:	10c00315 	stw	r3,12(r2)
 100388c:	bc000204 	addi	r16,r23,8
 1003890:	2980c336 	bltu	r5,r6,1003ba0 <_realloc_r+0x560>
 1003894:	008004c4 	movi	r2,19
 1003898:	9009883a 	mov	r4,r18
 100389c:	8011883a 	mov	r8,r16
 10038a0:	11800f2e 	bgeu	r2,r6,10038e0 <_realloc_r+0x2a0>
 10038a4:	90800017 	ldw	r2,0(r18)
 10038a8:	ba000404 	addi	r8,r23,16
 10038ac:	91000204 	addi	r4,r18,8
 10038b0:	b8800215 	stw	r2,8(r23)
 10038b4:	90c00117 	ldw	r3,4(r18)
 10038b8:	008006c4 	movi	r2,27
 10038bc:	b8c00315 	stw	r3,12(r23)
 10038c0:	1180072e 	bgeu	r2,r6,10038e0 <_realloc_r+0x2a0>
 10038c4:	90c00217 	ldw	r3,8(r18)
 10038c8:	ba000604 	addi	r8,r23,24
 10038cc:	91000404 	addi	r4,r18,16
 10038d0:	b8c00415 	stw	r3,16(r23)
 10038d4:	90800317 	ldw	r2,12(r18)
 10038d8:	b8800515 	stw	r2,20(r23)
 10038dc:	3140c726 	beq	r6,r5,1003bfc <_realloc_r+0x5bc>
 10038e0:	20800017 	ldw	r2,0(r4)
 10038e4:	b80f883a 	mov	r7,r23
 10038e8:	003fd906 	br	1003850 <_realloc_r+0x210>
 10038ec:	880b883a 	mov	r5,r17
 10038f0:	b009883a 	mov	r4,r22
 10038f4:	1002c9c0 	call	1002c9c <_malloc_r>
 10038f8:	1023883a 	mov	r17,r2
 10038fc:	10002526 	beq	r2,zero,1003994 <_realloc_r+0x354>
 1003900:	80800117 	ldw	r2,4(r16)
 1003904:	00ffff84 	movi	r3,-2
 1003908:	893ffe04 	addi	r4,r17,-8
 100390c:	10c4703a 	and	r2,r2,r3
 1003910:	8085883a 	add	r2,r16,r2
 1003914:	20809526 	beq	r4,r2,1003b6c <_realloc_r+0x52c>
 1003918:	99bfff04 	addi	r6,r19,-4
 100391c:	01c00904 	movi	r7,36
 1003920:	39804536 	bltu	r7,r6,1003a38 <_realloc_r+0x3f8>
 1003924:	008004c4 	movi	r2,19
 1003928:	9009883a 	mov	r4,r18
 100392c:	880b883a 	mov	r5,r17
 1003930:	11800f2e 	bgeu	r2,r6,1003970 <_realloc_r+0x330>
 1003934:	90800017 	ldw	r2,0(r18)
 1003938:	89400204 	addi	r5,r17,8
 100393c:	91000204 	addi	r4,r18,8
 1003940:	88800015 	stw	r2,0(r17)
 1003944:	90c00117 	ldw	r3,4(r18)
 1003948:	008006c4 	movi	r2,27
 100394c:	88c00115 	stw	r3,4(r17)
 1003950:	1180072e 	bgeu	r2,r6,1003970 <_realloc_r+0x330>
 1003954:	90c00217 	ldw	r3,8(r18)
 1003958:	89400404 	addi	r5,r17,16
 100395c:	91000404 	addi	r4,r18,16
 1003960:	88c00215 	stw	r3,8(r17)
 1003964:	90800317 	ldw	r2,12(r18)
 1003968:	88800315 	stw	r2,12(r17)
 100396c:	31c09126 	beq	r6,r7,1003bb4 <_realloc_r+0x574>
 1003970:	20800017 	ldw	r2,0(r4)
 1003974:	28800015 	stw	r2,0(r5)
 1003978:	20c00117 	ldw	r3,4(r4)
 100397c:	28c00115 	stw	r3,4(r5)
 1003980:	20800217 	ldw	r2,8(r4)
 1003984:	28800215 	stw	r2,8(r5)
 1003988:	900b883a 	mov	r5,r18
 100398c:	b009883a 	mov	r4,r22
 1003990:	10043fc0 	call	10043fc <_free_r>
 1003994:	b009883a 	mov	r4,r22
 1003998:	100568c0 	call	100568c <__malloc_unlock>
 100399c:	003f5e06 	br	1003718 <_realloc_r+0xd8>
 10039a0:	300b883a 	mov	r5,r6
 10039a4:	dfc00b17 	ldw	ra,44(sp)
 10039a8:	df000a17 	ldw	fp,40(sp)
 10039ac:	ddc00917 	ldw	r23,36(sp)
 10039b0:	dd800817 	ldw	r22,32(sp)
 10039b4:	dd400717 	ldw	r21,28(sp)
 10039b8:	dd000617 	ldw	r20,24(sp)
 10039bc:	dcc00517 	ldw	r19,20(sp)
 10039c0:	dc800417 	ldw	r18,16(sp)
 10039c4:	dc400317 	ldw	r17,12(sp)
 10039c8:	dc000217 	ldw	r16,8(sp)
 10039cc:	dec00c04 	addi	sp,sp,48
 10039d0:	1002c9c1 	jmpi	1002c9c <_malloc_r>
 10039d4:	38800117 	ldw	r2,4(r7)
 10039d8:	e54b883a 	add	r5,fp,r21
 10039dc:	31000054 	ori	r4,r6,1
 10039e0:	1080004c 	andi	r2,r2,1
 10039e4:	1704b03a 	or	r2,r2,fp
 10039e8:	38800115 	stw	r2,4(r7)
 10039ec:	29000115 	stw	r4,4(r5)
 10039f0:	2987883a 	add	r3,r5,r6
 10039f4:	18800117 	ldw	r2,4(r3)
 10039f8:	29400204 	addi	r5,r5,8
 10039fc:	b009883a 	mov	r4,r22
 1003a00:	10800054 	ori	r2,r2,1
 1003a04:	18800115 	stw	r2,4(r3)
 1003a08:	10043fc0 	call	10043fc <_free_r>
 1003a0c:	003f3806 	br	10036f0 <_realloc_r+0xb0>
 1003a10:	000d883a 	mov	r6,zero
 1003a14:	0009883a 	mov	r4,zero
 1003a18:	003f5d06 	br	1003790 <_realloc_r+0x150>
 1003a1c:	30c00217 	ldw	r3,8(r6)
 1003a20:	30800317 	ldw	r2,12(r6)
 1003a24:	800f883a 	mov	r7,r16
 1003a28:	84000204 	addi	r16,r16,8
 1003a2c:	10c00215 	stw	r3,8(r2)
 1003a30:	18800315 	stw	r2,12(r3)
 1003a34:	003f2306 	br	10036c4 <_realloc_r+0x84>
 1003a38:	8809883a 	mov	r4,r17
 1003a3c:	900b883a 	mov	r5,r18
 1003a40:	10035600 	call	1003560 <memmove>
 1003a44:	003fd006 	br	1003988 <_realloc_r+0x348>
 1003a48:	30800117 	ldw	r2,4(r6)
 1003a4c:	e0c00404 	addi	r3,fp,16
 1003a50:	1108703a 	and	r4,r2,r4
 1003a54:	9905883a 	add	r2,r19,r4
 1003a58:	10ff4d16 	blt	r2,r3,1003790 <_realloc_r+0x150>
 1003a5c:	1705c83a 	sub	r2,r2,fp
 1003a60:	870b883a 	add	r5,r16,fp
 1003a64:	10800054 	ori	r2,r2,1
 1003a68:	28800115 	stw	r2,4(r5)
 1003a6c:	80c00117 	ldw	r3,4(r16)
 1003a70:	00804074 	movhi	r2,257
 1003a74:	10a1f404 	addi	r2,r2,-30768
 1003a78:	b009883a 	mov	r4,r22
 1003a7c:	18c0004c 	andi	r3,r3,1
 1003a80:	e0c6b03a 	or	r3,fp,r3
 1003a84:	11400215 	stw	r5,8(r2)
 1003a88:	80c00115 	stw	r3,4(r16)
 1003a8c:	100568c0 	call	100568c <__malloc_unlock>
 1003a90:	84400204 	addi	r17,r16,8
 1003a94:	003f2006 	br	1003718 <_realloc_r+0xd8>
 1003a98:	98a9883a 	add	r20,r19,r2
 1003a9c:	2509883a 	add	r4,r4,r20
 1003aa0:	e0800404 	addi	r2,fp,16
 1003aa4:	d9000115 	stw	r4,4(sp)
 1003aa8:	20bf7016 	blt	r4,r2,100386c <_realloc_r+0x22c>
 1003aac:	b8c00317 	ldw	r3,12(r23)
 1003ab0:	b8800217 	ldw	r2,8(r23)
 1003ab4:	99bfff04 	addi	r6,r19,-4
 1003ab8:	01400904 	movi	r5,36
 1003abc:	18800215 	stw	r2,8(r3)
 1003ac0:	10c00315 	stw	r3,12(r2)
 1003ac4:	bc400204 	addi	r17,r23,8
 1003ac8:	29804136 	bltu	r5,r6,1003bd0 <_realloc_r+0x590>
 1003acc:	008004c4 	movi	r2,19
 1003ad0:	9009883a 	mov	r4,r18
 1003ad4:	880f883a 	mov	r7,r17
 1003ad8:	11800f2e 	bgeu	r2,r6,1003b18 <_realloc_r+0x4d8>
 1003adc:	90800017 	ldw	r2,0(r18)
 1003ae0:	b9c00404 	addi	r7,r23,16
 1003ae4:	91000204 	addi	r4,r18,8
 1003ae8:	b8800215 	stw	r2,8(r23)
 1003aec:	90c00117 	ldw	r3,4(r18)
 1003af0:	008006c4 	movi	r2,27
 1003af4:	b8c00315 	stw	r3,12(r23)
 1003af8:	1180072e 	bgeu	r2,r6,1003b18 <_realloc_r+0x4d8>
 1003afc:	90c00217 	ldw	r3,8(r18)
 1003b00:	b9c00604 	addi	r7,r23,24
 1003b04:	91000404 	addi	r4,r18,16
 1003b08:	b8c00415 	stw	r3,16(r23)
 1003b0c:	90800317 	ldw	r2,12(r18)
 1003b10:	b8800515 	stw	r2,20(r23)
 1003b14:	31404026 	beq	r6,r5,1003c18 <_realloc_r+0x5d8>
 1003b18:	20800017 	ldw	r2,0(r4)
 1003b1c:	38800015 	stw	r2,0(r7)
 1003b20:	20c00117 	ldw	r3,4(r4)
 1003b24:	38c00115 	stw	r3,4(r7)
 1003b28:	20800217 	ldw	r2,8(r4)
 1003b2c:	38800215 	stw	r2,8(r7)
 1003b30:	d8c00117 	ldw	r3,4(sp)
 1003b34:	bf0b883a 	add	r5,r23,fp
 1003b38:	b009883a 	mov	r4,r22
 1003b3c:	1f05c83a 	sub	r2,r3,fp
 1003b40:	10800054 	ori	r2,r2,1
 1003b44:	28800115 	stw	r2,4(r5)
 1003b48:	b8c00117 	ldw	r3,4(r23)
 1003b4c:	00804074 	movhi	r2,257
 1003b50:	10a1f404 	addi	r2,r2,-30768
 1003b54:	11400215 	stw	r5,8(r2)
 1003b58:	18c0004c 	andi	r3,r3,1
 1003b5c:	e0c6b03a 	or	r3,fp,r3
 1003b60:	b8c00115 	stw	r3,4(r23)
 1003b64:	100568c0 	call	100568c <__malloc_unlock>
 1003b68:	003eeb06 	br	1003718 <_realloc_r+0xd8>
 1003b6c:	20800117 	ldw	r2,4(r4)
 1003b70:	00ffff04 	movi	r3,-4
 1003b74:	800f883a 	mov	r7,r16
 1003b78:	10c4703a 	and	r2,r2,r3
 1003b7c:	98a9883a 	add	r20,r19,r2
 1003b80:	84000204 	addi	r16,r16,8
 1003b84:	003ecf06 	br	10036c4 <_realloc_r+0x84>
 1003b88:	900b883a 	mov	r5,r18
 1003b8c:	8009883a 	mov	r4,r16
 1003b90:	10035600 	call	1003560 <memmove>
 1003b94:	dd000017 	ldw	r20,0(sp)
 1003b98:	b80f883a 	mov	r7,r23
 1003b9c:	003ec906 	br	10036c4 <_realloc_r+0x84>
 1003ba0:	900b883a 	mov	r5,r18
 1003ba4:	8009883a 	mov	r4,r16
 1003ba8:	10035600 	call	1003560 <memmove>
 1003bac:	b80f883a 	mov	r7,r23
 1003bb0:	003ec406 	br	10036c4 <_realloc_r+0x84>
 1003bb4:	90c00417 	ldw	r3,16(r18)
 1003bb8:	89400604 	addi	r5,r17,24
 1003bbc:	91000604 	addi	r4,r18,24
 1003bc0:	88c00415 	stw	r3,16(r17)
 1003bc4:	90800517 	ldw	r2,20(r18)
 1003bc8:	88800515 	stw	r2,20(r17)
 1003bcc:	003f6806 	br	1003970 <_realloc_r+0x330>
 1003bd0:	900b883a 	mov	r5,r18
 1003bd4:	8809883a 	mov	r4,r17
 1003bd8:	10035600 	call	1003560 <memmove>
 1003bdc:	003fd406 	br	1003b30 <_realloc_r+0x4f0>
 1003be0:	90c00417 	ldw	r3,16(r18)
 1003be4:	91000604 	addi	r4,r18,24
 1003be8:	ba000804 	addi	r8,r23,32
 1003bec:	b8c00615 	stw	r3,24(r23)
 1003bf0:	90800517 	ldw	r2,20(r18)
 1003bf4:	b8800715 	stw	r2,28(r23)
 1003bf8:	003f1206 	br	1003844 <_realloc_r+0x204>
 1003bfc:	90c00417 	ldw	r3,16(r18)
 1003c00:	91000604 	addi	r4,r18,24
 1003c04:	ba000804 	addi	r8,r23,32
 1003c08:	b8c00615 	stw	r3,24(r23)
 1003c0c:	90800517 	ldw	r2,20(r18)
 1003c10:	b8800715 	stw	r2,28(r23)
 1003c14:	003f3206 	br	10038e0 <_realloc_r+0x2a0>
 1003c18:	90c00417 	ldw	r3,16(r18)
 1003c1c:	91000604 	addi	r4,r18,24
 1003c20:	b9c00804 	addi	r7,r23,32
 1003c24:	b8c00615 	stw	r3,24(r23)
 1003c28:	90800517 	ldw	r2,20(r18)
 1003c2c:	b8800715 	stw	r2,28(r23)
 1003c30:	003fb906 	br	1003b18 <_realloc_r+0x4d8>

01003c34 <_sbrk_r>:
 1003c34:	defffd04 	addi	sp,sp,-12
 1003c38:	dc000015 	stw	r16,0(sp)
 1003c3c:	04004074 	movhi	r16,257
 1003c40:	842e4704 	addi	r16,r16,-18148
 1003c44:	dc400115 	stw	r17,4(sp)
 1003c48:	80000015 	stw	zero,0(r16)
 1003c4c:	2023883a 	mov	r17,r4
 1003c50:	2809883a 	mov	r4,r5
 1003c54:	dfc00215 	stw	ra,8(sp)
 1003c58:	100588c0 	call	100588c <sbrk>
 1003c5c:	1007883a 	mov	r3,r2
 1003c60:	00bfffc4 	movi	r2,-1
 1003c64:	18800626 	beq	r3,r2,1003c80 <_sbrk_r+0x4c>
 1003c68:	1805883a 	mov	r2,r3
 1003c6c:	dfc00217 	ldw	ra,8(sp)
 1003c70:	dc400117 	ldw	r17,4(sp)
 1003c74:	dc000017 	ldw	r16,0(sp)
 1003c78:	dec00304 	addi	sp,sp,12
 1003c7c:	f800283a 	ret
 1003c80:	80800017 	ldw	r2,0(r16)
 1003c84:	103ff826 	beq	r2,zero,1003c68 <_sbrk_r+0x34>
 1003c88:	88800015 	stw	r2,0(r17)
 1003c8c:	1805883a 	mov	r2,r3
 1003c90:	dfc00217 	ldw	ra,8(sp)
 1003c94:	dc400117 	ldw	r17,4(sp)
 1003c98:	dc000017 	ldw	r16,0(sp)
 1003c9c:	dec00304 	addi	sp,sp,12
 1003ca0:	f800283a 	ret

01003ca4 <__swsetup_r>:
 1003ca4:	00804074 	movhi	r2,257
 1003ca8:	10a78e04 	addi	r2,r2,-25032
 1003cac:	10c00017 	ldw	r3,0(r2)
 1003cb0:	defffd04 	addi	sp,sp,-12
 1003cb4:	dc400115 	stw	r17,4(sp)
 1003cb8:	dc000015 	stw	r16,0(sp)
 1003cbc:	dfc00215 	stw	ra,8(sp)
 1003cc0:	2023883a 	mov	r17,r4
 1003cc4:	2821883a 	mov	r16,r5
 1003cc8:	18000226 	beq	r3,zero,1003cd4 <__swsetup_r+0x30>
 1003ccc:	18800e17 	ldw	r2,56(r3)
 1003cd0:	10001f26 	beq	r2,zero,1003d50 <__swsetup_r+0xac>
 1003cd4:	8100030b 	ldhu	r4,12(r16)
 1003cd8:	2080020c 	andi	r2,r4,8
 1003cdc:	10002826 	beq	r2,zero,1003d80 <__swsetup_r+0xdc>
 1003ce0:	81400417 	ldw	r5,16(r16)
 1003ce4:	28001d26 	beq	r5,zero,1003d5c <__swsetup_r+0xb8>
 1003ce8:	2080004c 	andi	r2,r4,1
 1003cec:	1005003a 	cmpeq	r2,r2,zero
 1003cf0:	10000b26 	beq	r2,zero,1003d20 <__swsetup_r+0x7c>
 1003cf4:	2080008c 	andi	r2,r4,2
 1003cf8:	10001226 	beq	r2,zero,1003d44 <__swsetup_r+0xa0>
 1003cfc:	0005883a 	mov	r2,zero
 1003d00:	80800215 	stw	r2,8(r16)
 1003d04:	28000b26 	beq	r5,zero,1003d34 <__swsetup_r+0x90>
 1003d08:	0005883a 	mov	r2,zero
 1003d0c:	dfc00217 	ldw	ra,8(sp)
 1003d10:	dc400117 	ldw	r17,4(sp)
 1003d14:	dc000017 	ldw	r16,0(sp)
 1003d18:	dec00304 	addi	sp,sp,12
 1003d1c:	f800283a 	ret
 1003d20:	80800517 	ldw	r2,20(r16)
 1003d24:	80000215 	stw	zero,8(r16)
 1003d28:	0085c83a 	sub	r2,zero,r2
 1003d2c:	80800615 	stw	r2,24(r16)
 1003d30:	283ff51e 	bne	r5,zero,1003d08 <__swsetup_r+0x64>
 1003d34:	2080200c 	andi	r2,r4,128
 1003d38:	103ff326 	beq	r2,zero,1003d08 <__swsetup_r+0x64>
 1003d3c:	00bfffc4 	movi	r2,-1
 1003d40:	003ff206 	br	1003d0c <__swsetup_r+0x68>
 1003d44:	80800517 	ldw	r2,20(r16)
 1003d48:	80800215 	stw	r2,8(r16)
 1003d4c:	003fed06 	br	1003d04 <__swsetup_r+0x60>
 1003d50:	1809883a 	mov	r4,r3
 1003d54:	10040780 	call	1004078 <__sinit>
 1003d58:	003fde06 	br	1003cd4 <__swsetup_r+0x30>
 1003d5c:	20c0a00c 	andi	r3,r4,640
 1003d60:	00808004 	movi	r2,512
 1003d64:	18bfe026 	beq	r3,r2,1003ce8 <__swsetup_r+0x44>
 1003d68:	8809883a 	mov	r4,r17
 1003d6c:	800b883a 	mov	r5,r16
 1003d70:	10048900 	call	1004890 <__smakebuf_r>
 1003d74:	8100030b 	ldhu	r4,12(r16)
 1003d78:	81400417 	ldw	r5,16(r16)
 1003d7c:	003fda06 	br	1003ce8 <__swsetup_r+0x44>
 1003d80:	2080040c 	andi	r2,r4,16
 1003d84:	103fed26 	beq	r2,zero,1003d3c <__swsetup_r+0x98>
 1003d88:	2080010c 	andi	r2,r4,4
 1003d8c:	10001226 	beq	r2,zero,1003dd8 <__swsetup_r+0x134>
 1003d90:	81400c17 	ldw	r5,48(r16)
 1003d94:	28000526 	beq	r5,zero,1003dac <__swsetup_r+0x108>
 1003d98:	80801004 	addi	r2,r16,64
 1003d9c:	28800226 	beq	r5,r2,1003da8 <__swsetup_r+0x104>
 1003da0:	8809883a 	mov	r4,r17
 1003da4:	10043fc0 	call	10043fc <_free_r>
 1003da8:	80000c15 	stw	zero,48(r16)
 1003dac:	8080030b 	ldhu	r2,12(r16)
 1003db0:	81400417 	ldw	r5,16(r16)
 1003db4:	80000115 	stw	zero,4(r16)
 1003db8:	10bff6cc 	andi	r2,r2,65499
 1003dbc:	8080030d 	sth	r2,12(r16)
 1003dc0:	81400015 	stw	r5,0(r16)
 1003dc4:	8080030b 	ldhu	r2,12(r16)
 1003dc8:	10800214 	ori	r2,r2,8
 1003dcc:	113fffcc 	andi	r4,r2,65535
 1003dd0:	8080030d 	sth	r2,12(r16)
 1003dd4:	003fc306 	br	1003ce4 <__swsetup_r+0x40>
 1003dd8:	81400417 	ldw	r5,16(r16)
 1003ddc:	003ff906 	br	1003dc4 <__swsetup_r+0x120>

01003de0 <_fflush_r>:
 1003de0:	defffb04 	addi	sp,sp,-20
 1003de4:	dcc00315 	stw	r19,12(sp)
 1003de8:	dc800215 	stw	r18,8(sp)
 1003dec:	dfc00415 	stw	ra,16(sp)
 1003df0:	dc400115 	stw	r17,4(sp)
 1003df4:	dc000015 	stw	r16,0(sp)
 1003df8:	2027883a 	mov	r19,r4
 1003dfc:	2825883a 	mov	r18,r5
 1003e00:	20000226 	beq	r4,zero,1003e0c <_fflush_r+0x2c>
 1003e04:	20800e17 	ldw	r2,56(r4)
 1003e08:	10005626 	beq	r2,zero,1003f64 <_fflush_r+0x184>
 1003e0c:	9100030b 	ldhu	r4,12(r18)
 1003e10:	20ffffcc 	andi	r3,r4,65535
 1003e14:	18e0001c 	xori	r3,r3,32768
 1003e18:	18e00004 	addi	r3,r3,-32768
 1003e1c:	1880020c 	andi	r2,r3,8
 1003e20:	1000261e 	bne	r2,zero,1003ebc <_fflush_r+0xdc>
 1003e24:	90c00117 	ldw	r3,4(r18)
 1003e28:	20820014 	ori	r2,r4,2048
 1003e2c:	9080030d 	sth	r2,12(r18)
 1003e30:	1009883a 	mov	r4,r2
 1003e34:	00c0400e 	bge	zero,r3,1003f38 <_fflush_r+0x158>
 1003e38:	92000a17 	ldw	r8,40(r18)
 1003e3c:	40004026 	beq	r8,zero,1003f40 <_fflush_r+0x160>
 1003e40:	2084000c 	andi	r2,r4,4096
 1003e44:	10005326 	beq	r2,zero,1003f94 <_fflush_r+0x1b4>
 1003e48:	94001417 	ldw	r16,80(r18)
 1003e4c:	9080030b 	ldhu	r2,12(r18)
 1003e50:	1080010c 	andi	r2,r2,4
 1003e54:	1000481e 	bne	r2,zero,1003f78 <_fflush_r+0x198>
 1003e58:	91400717 	ldw	r5,28(r18)
 1003e5c:	9809883a 	mov	r4,r19
 1003e60:	800d883a 	mov	r6,r16
 1003e64:	000f883a 	mov	r7,zero
 1003e68:	403ee83a 	callr	r8
 1003e6c:	8080261e 	bne	r16,r2,1003f08 <_fflush_r+0x128>
 1003e70:	9080030b 	ldhu	r2,12(r18)
 1003e74:	91000417 	ldw	r4,16(r18)
 1003e78:	90000115 	stw	zero,4(r18)
 1003e7c:	10bdffcc 	andi	r2,r2,63487
 1003e80:	10ffffcc 	andi	r3,r2,65535
 1003e84:	18c4000c 	andi	r3,r3,4096
 1003e88:	9080030d 	sth	r2,12(r18)
 1003e8c:	91000015 	stw	r4,0(r18)
 1003e90:	18002b26 	beq	r3,zero,1003f40 <_fflush_r+0x160>
 1003e94:	0007883a 	mov	r3,zero
 1003e98:	1805883a 	mov	r2,r3
 1003e9c:	94001415 	stw	r16,80(r18)
 1003ea0:	dfc00417 	ldw	ra,16(sp)
 1003ea4:	dcc00317 	ldw	r19,12(sp)
 1003ea8:	dc800217 	ldw	r18,8(sp)
 1003eac:	dc400117 	ldw	r17,4(sp)
 1003eb0:	dc000017 	ldw	r16,0(sp)
 1003eb4:	dec00504 	addi	sp,sp,20
 1003eb8:	f800283a 	ret
 1003ebc:	94400417 	ldw	r17,16(r18)
 1003ec0:	88001f26 	beq	r17,zero,1003f40 <_fflush_r+0x160>
 1003ec4:	90800017 	ldw	r2,0(r18)
 1003ec8:	18c000cc 	andi	r3,r3,3
 1003ecc:	94400015 	stw	r17,0(r18)
 1003ed0:	1461c83a 	sub	r16,r2,r17
 1003ed4:	18002526 	beq	r3,zero,1003f6c <_fflush_r+0x18c>
 1003ed8:	0005883a 	mov	r2,zero
 1003edc:	90800215 	stw	r2,8(r18)
 1003ee0:	0400170e 	bge	zero,r16,1003f40 <_fflush_r+0x160>
 1003ee4:	90c00917 	ldw	r3,36(r18)
 1003ee8:	91400717 	ldw	r5,28(r18)
 1003eec:	880d883a 	mov	r6,r17
 1003ef0:	800f883a 	mov	r7,r16
 1003ef4:	9809883a 	mov	r4,r19
 1003ef8:	183ee83a 	callr	r3
 1003efc:	88a3883a 	add	r17,r17,r2
 1003f00:	80a1c83a 	sub	r16,r16,r2
 1003f04:	00bff616 	blt	zero,r2,1003ee0 <_fflush_r+0x100>
 1003f08:	9080030b 	ldhu	r2,12(r18)
 1003f0c:	00ffffc4 	movi	r3,-1
 1003f10:	10801014 	ori	r2,r2,64
 1003f14:	9080030d 	sth	r2,12(r18)
 1003f18:	1805883a 	mov	r2,r3
 1003f1c:	dfc00417 	ldw	ra,16(sp)
 1003f20:	dcc00317 	ldw	r19,12(sp)
 1003f24:	dc800217 	ldw	r18,8(sp)
 1003f28:	dc400117 	ldw	r17,4(sp)
 1003f2c:	dc000017 	ldw	r16,0(sp)
 1003f30:	dec00504 	addi	sp,sp,20
 1003f34:	f800283a 	ret
 1003f38:	90800f17 	ldw	r2,60(r18)
 1003f3c:	00bfbe16 	blt	zero,r2,1003e38 <_fflush_r+0x58>
 1003f40:	0007883a 	mov	r3,zero
 1003f44:	1805883a 	mov	r2,r3
 1003f48:	dfc00417 	ldw	ra,16(sp)
 1003f4c:	dcc00317 	ldw	r19,12(sp)
 1003f50:	dc800217 	ldw	r18,8(sp)
 1003f54:	dc400117 	ldw	r17,4(sp)
 1003f58:	dc000017 	ldw	r16,0(sp)
 1003f5c:	dec00504 	addi	sp,sp,20
 1003f60:	f800283a 	ret
 1003f64:	10040780 	call	1004078 <__sinit>
 1003f68:	003fa806 	br	1003e0c <_fflush_r+0x2c>
 1003f6c:	90800517 	ldw	r2,20(r18)
 1003f70:	90800215 	stw	r2,8(r18)
 1003f74:	003fda06 	br	1003ee0 <_fflush_r+0x100>
 1003f78:	90800117 	ldw	r2,4(r18)
 1003f7c:	90c00c17 	ldw	r3,48(r18)
 1003f80:	80a1c83a 	sub	r16,r16,r2
 1003f84:	183fb426 	beq	r3,zero,1003e58 <_fflush_r+0x78>
 1003f88:	90800f17 	ldw	r2,60(r18)
 1003f8c:	80a1c83a 	sub	r16,r16,r2
 1003f90:	003fb106 	br	1003e58 <_fflush_r+0x78>
 1003f94:	91400717 	ldw	r5,28(r18)
 1003f98:	9809883a 	mov	r4,r19
 1003f9c:	000d883a 	mov	r6,zero
 1003fa0:	01c00044 	movi	r7,1
 1003fa4:	403ee83a 	callr	r8
 1003fa8:	1021883a 	mov	r16,r2
 1003fac:	00bfffc4 	movi	r2,-1
 1003fb0:	80800226 	beq	r16,r2,1003fbc <_fflush_r+0x1dc>
 1003fb4:	92000a17 	ldw	r8,40(r18)
 1003fb8:	003fa406 	br	1003e4c <_fflush_r+0x6c>
 1003fbc:	98c00017 	ldw	r3,0(r19)
 1003fc0:	00800744 	movi	r2,29
 1003fc4:	18bfde26 	beq	r3,r2,1003f40 <_fflush_r+0x160>
 1003fc8:	9080030b 	ldhu	r2,12(r18)
 1003fcc:	8007883a 	mov	r3,r16
 1003fd0:	10801014 	ori	r2,r2,64
 1003fd4:	9080030d 	sth	r2,12(r18)
 1003fd8:	003fcf06 	br	1003f18 <_fflush_r+0x138>

01003fdc <fflush>:
 1003fdc:	01404034 	movhi	r5,256
 1003fe0:	294f7804 	addi	r5,r5,15840
 1003fe4:	2007883a 	mov	r3,r4
 1003fe8:	20000526 	beq	r4,zero,1004000 <fflush+0x24>
 1003fec:	00804074 	movhi	r2,257
 1003ff0:	10a78e04 	addi	r2,r2,-25032
 1003ff4:	11000017 	ldw	r4,0(r2)
 1003ff8:	180b883a 	mov	r5,r3
 1003ffc:	1003de01 	jmpi	1003de0 <_fflush_r>
 1004000:	00804074 	movhi	r2,257
 1004004:	10a78f04 	addi	r2,r2,-25028
 1004008:	11000017 	ldw	r4,0(r2)
 100400c:	10047101 	jmpi	1004710 <_fwalk_reent>

01004010 <std>:
 1004010:	00804034 	movhi	r2,256
 1004014:	1092af04 	addi	r2,r2,19132
 1004018:	20800b15 	stw	r2,44(r4)
 100401c:	00804034 	movhi	r2,256
 1004020:	1092ea04 	addi	r2,r2,19368
 1004024:	20800815 	stw	r2,32(r4)
 1004028:	00c04034 	movhi	r3,256
 100402c:	18d2cb04 	addi	r3,r3,19244
 1004030:	00804034 	movhi	r2,256
 1004034:	1092b104 	addi	r2,r2,19140
 1004038:	2140030d 	sth	r5,12(r4)
 100403c:	2180038d 	sth	r6,14(r4)
 1004040:	20c00915 	stw	r3,36(r4)
 1004044:	20800a15 	stw	r2,40(r4)
 1004048:	20000015 	stw	zero,0(r4)
 100404c:	20000115 	stw	zero,4(r4)
 1004050:	20000215 	stw	zero,8(r4)
 1004054:	20000415 	stw	zero,16(r4)
 1004058:	20000515 	stw	zero,20(r4)
 100405c:	20000615 	stw	zero,24(r4)
 1004060:	21000715 	stw	r4,28(r4)
 1004064:	f800283a 	ret

01004068 <__sfp_lock_acquire>:
 1004068:	f800283a 	ret

0100406c <__sfp_lock_release>:
 100406c:	f800283a 	ret

01004070 <__sinit_lock_acquire>:
 1004070:	f800283a 	ret

01004074 <__sinit_lock_release>:
 1004074:	f800283a 	ret

01004078 <__sinit>:
 1004078:	20800e17 	ldw	r2,56(r4)
 100407c:	defffd04 	addi	sp,sp,-12
 1004080:	dc400115 	stw	r17,4(sp)
 1004084:	dc000015 	stw	r16,0(sp)
 1004088:	dfc00215 	stw	ra,8(sp)
 100408c:	04400044 	movi	r17,1
 1004090:	01400104 	movi	r5,4
 1004094:	000d883a 	mov	r6,zero
 1004098:	2021883a 	mov	r16,r4
 100409c:	2200bb04 	addi	r8,r4,748
 10040a0:	200f883a 	mov	r7,r4
 10040a4:	10000526 	beq	r2,zero,10040bc <__sinit+0x44>
 10040a8:	dfc00217 	ldw	ra,8(sp)
 10040ac:	dc400117 	ldw	r17,4(sp)
 10040b0:	dc000017 	ldw	r16,0(sp)
 10040b4:	dec00304 	addi	sp,sp,12
 10040b8:	f800283a 	ret
 10040bc:	21000117 	ldw	r4,4(r4)
 10040c0:	00804034 	movhi	r2,256
 10040c4:	10905704 	addi	r2,r2,16732
 10040c8:	00c000c4 	movi	r3,3
 10040cc:	80800f15 	stw	r2,60(r16)
 10040d0:	80c0b915 	stw	r3,740(r16)
 10040d4:	8200ba15 	stw	r8,744(r16)
 10040d8:	84400e15 	stw	r17,56(r16)
 10040dc:	8000b815 	stw	zero,736(r16)
 10040e0:	10040100 	call	1004010 <std>
 10040e4:	81000217 	ldw	r4,8(r16)
 10040e8:	880d883a 	mov	r6,r17
 10040ec:	800f883a 	mov	r7,r16
 10040f0:	01400284 	movi	r5,10
 10040f4:	10040100 	call	1004010 <std>
 10040f8:	81000317 	ldw	r4,12(r16)
 10040fc:	800f883a 	mov	r7,r16
 1004100:	01400484 	movi	r5,18
 1004104:	01800084 	movi	r6,2
 1004108:	dfc00217 	ldw	ra,8(sp)
 100410c:	dc400117 	ldw	r17,4(sp)
 1004110:	dc000017 	ldw	r16,0(sp)
 1004114:	dec00304 	addi	sp,sp,12
 1004118:	10040101 	jmpi	1004010 <std>

0100411c <__fp_lock>:
 100411c:	0005883a 	mov	r2,zero
 1004120:	f800283a 	ret

01004124 <__fp_unlock>:
 1004124:	0005883a 	mov	r2,zero
 1004128:	f800283a 	ret

0100412c <__fp_unlock_all>:
 100412c:	00804074 	movhi	r2,257
 1004130:	10a78e04 	addi	r2,r2,-25032
 1004134:	11000017 	ldw	r4,0(r2)
 1004138:	01404034 	movhi	r5,256
 100413c:	29504904 	addi	r5,r5,16676
 1004140:	10047d81 	jmpi	10047d8 <_fwalk>

01004144 <__fp_lock_all>:
 1004144:	00804074 	movhi	r2,257
 1004148:	10a78e04 	addi	r2,r2,-25032
 100414c:	11000017 	ldw	r4,0(r2)
 1004150:	01404034 	movhi	r5,256
 1004154:	29504704 	addi	r5,r5,16668
 1004158:	10047d81 	jmpi	10047d8 <_fwalk>

0100415c <_cleanup_r>:
 100415c:	01404034 	movhi	r5,256
 1004160:	29538004 	addi	r5,r5,19968
 1004164:	10047d81 	jmpi	10047d8 <_fwalk>

01004168 <_cleanup>:
 1004168:	00804074 	movhi	r2,257
 100416c:	10a78f04 	addi	r2,r2,-25028
 1004170:	11000017 	ldw	r4,0(r2)
 1004174:	100415c1 	jmpi	100415c <_cleanup_r>

01004178 <__sfmoreglue>:
 1004178:	defffc04 	addi	sp,sp,-16
 100417c:	dc400115 	stw	r17,4(sp)
 1004180:	2c401724 	muli	r17,r5,92
 1004184:	dc800215 	stw	r18,8(sp)
 1004188:	2825883a 	mov	r18,r5
 100418c:	89400304 	addi	r5,r17,12
 1004190:	dc000015 	stw	r16,0(sp)
 1004194:	dfc00315 	stw	ra,12(sp)
 1004198:	1002c9c0 	call	1002c9c <_malloc_r>
 100419c:	0021883a 	mov	r16,zero
 10041a0:	880d883a 	mov	r6,r17
 10041a4:	000b883a 	mov	r5,zero
 10041a8:	10000626 	beq	r2,zero,10041c4 <__sfmoreglue+0x4c>
 10041ac:	11000304 	addi	r4,r2,12
 10041b0:	14800115 	stw	r18,4(r2)
 10041b4:	10000015 	stw	zero,0(r2)
 10041b8:	11000215 	stw	r4,8(r2)
 10041bc:	1021883a 	mov	r16,r2
 10041c0:	1004a240 	call	1004a24 <memset>
 10041c4:	8005883a 	mov	r2,r16
 10041c8:	dfc00317 	ldw	ra,12(sp)
 10041cc:	dc800217 	ldw	r18,8(sp)
 10041d0:	dc400117 	ldw	r17,4(sp)
 10041d4:	dc000017 	ldw	r16,0(sp)
 10041d8:	dec00404 	addi	sp,sp,16
 10041dc:	f800283a 	ret

010041e0 <__sfp>:
 10041e0:	defffd04 	addi	sp,sp,-12
 10041e4:	00804074 	movhi	r2,257
 10041e8:	10a78f04 	addi	r2,r2,-25028
 10041ec:	dc000015 	stw	r16,0(sp)
 10041f0:	14000017 	ldw	r16,0(r2)
 10041f4:	dc400115 	stw	r17,4(sp)
 10041f8:	dfc00215 	stw	ra,8(sp)
 10041fc:	80800e17 	ldw	r2,56(r16)
 1004200:	2023883a 	mov	r17,r4
 1004204:	10002626 	beq	r2,zero,10042a0 <__sfp+0xc0>
 1004208:	8400b804 	addi	r16,r16,736
 100420c:	80800117 	ldw	r2,4(r16)
 1004210:	81000217 	ldw	r4,8(r16)
 1004214:	10ffffc4 	addi	r3,r2,-1
 1004218:	18000916 	blt	r3,zero,1004240 <__sfp+0x60>
 100421c:	2080030f 	ldh	r2,12(r4)
 1004220:	10000b26 	beq	r2,zero,1004250 <__sfp+0x70>
 1004224:	017fffc4 	movi	r5,-1
 1004228:	00000206 	br	1004234 <__sfp+0x54>
 100422c:	2080030f 	ldh	r2,12(r4)
 1004230:	10000726 	beq	r2,zero,1004250 <__sfp+0x70>
 1004234:	18ffffc4 	addi	r3,r3,-1
 1004238:	21001704 	addi	r4,r4,92
 100423c:	197ffb1e 	bne	r3,r5,100422c <__sfp+0x4c>
 1004240:	80800017 	ldw	r2,0(r16)
 1004244:	10001926 	beq	r2,zero,10042ac <__sfp+0xcc>
 1004248:	1021883a 	mov	r16,r2
 100424c:	003fef06 	br	100420c <__sfp+0x2c>
 1004250:	00bfffc4 	movi	r2,-1
 1004254:	00c00044 	movi	r3,1
 1004258:	2080038d 	sth	r2,14(r4)
 100425c:	20c0030d 	sth	r3,12(r4)
 1004260:	20000015 	stw	zero,0(r4)
 1004264:	20000215 	stw	zero,8(r4)
 1004268:	20000115 	stw	zero,4(r4)
 100426c:	20000415 	stw	zero,16(r4)
 1004270:	20000515 	stw	zero,20(r4)
 1004274:	20000615 	stw	zero,24(r4)
 1004278:	20000c15 	stw	zero,48(r4)
 100427c:	20000d15 	stw	zero,52(r4)
 1004280:	20001115 	stw	zero,68(r4)
 1004284:	20001215 	stw	zero,72(r4)
 1004288:	2005883a 	mov	r2,r4
 100428c:	dfc00217 	ldw	ra,8(sp)
 1004290:	dc400117 	ldw	r17,4(sp)
 1004294:	dc000017 	ldw	r16,0(sp)
 1004298:	dec00304 	addi	sp,sp,12
 100429c:	f800283a 	ret
 10042a0:	8009883a 	mov	r4,r16
 10042a4:	10040780 	call	1004078 <__sinit>
 10042a8:	003fd706 	br	1004208 <__sfp+0x28>
 10042ac:	8809883a 	mov	r4,r17
 10042b0:	01400104 	movi	r5,4
 10042b4:	10041780 	call	1004178 <__sfmoreglue>
 10042b8:	80800015 	stw	r2,0(r16)
 10042bc:	103fe21e 	bne	r2,zero,1004248 <__sfp+0x68>
 10042c0:	00800304 	movi	r2,12
 10042c4:	0009883a 	mov	r4,zero
 10042c8:	88800015 	stw	r2,0(r17)
 10042cc:	003fee06 	br	1004288 <__sfp+0xa8>

010042d0 <_malloc_trim_r>:
 10042d0:	defffb04 	addi	sp,sp,-20
 10042d4:	dcc00315 	stw	r19,12(sp)
 10042d8:	04c04074 	movhi	r19,257
 10042dc:	9ce1f404 	addi	r19,r19,-30768
 10042e0:	dc800215 	stw	r18,8(sp)
 10042e4:	dc400115 	stw	r17,4(sp)
 10042e8:	dc000015 	stw	r16,0(sp)
 10042ec:	2823883a 	mov	r17,r5
 10042f0:	2025883a 	mov	r18,r4
 10042f4:	dfc00415 	stw	ra,16(sp)
 10042f8:	100566c0 	call	100566c <__malloc_lock>
 10042fc:	98800217 	ldw	r2,8(r19)
 1004300:	9009883a 	mov	r4,r18
 1004304:	000b883a 	mov	r5,zero
 1004308:	10c00117 	ldw	r3,4(r2)
 100430c:	00bfff04 	movi	r2,-4
 1004310:	18a0703a 	and	r16,r3,r2
 1004314:	8463c83a 	sub	r17,r16,r17
 1004318:	8c43fbc4 	addi	r17,r17,4079
 100431c:	8822d33a 	srli	r17,r17,12
 1004320:	0083ffc4 	movi	r2,4095
 1004324:	8c7fffc4 	addi	r17,r17,-1
 1004328:	8822933a 	slli	r17,r17,12
 100432c:	1440060e 	bge	r2,r17,1004348 <_malloc_trim_r+0x78>
 1004330:	1003c340 	call	1003c34 <_sbrk_r>
 1004334:	98c00217 	ldw	r3,8(r19)
 1004338:	9009883a 	mov	r4,r18
 100433c:	044bc83a 	sub	r5,zero,r17
 1004340:	80c7883a 	add	r3,r16,r3
 1004344:	10c00926 	beq	r2,r3,100436c <_malloc_trim_r+0x9c>
 1004348:	100568c0 	call	100568c <__malloc_unlock>
 100434c:	0005883a 	mov	r2,zero
 1004350:	dfc00417 	ldw	ra,16(sp)
 1004354:	dcc00317 	ldw	r19,12(sp)
 1004358:	dc800217 	ldw	r18,8(sp)
 100435c:	dc400117 	ldw	r17,4(sp)
 1004360:	dc000017 	ldw	r16,0(sp)
 1004364:	dec00504 	addi	sp,sp,20
 1004368:	f800283a 	ret
 100436c:	9009883a 	mov	r4,r18
 1004370:	1003c340 	call	1003c34 <_sbrk_r>
 1004374:	844dc83a 	sub	r6,r16,r17
 1004378:	00ffffc4 	movi	r3,-1
 100437c:	9009883a 	mov	r4,r18
 1004380:	000b883a 	mov	r5,zero
 1004384:	01c04074 	movhi	r7,257
 1004388:	39ee4e04 	addi	r7,r7,-18120
 100438c:	31800054 	ori	r6,r6,1
 1004390:	10c00926 	beq	r2,r3,10043b8 <_malloc_trim_r+0xe8>
 1004394:	38800017 	ldw	r2,0(r7)
 1004398:	98c00217 	ldw	r3,8(r19)
 100439c:	9009883a 	mov	r4,r18
 10043a0:	1445c83a 	sub	r2,r2,r17
 10043a4:	38800015 	stw	r2,0(r7)
 10043a8:	19800115 	stw	r6,4(r3)
 10043ac:	100568c0 	call	100568c <__malloc_unlock>
 10043b0:	00800044 	movi	r2,1
 10043b4:	003fe606 	br	1004350 <_malloc_trim_r+0x80>
 10043b8:	1003c340 	call	1003c34 <_sbrk_r>
 10043bc:	99800217 	ldw	r6,8(r19)
 10043c0:	100f883a 	mov	r7,r2
 10043c4:	9009883a 	mov	r4,r18
 10043c8:	1187c83a 	sub	r3,r2,r6
 10043cc:	008003c4 	movi	r2,15
 10043d0:	19400054 	ori	r5,r3,1
 10043d4:	10ffdc0e 	bge	r2,r3,1004348 <_malloc_trim_r+0x78>
 10043d8:	00804074 	movhi	r2,257
 10043dc:	10a79104 	addi	r2,r2,-25020
 10043e0:	10c00017 	ldw	r3,0(r2)
 10043e4:	00804074 	movhi	r2,257
 10043e8:	10ae4e04 	addi	r2,r2,-18120
 10043ec:	31400115 	stw	r5,4(r6)
 10043f0:	38c7c83a 	sub	r3,r7,r3
 10043f4:	10c00015 	stw	r3,0(r2)
 10043f8:	003fd306 	br	1004348 <_malloc_trim_r+0x78>

010043fc <_free_r>:
 10043fc:	defffd04 	addi	sp,sp,-12
 1004400:	dc400115 	stw	r17,4(sp)
 1004404:	dc000015 	stw	r16,0(sp)
 1004408:	dfc00215 	stw	ra,8(sp)
 100440c:	2821883a 	mov	r16,r5
 1004410:	2023883a 	mov	r17,r4
 1004414:	28005a26 	beq	r5,zero,1004580 <_free_r+0x184>
 1004418:	100566c0 	call	100566c <__malloc_lock>
 100441c:	823ffe04 	addi	r8,r16,-8
 1004420:	41400117 	ldw	r5,4(r8)
 1004424:	00bfff84 	movi	r2,-2
 1004428:	02804074 	movhi	r10,257
 100442c:	52a1f404 	addi	r10,r10,-30768
 1004430:	288e703a 	and	r7,r5,r2
 1004434:	41cd883a 	add	r6,r8,r7
 1004438:	30c00117 	ldw	r3,4(r6)
 100443c:	51000217 	ldw	r4,8(r10)
 1004440:	00bfff04 	movi	r2,-4
 1004444:	1892703a 	and	r9,r3,r2
 1004448:	5017883a 	mov	r11,r10
 100444c:	31006726 	beq	r6,r4,10045ec <_free_r+0x1f0>
 1004450:	2880004c 	andi	r2,r5,1
 1004454:	1005003a 	cmpeq	r2,r2,zero
 1004458:	32400115 	stw	r9,4(r6)
 100445c:	10001a1e 	bne	r2,zero,10044c8 <_free_r+0xcc>
 1004460:	000b883a 	mov	r5,zero
 1004464:	3247883a 	add	r3,r6,r9
 1004468:	18800117 	ldw	r2,4(r3)
 100446c:	1080004c 	andi	r2,r2,1
 1004470:	1000231e 	bne	r2,zero,1004500 <_free_r+0x104>
 1004474:	280ac03a 	cmpne	r5,r5,zero
 1004478:	3a4f883a 	add	r7,r7,r9
 100447c:	2800451e 	bne	r5,zero,1004594 <_free_r+0x198>
 1004480:	31000217 	ldw	r4,8(r6)
 1004484:	00804074 	movhi	r2,257
 1004488:	10a1f604 	addi	r2,r2,-30760
 100448c:	20807b26 	beq	r4,r2,100467c <_free_r+0x280>
 1004490:	30800317 	ldw	r2,12(r6)
 1004494:	3a07883a 	add	r3,r7,r8
 1004498:	19c00015 	stw	r7,0(r3)
 100449c:	11000215 	stw	r4,8(r2)
 10044a0:	20800315 	stw	r2,12(r4)
 10044a4:	38800054 	ori	r2,r7,1
 10044a8:	40800115 	stw	r2,4(r8)
 10044ac:	28001a26 	beq	r5,zero,1004518 <_free_r+0x11c>
 10044b0:	8809883a 	mov	r4,r17
 10044b4:	dfc00217 	ldw	ra,8(sp)
 10044b8:	dc400117 	ldw	r17,4(sp)
 10044bc:	dc000017 	ldw	r16,0(sp)
 10044c0:	dec00304 	addi	sp,sp,12
 10044c4:	100568c1 	jmpi	100568c <__malloc_unlock>
 10044c8:	80bffe17 	ldw	r2,-8(r16)
 10044cc:	50c00204 	addi	r3,r10,8
 10044d0:	4091c83a 	sub	r8,r8,r2
 10044d4:	41000217 	ldw	r4,8(r8)
 10044d8:	388f883a 	add	r7,r7,r2
 10044dc:	20c06126 	beq	r4,r3,1004664 <_free_r+0x268>
 10044e0:	40800317 	ldw	r2,12(r8)
 10044e4:	3247883a 	add	r3,r6,r9
 10044e8:	000b883a 	mov	r5,zero
 10044ec:	11000215 	stw	r4,8(r2)
 10044f0:	20800315 	stw	r2,12(r4)
 10044f4:	18800117 	ldw	r2,4(r3)
 10044f8:	1080004c 	andi	r2,r2,1
 10044fc:	103fdd26 	beq	r2,zero,1004474 <_free_r+0x78>
 1004500:	38800054 	ori	r2,r7,1
 1004504:	3a07883a 	add	r3,r7,r8
 1004508:	280ac03a 	cmpne	r5,r5,zero
 100450c:	40800115 	stw	r2,4(r8)
 1004510:	19c00015 	stw	r7,0(r3)
 1004514:	283fe61e 	bne	r5,zero,10044b0 <_free_r+0xb4>
 1004518:	00807fc4 	movi	r2,511
 100451c:	11c01f2e 	bgeu	r2,r7,100459c <_free_r+0x1a0>
 1004520:	3806d27a 	srli	r3,r7,9
 1004524:	1800481e 	bne	r3,zero,1004648 <_free_r+0x24c>
 1004528:	3804d0fa 	srli	r2,r7,3
 100452c:	100690fa 	slli	r3,r2,3
 1004530:	1acd883a 	add	r6,r3,r11
 1004534:	31400217 	ldw	r5,8(r6)
 1004538:	31405926 	beq	r6,r5,10046a0 <_free_r+0x2a4>
 100453c:	28800117 	ldw	r2,4(r5)
 1004540:	00ffff04 	movi	r3,-4
 1004544:	10c4703a 	and	r2,r2,r3
 1004548:	3880022e 	bgeu	r7,r2,1004554 <_free_r+0x158>
 100454c:	29400217 	ldw	r5,8(r5)
 1004550:	317ffa1e 	bne	r6,r5,100453c <_free_r+0x140>
 1004554:	29800317 	ldw	r6,12(r5)
 1004558:	41800315 	stw	r6,12(r8)
 100455c:	41400215 	stw	r5,8(r8)
 1004560:	8809883a 	mov	r4,r17
 1004564:	2a000315 	stw	r8,12(r5)
 1004568:	32000215 	stw	r8,8(r6)
 100456c:	dfc00217 	ldw	ra,8(sp)
 1004570:	dc400117 	ldw	r17,4(sp)
 1004574:	dc000017 	ldw	r16,0(sp)
 1004578:	dec00304 	addi	sp,sp,12
 100457c:	100568c1 	jmpi	100568c <__malloc_unlock>
 1004580:	dfc00217 	ldw	ra,8(sp)
 1004584:	dc400117 	ldw	r17,4(sp)
 1004588:	dc000017 	ldw	r16,0(sp)
 100458c:	dec00304 	addi	sp,sp,12
 1004590:	f800283a 	ret
 1004594:	31000217 	ldw	r4,8(r6)
 1004598:	003fbd06 	br	1004490 <_free_r+0x94>
 100459c:	3806d0fa 	srli	r3,r7,3
 10045a0:	00800044 	movi	r2,1
 10045a4:	51400117 	ldw	r5,4(r10)
 10045a8:	180890fa 	slli	r4,r3,3
 10045ac:	1807d0ba 	srai	r3,r3,2
 10045b0:	22c9883a 	add	r4,r4,r11
 10045b4:	21800217 	ldw	r6,8(r4)
 10045b8:	10c4983a 	sll	r2,r2,r3
 10045bc:	41000315 	stw	r4,12(r8)
 10045c0:	41800215 	stw	r6,8(r8)
 10045c4:	288ab03a 	or	r5,r5,r2
 10045c8:	22000215 	stw	r8,8(r4)
 10045cc:	8809883a 	mov	r4,r17
 10045d0:	51400115 	stw	r5,4(r10)
 10045d4:	32000315 	stw	r8,12(r6)
 10045d8:	dfc00217 	ldw	ra,8(sp)
 10045dc:	dc400117 	ldw	r17,4(sp)
 10045e0:	dc000017 	ldw	r16,0(sp)
 10045e4:	dec00304 	addi	sp,sp,12
 10045e8:	100568c1 	jmpi	100568c <__malloc_unlock>
 10045ec:	2880004c 	andi	r2,r5,1
 10045f0:	3a4d883a 	add	r6,r7,r9
 10045f4:	1000071e 	bne	r2,zero,1004614 <_free_r+0x218>
 10045f8:	80bffe17 	ldw	r2,-8(r16)
 10045fc:	4091c83a 	sub	r8,r8,r2
 1004600:	41000317 	ldw	r4,12(r8)
 1004604:	40c00217 	ldw	r3,8(r8)
 1004608:	308d883a 	add	r6,r6,r2
 100460c:	20c00215 	stw	r3,8(r4)
 1004610:	19000315 	stw	r4,12(r3)
 1004614:	00804074 	movhi	r2,257
 1004618:	10a79004 	addi	r2,r2,-25024
 100461c:	11000017 	ldw	r4,0(r2)
 1004620:	30c00054 	ori	r3,r6,1
 1004624:	52000215 	stw	r8,8(r10)
 1004628:	40c00115 	stw	r3,4(r8)
 100462c:	313fa036 	bltu	r6,r4,10044b0 <_free_r+0xb4>
 1004630:	00804074 	movhi	r2,257
 1004634:	10ae4404 	addi	r2,r2,-18160
 1004638:	11400017 	ldw	r5,0(r2)
 100463c:	8809883a 	mov	r4,r17
 1004640:	10042d00 	call	10042d0 <_malloc_trim_r>
 1004644:	003f9a06 	br	10044b0 <_free_r+0xb4>
 1004648:	00800104 	movi	r2,4
 100464c:	10c0072e 	bgeu	r2,r3,100466c <_free_r+0x270>
 1004650:	00800504 	movi	r2,20
 1004654:	10c01936 	bltu	r2,r3,10046bc <_free_r+0x2c0>
 1004658:	188016c4 	addi	r2,r3,91
 100465c:	100690fa 	slli	r3,r2,3
 1004660:	003fb306 	br	1004530 <_free_r+0x134>
 1004664:	01400044 	movi	r5,1
 1004668:	003f7e06 	br	1004464 <_free_r+0x68>
 100466c:	3804d1ba 	srli	r2,r7,6
 1004670:	10800e04 	addi	r2,r2,56
 1004674:	100690fa 	slli	r3,r2,3
 1004678:	003fad06 	br	1004530 <_free_r+0x134>
 100467c:	22000315 	stw	r8,12(r4)
 1004680:	22000215 	stw	r8,8(r4)
 1004684:	3a05883a 	add	r2,r7,r8
 1004688:	38c00054 	ori	r3,r7,1
 100468c:	11c00015 	stw	r7,0(r2)
 1004690:	41000215 	stw	r4,8(r8)
 1004694:	40c00115 	stw	r3,4(r8)
 1004698:	41000315 	stw	r4,12(r8)
 100469c:	003f8406 	br	10044b0 <_free_r+0xb4>
 10046a0:	1005d0ba 	srai	r2,r2,2
 10046a4:	00c00044 	movi	r3,1
 10046a8:	51000117 	ldw	r4,4(r10)
 10046ac:	1886983a 	sll	r3,r3,r2
 10046b0:	20c8b03a 	or	r4,r4,r3
 10046b4:	51000115 	stw	r4,4(r10)
 10046b8:	003fa706 	br	1004558 <_free_r+0x15c>
 10046bc:	00801504 	movi	r2,84
 10046c0:	10c00436 	bltu	r2,r3,10046d4 <_free_r+0x2d8>
 10046c4:	3804d33a 	srli	r2,r7,12
 10046c8:	10801b84 	addi	r2,r2,110
 10046cc:	100690fa 	slli	r3,r2,3
 10046d0:	003f9706 	br	1004530 <_free_r+0x134>
 10046d4:	00805504 	movi	r2,340
 10046d8:	10c00436 	bltu	r2,r3,10046ec <_free_r+0x2f0>
 10046dc:	3804d3fa 	srli	r2,r7,15
 10046e0:	10801dc4 	addi	r2,r2,119
 10046e4:	100690fa 	slli	r3,r2,3
 10046e8:	003f9106 	br	1004530 <_free_r+0x134>
 10046ec:	00815504 	movi	r2,1364
 10046f0:	10c0032e 	bgeu	r2,r3,1004700 <_free_r+0x304>
 10046f4:	00801f84 	movi	r2,126
 10046f8:	00c0fc04 	movi	r3,1008
 10046fc:	003f8c06 	br	1004530 <_free_r+0x134>
 1004700:	3804d4ba 	srli	r2,r7,18
 1004704:	10801f04 	addi	r2,r2,124
 1004708:	100690fa 	slli	r3,r2,3
 100470c:	003f8806 	br	1004530 <_free_r+0x134>

01004710 <_fwalk_reent>:
 1004710:	defff704 	addi	sp,sp,-36
 1004714:	dcc00315 	stw	r19,12(sp)
 1004718:	24c0b804 	addi	r19,r4,736
 100471c:	dd800615 	stw	r22,24(sp)
 1004720:	dd400515 	stw	r21,20(sp)
 1004724:	dfc00815 	stw	ra,32(sp)
 1004728:	ddc00715 	stw	r23,28(sp)
 100472c:	dd000415 	stw	r20,16(sp)
 1004730:	dc800215 	stw	r18,8(sp)
 1004734:	dc400115 	stw	r17,4(sp)
 1004738:	dc000015 	stw	r16,0(sp)
 100473c:	202b883a 	mov	r21,r4
 1004740:	282d883a 	mov	r22,r5
 1004744:	10040680 	call	1004068 <__sfp_lock_acquire>
 1004748:	98002126 	beq	r19,zero,10047d0 <_fwalk_reent+0xc0>
 100474c:	002f883a 	mov	r23,zero
 1004750:	9c800117 	ldw	r18,4(r19)
 1004754:	9c000217 	ldw	r16,8(r19)
 1004758:	90bfffc4 	addi	r2,r18,-1
 100475c:	10000d16 	blt	r2,zero,1004794 <_fwalk_reent+0x84>
 1004760:	0023883a 	mov	r17,zero
 1004764:	053fffc4 	movi	r20,-1
 1004768:	8080030f 	ldh	r2,12(r16)
 100476c:	8c400044 	addi	r17,r17,1
 1004770:	10000626 	beq	r2,zero,100478c <_fwalk_reent+0x7c>
 1004774:	8080038f 	ldh	r2,14(r16)
 1004778:	800b883a 	mov	r5,r16
 100477c:	a809883a 	mov	r4,r21
 1004780:	15000226 	beq	r2,r20,100478c <_fwalk_reent+0x7c>
 1004784:	b03ee83a 	callr	r22
 1004788:	b8aeb03a 	or	r23,r23,r2
 100478c:	84001704 	addi	r16,r16,92
 1004790:	947ff51e 	bne	r18,r17,1004768 <_fwalk_reent+0x58>
 1004794:	9cc00017 	ldw	r19,0(r19)
 1004798:	983fed1e 	bne	r19,zero,1004750 <_fwalk_reent+0x40>
 100479c:	100406c0 	call	100406c <__sfp_lock_release>
 10047a0:	b805883a 	mov	r2,r23
 10047a4:	dfc00817 	ldw	ra,32(sp)
 10047a8:	ddc00717 	ldw	r23,28(sp)
 10047ac:	dd800617 	ldw	r22,24(sp)
 10047b0:	dd400517 	ldw	r21,20(sp)
 10047b4:	dd000417 	ldw	r20,16(sp)
 10047b8:	dcc00317 	ldw	r19,12(sp)
 10047bc:	dc800217 	ldw	r18,8(sp)
 10047c0:	dc400117 	ldw	r17,4(sp)
 10047c4:	dc000017 	ldw	r16,0(sp)
 10047c8:	dec00904 	addi	sp,sp,36
 10047cc:	f800283a 	ret
 10047d0:	002f883a 	mov	r23,zero
 10047d4:	003ff106 	br	100479c <_fwalk_reent+0x8c>

010047d8 <_fwalk>:
 10047d8:	defff804 	addi	sp,sp,-32
 10047dc:	dcc00315 	stw	r19,12(sp)
 10047e0:	24c0b804 	addi	r19,r4,736
 10047e4:	dd400515 	stw	r21,20(sp)
 10047e8:	dfc00715 	stw	ra,28(sp)
 10047ec:	dd800615 	stw	r22,24(sp)
 10047f0:	dd000415 	stw	r20,16(sp)
 10047f4:	dc800215 	stw	r18,8(sp)
 10047f8:	dc400115 	stw	r17,4(sp)
 10047fc:	dc000015 	stw	r16,0(sp)
 1004800:	282b883a 	mov	r21,r5
 1004804:	10040680 	call	1004068 <__sfp_lock_acquire>
 1004808:	98001f26 	beq	r19,zero,1004888 <_fwalk+0xb0>
 100480c:	002d883a 	mov	r22,zero
 1004810:	9c800117 	ldw	r18,4(r19)
 1004814:	9c000217 	ldw	r16,8(r19)
 1004818:	90bfffc4 	addi	r2,r18,-1
 100481c:	10000c16 	blt	r2,zero,1004850 <_fwalk+0x78>
 1004820:	0023883a 	mov	r17,zero
 1004824:	053fffc4 	movi	r20,-1
 1004828:	8080030f 	ldh	r2,12(r16)
 100482c:	8c400044 	addi	r17,r17,1
 1004830:	10000526 	beq	r2,zero,1004848 <_fwalk+0x70>
 1004834:	8080038f 	ldh	r2,14(r16)
 1004838:	8009883a 	mov	r4,r16
 100483c:	15000226 	beq	r2,r20,1004848 <_fwalk+0x70>
 1004840:	a83ee83a 	callr	r21
 1004844:	b0acb03a 	or	r22,r22,r2
 1004848:	84001704 	addi	r16,r16,92
 100484c:	947ff61e 	bne	r18,r17,1004828 <_fwalk+0x50>
 1004850:	9cc00017 	ldw	r19,0(r19)
 1004854:	983fee1e 	bne	r19,zero,1004810 <_fwalk+0x38>
 1004858:	100406c0 	call	100406c <__sfp_lock_release>
 100485c:	b005883a 	mov	r2,r22
 1004860:	dfc00717 	ldw	ra,28(sp)
 1004864:	dd800617 	ldw	r22,24(sp)
 1004868:	dd400517 	ldw	r21,20(sp)
 100486c:	dd000417 	ldw	r20,16(sp)
 1004870:	dcc00317 	ldw	r19,12(sp)
 1004874:	dc800217 	ldw	r18,8(sp)
 1004878:	dc400117 	ldw	r17,4(sp)
 100487c:	dc000017 	ldw	r16,0(sp)
 1004880:	dec00804 	addi	sp,sp,32
 1004884:	f800283a 	ret
 1004888:	002d883a 	mov	r22,zero
 100488c:	003ff206 	br	1004858 <_fwalk+0x80>

01004890 <__smakebuf_r>:
 1004890:	2880030b 	ldhu	r2,12(r5)
 1004894:	deffed04 	addi	sp,sp,-76
 1004898:	dc401015 	stw	r17,64(sp)
 100489c:	1080008c 	andi	r2,r2,2
 10048a0:	dc000f15 	stw	r16,60(sp)
 10048a4:	dfc01215 	stw	ra,72(sp)
 10048a8:	dc801115 	stw	r18,68(sp)
 10048ac:	2821883a 	mov	r16,r5
 10048b0:	2023883a 	mov	r17,r4
 10048b4:	10000b26 	beq	r2,zero,10048e4 <__smakebuf_r+0x54>
 10048b8:	28c010c4 	addi	r3,r5,67
 10048bc:	00800044 	movi	r2,1
 10048c0:	28800515 	stw	r2,20(r5)
 10048c4:	28c00415 	stw	r3,16(r5)
 10048c8:	28c00015 	stw	r3,0(r5)
 10048cc:	dfc01217 	ldw	ra,72(sp)
 10048d0:	dc801117 	ldw	r18,68(sp)
 10048d4:	dc401017 	ldw	r17,64(sp)
 10048d8:	dc000f17 	ldw	r16,60(sp)
 10048dc:	dec01304 	addi	sp,sp,76
 10048e0:	f800283a 	ret
 10048e4:	2940038f 	ldh	r5,14(r5)
 10048e8:	28002116 	blt	r5,zero,1004970 <__smakebuf_r+0xe0>
 10048ec:	d80d883a 	mov	r6,sp
 10048f0:	1004e140 	call	1004e14 <_fstat_r>
 10048f4:	10001e16 	blt	r2,zero,1004970 <__smakebuf_r+0xe0>
 10048f8:	d8800117 	ldw	r2,4(sp)
 10048fc:	00e00014 	movui	r3,32768
 1004900:	113c000c 	andi	r4,r2,61440
 1004904:	20c03126 	beq	r4,r3,10049cc <__smakebuf_r+0x13c>
 1004908:	8080030b 	ldhu	r2,12(r16)
 100490c:	00c80004 	movi	r3,8192
 1004910:	10820014 	ori	r2,r2,2048
 1004914:	8080030d 	sth	r2,12(r16)
 1004918:	20c01e26 	beq	r4,r3,1004994 <__smakebuf_r+0x104>
 100491c:	04810004 	movi	r18,1024
 1004920:	8809883a 	mov	r4,r17
 1004924:	900b883a 	mov	r5,r18
 1004928:	1002c9c0 	call	1002c9c <_malloc_r>
 100492c:	1009883a 	mov	r4,r2
 1004930:	10003126 	beq	r2,zero,10049f8 <__smakebuf_r+0x168>
 1004934:	80c0030b 	ldhu	r3,12(r16)
 1004938:	00804034 	movhi	r2,256
 100493c:	10905704 	addi	r2,r2,16732
 1004940:	88800f15 	stw	r2,60(r17)
 1004944:	18c02014 	ori	r3,r3,128
 1004948:	84800515 	stw	r18,20(r16)
 100494c:	80c0030d 	sth	r3,12(r16)
 1004950:	81000415 	stw	r4,16(r16)
 1004954:	81000015 	stw	r4,0(r16)
 1004958:	dfc01217 	ldw	ra,72(sp)
 100495c:	dc801117 	ldw	r18,68(sp)
 1004960:	dc401017 	ldw	r17,64(sp)
 1004964:	dc000f17 	ldw	r16,60(sp)
 1004968:	dec01304 	addi	sp,sp,76
 100496c:	f800283a 	ret
 1004970:	80c0030b 	ldhu	r3,12(r16)
 1004974:	1880200c 	andi	r2,r3,128
 1004978:	10000426 	beq	r2,zero,100498c <__smakebuf_r+0xfc>
 100497c:	04801004 	movi	r18,64
 1004980:	18820014 	ori	r2,r3,2048
 1004984:	8080030d 	sth	r2,12(r16)
 1004988:	003fe506 	br	1004920 <__smakebuf_r+0x90>
 100498c:	04810004 	movi	r18,1024
 1004990:	003ffb06 	br	1004980 <__smakebuf_r+0xf0>
 1004994:	8140038f 	ldh	r5,14(r16)
 1004998:	8809883a 	mov	r4,r17
 100499c:	1004e880 	call	1004e88 <_isatty_r>
 10049a0:	103fde26 	beq	r2,zero,100491c <__smakebuf_r+0x8c>
 10049a4:	8080030b 	ldhu	r2,12(r16)
 10049a8:	80c010c4 	addi	r3,r16,67
 10049ac:	04810004 	movi	r18,1024
 10049b0:	10800054 	ori	r2,r2,1
 10049b4:	8080030d 	sth	r2,12(r16)
 10049b8:	00800044 	movi	r2,1
 10049bc:	80c00415 	stw	r3,16(r16)
 10049c0:	80800515 	stw	r2,20(r16)
 10049c4:	80c00015 	stw	r3,0(r16)
 10049c8:	003fd506 	br	1004920 <__smakebuf_r+0x90>
 10049cc:	80c00a17 	ldw	r3,40(r16)
 10049d0:	00804034 	movhi	r2,256
 10049d4:	1092b104 	addi	r2,r2,19140
 10049d8:	18bfcb1e 	bne	r3,r2,1004908 <__smakebuf_r+0x78>
 10049dc:	8080030b 	ldhu	r2,12(r16)
 10049e0:	00c10004 	movi	r3,1024
 10049e4:	1825883a 	mov	r18,r3
 10049e8:	10c4b03a 	or	r2,r2,r3
 10049ec:	8080030d 	sth	r2,12(r16)
 10049f0:	80c01315 	stw	r3,76(r16)
 10049f4:	003fca06 	br	1004920 <__smakebuf_r+0x90>
 10049f8:	8100030b 	ldhu	r4,12(r16)
 10049fc:	2080800c 	andi	r2,r4,512
 1004a00:	103fb21e 	bne	r2,zero,10048cc <__smakebuf_r+0x3c>
 1004a04:	80c010c4 	addi	r3,r16,67
 1004a08:	21000094 	ori	r4,r4,2
 1004a0c:	00800044 	movi	r2,1
 1004a10:	80800515 	stw	r2,20(r16)
 1004a14:	8100030d 	sth	r4,12(r16)
 1004a18:	80c00415 	stw	r3,16(r16)
 1004a1c:	80c00015 	stw	r3,0(r16)
 1004a20:	003faa06 	br	10048cc <__smakebuf_r+0x3c>

01004a24 <memset>:
 1004a24:	008000c4 	movi	r2,3
 1004a28:	29403fcc 	andi	r5,r5,255
 1004a2c:	2007883a 	mov	r3,r4
 1004a30:	1180022e 	bgeu	r2,r6,1004a3c <memset+0x18>
 1004a34:	2084703a 	and	r2,r4,r2
 1004a38:	10000826 	beq	r2,zero,1004a5c <memset+0x38>
 1004a3c:	30000526 	beq	r6,zero,1004a54 <memset+0x30>
 1004a40:	2805883a 	mov	r2,r5
 1004a44:	30cd883a 	add	r6,r6,r3
 1004a48:	18800005 	stb	r2,0(r3)
 1004a4c:	18c00044 	addi	r3,r3,1
 1004a50:	19bffd1e 	bne	r3,r6,1004a48 <memset+0x24>
 1004a54:	2005883a 	mov	r2,r4
 1004a58:	f800283a 	ret
 1004a5c:	2804923a 	slli	r2,r5,8
 1004a60:	020003c4 	movi	r8,15
 1004a64:	200f883a 	mov	r7,r4
 1004a68:	2884b03a 	or	r2,r5,r2
 1004a6c:	1006943a 	slli	r3,r2,16
 1004a70:	10c6b03a 	or	r3,r2,r3
 1004a74:	41800a2e 	bgeu	r8,r6,1004aa0 <memset+0x7c>
 1004a78:	4005883a 	mov	r2,r8
 1004a7c:	31bffc04 	addi	r6,r6,-16
 1004a80:	38c00015 	stw	r3,0(r7)
 1004a84:	38c00115 	stw	r3,4(r7)
 1004a88:	38c00215 	stw	r3,8(r7)
 1004a8c:	38c00315 	stw	r3,12(r7)
 1004a90:	39c00404 	addi	r7,r7,16
 1004a94:	11bff936 	bltu	r2,r6,1004a7c <memset+0x58>
 1004a98:	008000c4 	movi	r2,3
 1004a9c:	1180052e 	bgeu	r2,r6,1004ab4 <memset+0x90>
 1004aa0:	31bfff04 	addi	r6,r6,-4
 1004aa4:	008000c4 	movi	r2,3
 1004aa8:	38c00015 	stw	r3,0(r7)
 1004aac:	39c00104 	addi	r7,r7,4
 1004ab0:	11bffb36 	bltu	r2,r6,1004aa0 <memset+0x7c>
 1004ab4:	3807883a 	mov	r3,r7
 1004ab8:	003fe006 	br	1004a3c <memset+0x18>

01004abc <__sclose>:
 1004abc:	2940038f 	ldh	r5,14(r5)
 1004ac0:	1004c801 	jmpi	1004c80 <_close_r>

01004ac4 <__sseek>:
 1004ac4:	defffe04 	addi	sp,sp,-8
 1004ac8:	dc000015 	stw	r16,0(sp)
 1004acc:	2821883a 	mov	r16,r5
 1004ad0:	2940038f 	ldh	r5,14(r5)
 1004ad4:	dfc00115 	stw	ra,4(sp)
 1004ad8:	1004ef80 	call	1004ef8 <_lseek_r>
 1004adc:	1007883a 	mov	r3,r2
 1004ae0:	00bfffc4 	movi	r2,-1
 1004ae4:	18800926 	beq	r3,r2,1004b0c <__sseek+0x48>
 1004ae8:	8080030b 	ldhu	r2,12(r16)
 1004aec:	80c01415 	stw	r3,80(r16)
 1004af0:	10840014 	ori	r2,r2,4096
 1004af4:	8080030d 	sth	r2,12(r16)
 1004af8:	1805883a 	mov	r2,r3
 1004afc:	dfc00117 	ldw	ra,4(sp)
 1004b00:	dc000017 	ldw	r16,0(sp)
 1004b04:	dec00204 	addi	sp,sp,8
 1004b08:	f800283a 	ret
 1004b0c:	8080030b 	ldhu	r2,12(r16)
 1004b10:	10bbffcc 	andi	r2,r2,61439
 1004b14:	8080030d 	sth	r2,12(r16)
 1004b18:	1805883a 	mov	r2,r3
 1004b1c:	dfc00117 	ldw	ra,4(sp)
 1004b20:	dc000017 	ldw	r16,0(sp)
 1004b24:	dec00204 	addi	sp,sp,8
 1004b28:	f800283a 	ret

01004b2c <__swrite>:
 1004b2c:	2880030b 	ldhu	r2,12(r5)
 1004b30:	defffb04 	addi	sp,sp,-20
 1004b34:	dcc00315 	stw	r19,12(sp)
 1004b38:	1080400c 	andi	r2,r2,256
 1004b3c:	dc800215 	stw	r18,8(sp)
 1004b40:	dc400115 	stw	r17,4(sp)
 1004b44:	dc000015 	stw	r16,0(sp)
 1004b48:	3027883a 	mov	r19,r6
 1004b4c:	3825883a 	mov	r18,r7
 1004b50:	dfc00415 	stw	ra,16(sp)
 1004b54:	2821883a 	mov	r16,r5
 1004b58:	000d883a 	mov	r6,zero
 1004b5c:	01c00084 	movi	r7,2
 1004b60:	2023883a 	mov	r17,r4
 1004b64:	10000226 	beq	r2,zero,1004b70 <__swrite+0x44>
 1004b68:	2940038f 	ldh	r5,14(r5)
 1004b6c:	1004ef80 	call	1004ef8 <_lseek_r>
 1004b70:	8080030b 	ldhu	r2,12(r16)
 1004b74:	8140038f 	ldh	r5,14(r16)
 1004b78:	8809883a 	mov	r4,r17
 1004b7c:	10bbffcc 	andi	r2,r2,61439
 1004b80:	980d883a 	mov	r6,r19
 1004b84:	900f883a 	mov	r7,r18
 1004b88:	8080030d 	sth	r2,12(r16)
 1004b8c:	dfc00417 	ldw	ra,16(sp)
 1004b90:	dcc00317 	ldw	r19,12(sp)
 1004b94:	dc800217 	ldw	r18,8(sp)
 1004b98:	dc400117 	ldw	r17,4(sp)
 1004b9c:	dc000017 	ldw	r16,0(sp)
 1004ba0:	dec00504 	addi	sp,sp,20
 1004ba4:	1004c081 	jmpi	1004c08 <_write_r>

01004ba8 <__sread>:
 1004ba8:	defffe04 	addi	sp,sp,-8
 1004bac:	dc000015 	stw	r16,0(sp)
 1004bb0:	2821883a 	mov	r16,r5
 1004bb4:	2940038f 	ldh	r5,14(r5)
 1004bb8:	dfc00115 	stw	ra,4(sp)
 1004bbc:	1004f700 	call	1004f70 <_read_r>
 1004bc0:	1007883a 	mov	r3,r2
 1004bc4:	10000816 	blt	r2,zero,1004be8 <__sread+0x40>
 1004bc8:	80801417 	ldw	r2,80(r16)
 1004bcc:	10c5883a 	add	r2,r2,r3
 1004bd0:	80801415 	stw	r2,80(r16)
 1004bd4:	1805883a 	mov	r2,r3
 1004bd8:	dfc00117 	ldw	ra,4(sp)
 1004bdc:	dc000017 	ldw	r16,0(sp)
 1004be0:	dec00204 	addi	sp,sp,8
 1004be4:	f800283a 	ret
 1004be8:	8080030b 	ldhu	r2,12(r16)
 1004bec:	10bbffcc 	andi	r2,r2,61439
 1004bf0:	8080030d 	sth	r2,12(r16)
 1004bf4:	1805883a 	mov	r2,r3
 1004bf8:	dfc00117 	ldw	ra,4(sp)
 1004bfc:	dc000017 	ldw	r16,0(sp)
 1004c00:	dec00204 	addi	sp,sp,8
 1004c04:	f800283a 	ret

01004c08 <_write_r>:
 1004c08:	defffd04 	addi	sp,sp,-12
 1004c0c:	dc000015 	stw	r16,0(sp)
 1004c10:	04004074 	movhi	r16,257
 1004c14:	842e4704 	addi	r16,r16,-18148
 1004c18:	dc400115 	stw	r17,4(sp)
 1004c1c:	80000015 	stw	zero,0(r16)
 1004c20:	2023883a 	mov	r17,r4
 1004c24:	2809883a 	mov	r4,r5
 1004c28:	300b883a 	mov	r5,r6
 1004c2c:	380d883a 	mov	r6,r7
 1004c30:	dfc00215 	stw	ra,8(sp)
 1004c34:	10059480 	call	1005948 <write>
 1004c38:	1007883a 	mov	r3,r2
 1004c3c:	00bfffc4 	movi	r2,-1
 1004c40:	18800626 	beq	r3,r2,1004c5c <_write_r+0x54>
 1004c44:	1805883a 	mov	r2,r3
 1004c48:	dfc00217 	ldw	ra,8(sp)
 1004c4c:	dc400117 	ldw	r17,4(sp)
 1004c50:	dc000017 	ldw	r16,0(sp)
 1004c54:	dec00304 	addi	sp,sp,12
 1004c58:	f800283a 	ret
 1004c5c:	80800017 	ldw	r2,0(r16)
 1004c60:	103ff826 	beq	r2,zero,1004c44 <_write_r+0x3c>
 1004c64:	88800015 	stw	r2,0(r17)
 1004c68:	1805883a 	mov	r2,r3
 1004c6c:	dfc00217 	ldw	ra,8(sp)
 1004c70:	dc400117 	ldw	r17,4(sp)
 1004c74:	dc000017 	ldw	r16,0(sp)
 1004c78:	dec00304 	addi	sp,sp,12
 1004c7c:	f800283a 	ret

01004c80 <_close_r>:
 1004c80:	defffd04 	addi	sp,sp,-12
 1004c84:	dc000015 	stw	r16,0(sp)
 1004c88:	04004074 	movhi	r16,257
 1004c8c:	842e4704 	addi	r16,r16,-18148
 1004c90:	dc400115 	stw	r17,4(sp)
 1004c94:	80000015 	stw	zero,0(r16)
 1004c98:	2023883a 	mov	r17,r4
 1004c9c:	2809883a 	mov	r4,r5
 1004ca0:	dfc00215 	stw	ra,8(sp)
 1004ca4:	1004fe80 	call	1004fe8 <close>
 1004ca8:	1007883a 	mov	r3,r2
 1004cac:	00bfffc4 	movi	r2,-1
 1004cb0:	18800626 	beq	r3,r2,1004ccc <_close_r+0x4c>
 1004cb4:	1805883a 	mov	r2,r3
 1004cb8:	dfc00217 	ldw	ra,8(sp)
 1004cbc:	dc400117 	ldw	r17,4(sp)
 1004cc0:	dc000017 	ldw	r16,0(sp)
 1004cc4:	dec00304 	addi	sp,sp,12
 1004cc8:	f800283a 	ret
 1004ccc:	80800017 	ldw	r2,0(r16)
 1004cd0:	103ff826 	beq	r2,zero,1004cb4 <_close_r+0x34>
 1004cd4:	88800015 	stw	r2,0(r17)
 1004cd8:	1805883a 	mov	r2,r3
 1004cdc:	dfc00217 	ldw	ra,8(sp)
 1004ce0:	dc400117 	ldw	r17,4(sp)
 1004ce4:	dc000017 	ldw	r16,0(sp)
 1004ce8:	dec00304 	addi	sp,sp,12
 1004cec:	f800283a 	ret

01004cf0 <_fclose_r>:
 1004cf0:	defffc04 	addi	sp,sp,-16
 1004cf4:	dc400115 	stw	r17,4(sp)
 1004cf8:	dc000015 	stw	r16,0(sp)
 1004cfc:	dfc00315 	stw	ra,12(sp)
 1004d00:	dc800215 	stw	r18,8(sp)
 1004d04:	2821883a 	mov	r16,r5
 1004d08:	2023883a 	mov	r17,r4
 1004d0c:	28002926 	beq	r5,zero,1004db4 <_fclose_r+0xc4>
 1004d10:	10040680 	call	1004068 <__sfp_lock_acquire>
 1004d14:	88000226 	beq	r17,zero,1004d20 <_fclose_r+0x30>
 1004d18:	88800e17 	ldw	r2,56(r17)
 1004d1c:	10002d26 	beq	r2,zero,1004dd4 <_fclose_r+0xe4>
 1004d20:	8080030f 	ldh	r2,12(r16)
 1004d24:	10002226 	beq	r2,zero,1004db0 <_fclose_r+0xc0>
 1004d28:	8809883a 	mov	r4,r17
 1004d2c:	800b883a 	mov	r5,r16
 1004d30:	1003de00 	call	1003de0 <_fflush_r>
 1004d34:	1025883a 	mov	r18,r2
 1004d38:	80800b17 	ldw	r2,44(r16)
 1004d3c:	10000426 	beq	r2,zero,1004d50 <_fclose_r+0x60>
 1004d40:	81400717 	ldw	r5,28(r16)
 1004d44:	8809883a 	mov	r4,r17
 1004d48:	103ee83a 	callr	r2
 1004d4c:	10002a16 	blt	r2,zero,1004df8 <_fclose_r+0x108>
 1004d50:	8080030b 	ldhu	r2,12(r16)
 1004d54:	1080200c 	andi	r2,r2,128
 1004d58:	1000231e 	bne	r2,zero,1004de8 <_fclose_r+0xf8>
 1004d5c:	81400c17 	ldw	r5,48(r16)
 1004d60:	28000526 	beq	r5,zero,1004d78 <_fclose_r+0x88>
 1004d64:	80801004 	addi	r2,r16,64
 1004d68:	28800226 	beq	r5,r2,1004d74 <_fclose_r+0x84>
 1004d6c:	8809883a 	mov	r4,r17
 1004d70:	10043fc0 	call	10043fc <_free_r>
 1004d74:	80000c15 	stw	zero,48(r16)
 1004d78:	81401117 	ldw	r5,68(r16)
 1004d7c:	28000326 	beq	r5,zero,1004d8c <_fclose_r+0x9c>
 1004d80:	8809883a 	mov	r4,r17
 1004d84:	10043fc0 	call	10043fc <_free_r>
 1004d88:	80001115 	stw	zero,68(r16)
 1004d8c:	8000030d 	sth	zero,12(r16)
 1004d90:	100406c0 	call	100406c <__sfp_lock_release>
 1004d94:	9005883a 	mov	r2,r18
 1004d98:	dfc00317 	ldw	ra,12(sp)
 1004d9c:	dc800217 	ldw	r18,8(sp)
 1004da0:	dc400117 	ldw	r17,4(sp)
 1004da4:	dc000017 	ldw	r16,0(sp)
 1004da8:	dec00404 	addi	sp,sp,16
 1004dac:	f800283a 	ret
 1004db0:	100406c0 	call	100406c <__sfp_lock_release>
 1004db4:	0025883a 	mov	r18,zero
 1004db8:	9005883a 	mov	r2,r18
 1004dbc:	dfc00317 	ldw	ra,12(sp)
 1004dc0:	dc800217 	ldw	r18,8(sp)
 1004dc4:	dc400117 	ldw	r17,4(sp)
 1004dc8:	dc000017 	ldw	r16,0(sp)
 1004dcc:	dec00404 	addi	sp,sp,16
 1004dd0:	f800283a 	ret
 1004dd4:	8809883a 	mov	r4,r17
 1004dd8:	10040780 	call	1004078 <__sinit>
 1004ddc:	8080030f 	ldh	r2,12(r16)
 1004de0:	103fd11e 	bne	r2,zero,1004d28 <_fclose_r+0x38>
 1004de4:	003ff206 	br	1004db0 <_fclose_r+0xc0>
 1004de8:	81400417 	ldw	r5,16(r16)
 1004dec:	8809883a 	mov	r4,r17
 1004df0:	10043fc0 	call	10043fc <_free_r>
 1004df4:	003fd906 	br	1004d5c <_fclose_r+0x6c>
 1004df8:	04bfffc4 	movi	r18,-1
 1004dfc:	003fd406 	br	1004d50 <_fclose_r+0x60>

01004e00 <fclose>:
 1004e00:	00804074 	movhi	r2,257
 1004e04:	10a78e04 	addi	r2,r2,-25032
 1004e08:	200b883a 	mov	r5,r4
 1004e0c:	11000017 	ldw	r4,0(r2)
 1004e10:	1004cf01 	jmpi	1004cf0 <_fclose_r>

01004e14 <_fstat_r>:
 1004e14:	defffd04 	addi	sp,sp,-12
 1004e18:	dc000015 	stw	r16,0(sp)
 1004e1c:	04004074 	movhi	r16,257
 1004e20:	842e4704 	addi	r16,r16,-18148
 1004e24:	dc400115 	stw	r17,4(sp)
 1004e28:	80000015 	stw	zero,0(r16)
 1004e2c:	2023883a 	mov	r17,r4
 1004e30:	2809883a 	mov	r4,r5
 1004e34:	300b883a 	mov	r5,r6
 1004e38:	dfc00215 	stw	ra,8(sp)
 1004e3c:	10051700 	call	1005170 <fstat>
 1004e40:	1007883a 	mov	r3,r2
 1004e44:	00bfffc4 	movi	r2,-1
 1004e48:	18800626 	beq	r3,r2,1004e64 <_fstat_r+0x50>
 1004e4c:	1805883a 	mov	r2,r3
 1004e50:	dfc00217 	ldw	ra,8(sp)
 1004e54:	dc400117 	ldw	r17,4(sp)
 1004e58:	dc000017 	ldw	r16,0(sp)
 1004e5c:	dec00304 	addi	sp,sp,12
 1004e60:	f800283a 	ret
 1004e64:	80800017 	ldw	r2,0(r16)
 1004e68:	103ff826 	beq	r2,zero,1004e4c <_fstat_r+0x38>
 1004e6c:	88800015 	stw	r2,0(r17)
 1004e70:	1805883a 	mov	r2,r3
 1004e74:	dfc00217 	ldw	ra,8(sp)
 1004e78:	dc400117 	ldw	r17,4(sp)
 1004e7c:	dc000017 	ldw	r16,0(sp)
 1004e80:	dec00304 	addi	sp,sp,12
 1004e84:	f800283a 	ret

01004e88 <_isatty_r>:
 1004e88:	defffd04 	addi	sp,sp,-12
 1004e8c:	dc000015 	stw	r16,0(sp)
 1004e90:	04004074 	movhi	r16,257
 1004e94:	842e4704 	addi	r16,r16,-18148
 1004e98:	dc400115 	stw	r17,4(sp)
 1004e9c:	80000015 	stw	zero,0(r16)
 1004ea0:	2023883a 	mov	r17,r4
 1004ea4:	2809883a 	mov	r4,r5
 1004ea8:	dfc00215 	stw	ra,8(sp)
 1004eac:	10052a40 	call	10052a4 <isatty>
 1004eb0:	1007883a 	mov	r3,r2
 1004eb4:	00bfffc4 	movi	r2,-1
 1004eb8:	18800626 	beq	r3,r2,1004ed4 <_isatty_r+0x4c>
 1004ebc:	1805883a 	mov	r2,r3
 1004ec0:	dfc00217 	ldw	ra,8(sp)
 1004ec4:	dc400117 	ldw	r17,4(sp)
 1004ec8:	dc000017 	ldw	r16,0(sp)
 1004ecc:	dec00304 	addi	sp,sp,12
 1004ed0:	f800283a 	ret
 1004ed4:	80800017 	ldw	r2,0(r16)
 1004ed8:	103ff826 	beq	r2,zero,1004ebc <_isatty_r+0x34>
 1004edc:	88800015 	stw	r2,0(r17)
 1004ee0:	1805883a 	mov	r2,r3
 1004ee4:	dfc00217 	ldw	ra,8(sp)
 1004ee8:	dc400117 	ldw	r17,4(sp)
 1004eec:	dc000017 	ldw	r16,0(sp)
 1004ef0:	dec00304 	addi	sp,sp,12
 1004ef4:	f800283a 	ret

01004ef8 <_lseek_r>:
 1004ef8:	defffd04 	addi	sp,sp,-12
 1004efc:	dc000015 	stw	r16,0(sp)
 1004f00:	04004074 	movhi	r16,257
 1004f04:	842e4704 	addi	r16,r16,-18148
 1004f08:	dc400115 	stw	r17,4(sp)
 1004f0c:	80000015 	stw	zero,0(r16)
 1004f10:	2023883a 	mov	r17,r4
 1004f14:	2809883a 	mov	r4,r5
 1004f18:	300b883a 	mov	r5,r6
 1004f1c:	380d883a 	mov	r6,r7
 1004f20:	dfc00215 	stw	ra,8(sp)
 1004f24:	10054b00 	call	10054b0 <lseek>
 1004f28:	1007883a 	mov	r3,r2
 1004f2c:	00bfffc4 	movi	r2,-1
 1004f30:	18800626 	beq	r3,r2,1004f4c <_lseek_r+0x54>
 1004f34:	1805883a 	mov	r2,r3
 1004f38:	dfc00217 	ldw	ra,8(sp)
 1004f3c:	dc400117 	ldw	r17,4(sp)
 1004f40:	dc000017 	ldw	r16,0(sp)
 1004f44:	dec00304 	addi	sp,sp,12
 1004f48:	f800283a 	ret
 1004f4c:	80800017 	ldw	r2,0(r16)
 1004f50:	103ff826 	beq	r2,zero,1004f34 <_lseek_r+0x3c>
 1004f54:	88800015 	stw	r2,0(r17)
 1004f58:	1805883a 	mov	r2,r3
 1004f5c:	dfc00217 	ldw	ra,8(sp)
 1004f60:	dc400117 	ldw	r17,4(sp)
 1004f64:	dc000017 	ldw	r16,0(sp)
 1004f68:	dec00304 	addi	sp,sp,12
 1004f6c:	f800283a 	ret

01004f70 <_read_r>:
 1004f70:	defffd04 	addi	sp,sp,-12
 1004f74:	dc000015 	stw	r16,0(sp)
 1004f78:	04004074 	movhi	r16,257
 1004f7c:	842e4704 	addi	r16,r16,-18148
 1004f80:	dc400115 	stw	r17,4(sp)
 1004f84:	80000015 	stw	zero,0(r16)
 1004f88:	2023883a 	mov	r17,r4
 1004f8c:	2809883a 	mov	r4,r5
 1004f90:	300b883a 	mov	r5,r6
 1004f94:	380d883a 	mov	r6,r7
 1004f98:	dfc00215 	stw	ra,8(sp)
 1004f9c:	10056ac0 	call	10056ac <read>
 1004fa0:	1007883a 	mov	r3,r2
 1004fa4:	00bfffc4 	movi	r2,-1
 1004fa8:	18800626 	beq	r3,r2,1004fc4 <_read_r+0x54>
 1004fac:	1805883a 	mov	r2,r3
 1004fb0:	dfc00217 	ldw	ra,8(sp)
 1004fb4:	dc400117 	ldw	r17,4(sp)
 1004fb8:	dc000017 	ldw	r16,0(sp)
 1004fbc:	dec00304 	addi	sp,sp,12
 1004fc0:	f800283a 	ret
 1004fc4:	80800017 	ldw	r2,0(r16)
 1004fc8:	103ff826 	beq	r2,zero,1004fac <_read_r+0x3c>
 1004fcc:	88800015 	stw	r2,0(r17)
 1004fd0:	1805883a 	mov	r2,r3
 1004fd4:	dfc00217 	ldw	ra,8(sp)
 1004fd8:	dc400117 	ldw	r17,4(sp)
 1004fdc:	dc000017 	ldw	r16,0(sp)
 1004fe0:	dec00304 	addi	sp,sp,12
 1004fe4:	f800283a 	ret

01004fe8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1004fe8:	defff804 	addi	sp,sp,-32
 1004fec:	dfc00715 	stw	ra,28(sp)
 1004ff0:	df000615 	stw	fp,24(sp)
 1004ff4:	df000604 	addi	fp,sp,24
 1004ff8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1004ffc:	e0bffc17 	ldw	r2,-16(fp)
 1005000:	1004803a 	cmplt	r2,r2,zero
 1005004:	1000081e 	bne	r2,zero,1005028 <close+0x40>
 1005008:	e0bffc17 	ldw	r2,-16(fp)
 100500c:	10800324 	muli	r2,r2,12
 1005010:	1007883a 	mov	r3,r2
 1005014:	00804074 	movhi	r2,257
 1005018:	10a30004 	addi	r2,r2,-29696
 100501c:	1887883a 	add	r3,r3,r2
 1005020:	e0ffff15 	stw	r3,-4(fp)
 1005024:	00000106 	br	100502c <close+0x44>
 1005028:	e03fff15 	stw	zero,-4(fp)
 100502c:	e0bfff17 	ldw	r2,-4(fp)
 1005030:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1005034:	e0bffb17 	ldw	r2,-20(fp)
 1005038:	1005003a 	cmpeq	r2,r2,zero
 100503c:	10001d1e 	bne	r2,zero,10050b4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1005040:	e0bffb17 	ldw	r2,-20(fp)
 1005044:	10800017 	ldw	r2,0(r2)
 1005048:	10800417 	ldw	r2,16(r2)
 100504c:	1005003a 	cmpeq	r2,r2,zero
 1005050:	1000071e 	bne	r2,zero,1005070 <close+0x88>
 1005054:	e0bffb17 	ldw	r2,-20(fp)
 1005058:	10800017 	ldw	r2,0(r2)
 100505c:	10800417 	ldw	r2,16(r2)
 1005060:	e13ffb17 	ldw	r4,-20(fp)
 1005064:	103ee83a 	callr	r2
 1005068:	e0bffe15 	stw	r2,-8(fp)
 100506c:	00000106 	br	1005074 <close+0x8c>
 1005070:	e03ffe15 	stw	zero,-8(fp)
 1005074:	e0bffe17 	ldw	r2,-8(fp)
 1005078:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100507c:	e13ffc17 	ldw	r4,-16(fp)
 1005080:	100582c0 	call	100582c <alt_release_fd>
    if (rval < 0)
 1005084:	e0bffa17 	ldw	r2,-24(fp)
 1005088:	1004403a 	cmpge	r2,r2,zero
 100508c:	1000071e 	bne	r2,zero,10050ac <close+0xc4>
    {
      ALT_ERRNO = -rval;
 1005090:	10050e40 	call	10050e4 <alt_get_errno>
 1005094:	e0fffa17 	ldw	r3,-24(fp)
 1005098:	00c7c83a 	sub	r3,zero,r3
 100509c:	10c00015 	stw	r3,0(r2)
      return -1;
 10050a0:	00bfffc4 	movi	r2,-1
 10050a4:	e0bffd15 	stw	r2,-12(fp)
 10050a8:	00000806 	br	10050cc <close+0xe4>
    }
    return 0;
 10050ac:	e03ffd15 	stw	zero,-12(fp)
 10050b0:	00000606 	br	10050cc <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 10050b4:	10050e40 	call	10050e4 <alt_get_errno>
 10050b8:	1007883a 	mov	r3,r2
 10050bc:	00801444 	movi	r2,81
 10050c0:	18800015 	stw	r2,0(r3)
    return -1;
 10050c4:	00bfffc4 	movi	r2,-1
 10050c8:	e0bffd15 	stw	r2,-12(fp)
 10050cc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 10050d0:	e037883a 	mov	sp,fp
 10050d4:	dfc00117 	ldw	ra,4(sp)
 10050d8:	df000017 	ldw	fp,0(sp)
 10050dc:	dec00204 	addi	sp,sp,8
 10050e0:	f800283a 	ret

010050e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10050e4:	defffd04 	addi	sp,sp,-12
 10050e8:	dfc00215 	stw	ra,8(sp)
 10050ec:	df000115 	stw	fp,4(sp)
 10050f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10050f4:	00804074 	movhi	r2,257
 10050f8:	10a79704 	addi	r2,r2,-24996
 10050fc:	10800017 	ldw	r2,0(r2)
 1005100:	1005003a 	cmpeq	r2,r2,zero
 1005104:	1000061e 	bne	r2,zero,1005120 <alt_get_errno+0x3c>
 1005108:	00804074 	movhi	r2,257
 100510c:	10a79704 	addi	r2,r2,-24996
 1005110:	10800017 	ldw	r2,0(r2)
 1005114:	103ee83a 	callr	r2
 1005118:	e0bfff15 	stw	r2,-4(fp)
 100511c:	00000306 	br	100512c <alt_get_errno+0x48>
 1005120:	00804074 	movhi	r2,257
 1005124:	10ae4704 	addi	r2,r2,-18148
 1005128:	e0bfff15 	stw	r2,-4(fp)
 100512c:	e0bfff17 	ldw	r2,-4(fp)
}
 1005130:	e037883a 	mov	sp,fp
 1005134:	dfc00117 	ldw	ra,4(sp)
 1005138:	df000017 	ldw	fp,0(sp)
 100513c:	dec00204 	addi	sp,sp,8
 1005140:	f800283a 	ret

01005144 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1005144:	defffc04 	addi	sp,sp,-16
 1005148:	df000315 	stw	fp,12(sp)
 100514c:	df000304 	addi	fp,sp,12
 1005150:	e13ffd15 	stw	r4,-12(fp)
 1005154:	e17ffe15 	stw	r5,-8(fp)
 1005158:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100515c:	e0bfff17 	ldw	r2,-4(fp)
}
 1005160:	e037883a 	mov	sp,fp
 1005164:	df000017 	ldw	fp,0(sp)
 1005168:	dec00104 	addi	sp,sp,4
 100516c:	f800283a 	ret

01005170 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1005170:	defff904 	addi	sp,sp,-28
 1005174:	dfc00615 	stw	ra,24(sp)
 1005178:	df000515 	stw	fp,20(sp)
 100517c:	df000504 	addi	fp,sp,20
 1005180:	e13ffc15 	stw	r4,-16(fp)
 1005184:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1005188:	e0bffc17 	ldw	r2,-16(fp)
 100518c:	1004803a 	cmplt	r2,r2,zero
 1005190:	1000081e 	bne	r2,zero,10051b4 <fstat+0x44>
 1005194:	e0bffc17 	ldw	r2,-16(fp)
 1005198:	10800324 	muli	r2,r2,12
 100519c:	1007883a 	mov	r3,r2
 10051a0:	00804074 	movhi	r2,257
 10051a4:	10a30004 	addi	r2,r2,-29696
 10051a8:	1887883a 	add	r3,r3,r2
 10051ac:	e0ffff15 	stw	r3,-4(fp)
 10051b0:	00000106 	br	10051b8 <fstat+0x48>
 10051b4:	e03fff15 	stw	zero,-4(fp)
 10051b8:	e0bfff17 	ldw	r2,-4(fp)
 10051bc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 10051c0:	e0bffb17 	ldw	r2,-20(fp)
 10051c4:	1005003a 	cmpeq	r2,r2,zero
 10051c8:	1000121e 	bne	r2,zero,1005214 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 10051cc:	e0bffb17 	ldw	r2,-20(fp)
 10051d0:	10800017 	ldw	r2,0(r2)
 10051d4:	10800817 	ldw	r2,32(r2)
 10051d8:	1005003a 	cmpeq	r2,r2,zero
 10051dc:	1000081e 	bne	r2,zero,1005200 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 10051e0:	e0bffb17 	ldw	r2,-20(fp)
 10051e4:	10800017 	ldw	r2,0(r2)
 10051e8:	10800817 	ldw	r2,32(r2)
 10051ec:	e13ffb17 	ldw	r4,-20(fp)
 10051f0:	e17ffd17 	ldw	r5,-12(fp)
 10051f4:	103ee83a 	callr	r2
 10051f8:	e0bffe15 	stw	r2,-8(fp)
 10051fc:	00000b06 	br	100522c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1005200:	e0fffd17 	ldw	r3,-12(fp)
 1005204:	00880004 	movi	r2,8192
 1005208:	18800115 	stw	r2,4(r3)
      return 0;
 100520c:	e03ffe15 	stw	zero,-8(fp)
 1005210:	00000606 	br	100522c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1005214:	10052440 	call	1005244 <alt_get_errno>
 1005218:	1007883a 	mov	r3,r2
 100521c:	00801444 	movi	r2,81
 1005220:	18800015 	stw	r2,0(r3)
    return -1;
 1005224:	00bfffc4 	movi	r2,-1
 1005228:	e0bffe15 	stw	r2,-8(fp)
 100522c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1005230:	e037883a 	mov	sp,fp
 1005234:	dfc00117 	ldw	ra,4(sp)
 1005238:	df000017 	ldw	fp,0(sp)
 100523c:	dec00204 	addi	sp,sp,8
 1005240:	f800283a 	ret

01005244 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1005244:	defffd04 	addi	sp,sp,-12
 1005248:	dfc00215 	stw	ra,8(sp)
 100524c:	df000115 	stw	fp,4(sp)
 1005250:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1005254:	00804074 	movhi	r2,257
 1005258:	10a79704 	addi	r2,r2,-24996
 100525c:	10800017 	ldw	r2,0(r2)
 1005260:	1005003a 	cmpeq	r2,r2,zero
 1005264:	1000061e 	bne	r2,zero,1005280 <alt_get_errno+0x3c>
 1005268:	00804074 	movhi	r2,257
 100526c:	10a79704 	addi	r2,r2,-24996
 1005270:	10800017 	ldw	r2,0(r2)
 1005274:	103ee83a 	callr	r2
 1005278:	e0bfff15 	stw	r2,-4(fp)
 100527c:	00000306 	br	100528c <alt_get_errno+0x48>
 1005280:	00804074 	movhi	r2,257
 1005284:	10ae4704 	addi	r2,r2,-18148
 1005288:	e0bfff15 	stw	r2,-4(fp)
 100528c:	e0bfff17 	ldw	r2,-4(fp)
}
 1005290:	e037883a 	mov	sp,fp
 1005294:	dfc00117 	ldw	ra,4(sp)
 1005298:	df000017 	ldw	fp,0(sp)
 100529c:	dec00204 	addi	sp,sp,8
 10052a0:	f800283a 	ret

010052a4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 10052a4:	deffeb04 	addi	sp,sp,-84
 10052a8:	dfc01415 	stw	ra,80(sp)
 10052ac:	df001315 	stw	fp,76(sp)
 10052b0:	df001304 	addi	fp,sp,76
 10052b4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10052b8:	e0bffd17 	ldw	r2,-12(fp)
 10052bc:	1004803a 	cmplt	r2,r2,zero
 10052c0:	1000081e 	bne	r2,zero,10052e4 <isatty+0x40>
 10052c4:	e0bffd17 	ldw	r2,-12(fp)
 10052c8:	10800324 	muli	r2,r2,12
 10052cc:	1007883a 	mov	r3,r2
 10052d0:	00804074 	movhi	r2,257
 10052d4:	10a30004 	addi	r2,r2,-29696
 10052d8:	1887883a 	add	r3,r3,r2
 10052dc:	e0ffff15 	stw	r3,-4(fp)
 10052e0:	00000106 	br	10052e8 <isatty+0x44>
 10052e4:	e03fff15 	stw	zero,-4(fp)
 10052e8:	e0bfff17 	ldw	r2,-4(fp)
 10052ec:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 10052f0:	e0bfed17 	ldw	r2,-76(fp)
 10052f4:	1005003a 	cmpeq	r2,r2,zero
 10052f8:	10000f1e 	bne	r2,zero,1005338 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 10052fc:	e0bfed17 	ldw	r2,-76(fp)
 1005300:	10800017 	ldw	r2,0(r2)
 1005304:	10800817 	ldw	r2,32(r2)
 1005308:	1004c03a 	cmpne	r2,r2,zero
 100530c:	1000031e 	bne	r2,zero,100531c <isatty+0x78>
    {
      return 1;
 1005310:	00800044 	movi	r2,1
 1005314:	e0bffe15 	stw	r2,-8(fp)
 1005318:	00000c06 	br	100534c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100531c:	e17fee04 	addi	r5,fp,-72
 1005320:	e13ffd17 	ldw	r4,-12(fp)
 1005324:	10051700 	call	1005170 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1005328:	e0bfef17 	ldw	r2,-68(fp)
 100532c:	10880020 	cmpeqi	r2,r2,8192
 1005330:	e0bffe15 	stw	r2,-8(fp)
 1005334:	00000506 	br	100534c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1005338:	10053640 	call	1005364 <alt_get_errno>
 100533c:	1007883a 	mov	r3,r2
 1005340:	00801444 	movi	r2,81
 1005344:	18800015 	stw	r2,0(r3)
    return 0;
 1005348:	e03ffe15 	stw	zero,-8(fp)
 100534c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1005350:	e037883a 	mov	sp,fp
 1005354:	dfc00117 	ldw	ra,4(sp)
 1005358:	df000017 	ldw	fp,0(sp)
 100535c:	dec00204 	addi	sp,sp,8
 1005360:	f800283a 	ret

01005364 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1005364:	defffd04 	addi	sp,sp,-12
 1005368:	dfc00215 	stw	ra,8(sp)
 100536c:	df000115 	stw	fp,4(sp)
 1005370:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1005374:	00804074 	movhi	r2,257
 1005378:	10a79704 	addi	r2,r2,-24996
 100537c:	10800017 	ldw	r2,0(r2)
 1005380:	1005003a 	cmpeq	r2,r2,zero
 1005384:	1000061e 	bne	r2,zero,10053a0 <alt_get_errno+0x3c>
 1005388:	00804074 	movhi	r2,257
 100538c:	10a79704 	addi	r2,r2,-24996
 1005390:	10800017 	ldw	r2,0(r2)
 1005394:	103ee83a 	callr	r2
 1005398:	e0bfff15 	stw	r2,-4(fp)
 100539c:	00000306 	br	10053ac <alt_get_errno+0x48>
 10053a0:	00804074 	movhi	r2,257
 10053a4:	10ae4704 	addi	r2,r2,-18148
 10053a8:	e0bfff15 	stw	r2,-4(fp)
 10053ac:	e0bfff17 	ldw	r2,-4(fp)
}
 10053b0:	e037883a 	mov	sp,fp
 10053b4:	dfc00117 	ldw	ra,4(sp)
 10053b8:	df000017 	ldw	fp,0(sp)
 10053bc:	dec00204 	addi	sp,sp,8
 10053c0:	f800283a 	ret

010053c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 10053c4:	defffe04 	addi	sp,sp,-8
 10053c8:	dfc00115 	stw	ra,4(sp)
 10053cc:	df000015 	stw	fp,0(sp)
 10053d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 10053d4:	01004074 	movhi	r4,257
 10053d8:	21279c04 	addi	r4,r4,-24976
 10053dc:	01404074 	movhi	r5,257
 10053e0:	2960f404 	addi	r5,r5,-31792
 10053e4:	01804074 	movhi	r6,257
 10053e8:	31a79c04 	addi	r6,r6,-24976
 10053ec:	10054440 	call	1005444 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 10053f0:	01004034 	movhi	r4,256
 10053f4:	21000804 	addi	r4,r4,32
 10053f8:	01404034 	movhi	r5,256
 10053fc:	29400804 	addi	r5,r5,32
 1005400:	01804034 	movhi	r6,256
 1005404:	31806e04 	addi	r6,r6,440
 1005408:	10054440 	call	1005444 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100540c:	01004074 	movhi	r4,257
 1005410:	21209304 	addi	r4,r4,-32180
 1005414:	01404074 	movhi	r5,257
 1005418:	29609304 	addi	r5,r5,-32180
 100541c:	01804074 	movhi	r6,257
 1005420:	31a0f404 	addi	r6,r6,-31792
 1005424:	10054440 	call	1005444 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1005428:	10071700 	call	1007170 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100542c:	10074240 	call	1007424 <alt_icache_flush_all>
}
 1005430:	e037883a 	mov	sp,fp
 1005434:	dfc00117 	ldw	ra,4(sp)
 1005438:	df000017 	ldw	fp,0(sp)
 100543c:	dec00204 	addi	sp,sp,8
 1005440:	f800283a 	ret

01005444 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1005444:	defffc04 	addi	sp,sp,-16
 1005448:	df000315 	stw	fp,12(sp)
 100544c:	df000304 	addi	fp,sp,12
 1005450:	e13ffd15 	stw	r4,-12(fp)
 1005454:	e17ffe15 	stw	r5,-8(fp)
 1005458:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100545c:	e0fffe17 	ldw	r3,-8(fp)
 1005460:	e0bffd17 	ldw	r2,-12(fp)
 1005464:	18800e26 	beq	r3,r2,10054a0 <alt_load_section+0x5c>
  {
    while( to != end )
 1005468:	00000a06 	br	1005494 <alt_load_section+0x50>
    {
      *to++ = *from++;
 100546c:	e0bffd17 	ldw	r2,-12(fp)
 1005470:	10c00017 	ldw	r3,0(r2)
 1005474:	e0bffe17 	ldw	r2,-8(fp)
 1005478:	10c00015 	stw	r3,0(r2)
 100547c:	e0bffe17 	ldw	r2,-8(fp)
 1005480:	10800104 	addi	r2,r2,4
 1005484:	e0bffe15 	stw	r2,-8(fp)
 1005488:	e0bffd17 	ldw	r2,-12(fp)
 100548c:	10800104 	addi	r2,r2,4
 1005490:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1005494:	e0fffe17 	ldw	r3,-8(fp)
 1005498:	e0bfff17 	ldw	r2,-4(fp)
 100549c:	18bff31e 	bne	r3,r2,100546c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 10054a0:	e037883a 	mov	sp,fp
 10054a4:	df000017 	ldw	fp,0(sp)
 10054a8:	dec00104 	addi	sp,sp,4
 10054ac:	f800283a 	ret

010054b0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 10054b0:	defff804 	addi	sp,sp,-32
 10054b4:	dfc00715 	stw	ra,28(sp)
 10054b8:	df000615 	stw	fp,24(sp)
 10054bc:	df000604 	addi	fp,sp,24
 10054c0:	e13ffc15 	stw	r4,-16(fp)
 10054c4:	e17ffd15 	stw	r5,-12(fp)
 10054c8:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 10054cc:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10054d0:	e0bffc17 	ldw	r2,-16(fp)
 10054d4:	1004803a 	cmplt	r2,r2,zero
 10054d8:	1000081e 	bne	r2,zero,10054fc <lseek+0x4c>
 10054dc:	e0bffc17 	ldw	r2,-16(fp)
 10054e0:	10800324 	muli	r2,r2,12
 10054e4:	1007883a 	mov	r3,r2
 10054e8:	00804074 	movhi	r2,257
 10054ec:	10a30004 	addi	r2,r2,-29696
 10054f0:	1887883a 	add	r3,r3,r2
 10054f4:	e0ffff15 	stw	r3,-4(fp)
 10054f8:	00000106 	br	1005500 <lseek+0x50>
 10054fc:	e03fff15 	stw	zero,-4(fp)
 1005500:	e0bfff17 	ldw	r2,-4(fp)
 1005504:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1005508:	e0bffb17 	ldw	r2,-20(fp)
 100550c:	1005003a 	cmpeq	r2,r2,zero
 1005510:	1000111e 	bne	r2,zero,1005558 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1005514:	e0bffb17 	ldw	r2,-20(fp)
 1005518:	10800017 	ldw	r2,0(r2)
 100551c:	10800717 	ldw	r2,28(r2)
 1005520:	1005003a 	cmpeq	r2,r2,zero
 1005524:	1000091e 	bne	r2,zero,100554c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1005528:	e0bffb17 	ldw	r2,-20(fp)
 100552c:	10800017 	ldw	r2,0(r2)
 1005530:	10800717 	ldw	r2,28(r2)
 1005534:	e13ffb17 	ldw	r4,-20(fp)
 1005538:	e17ffd17 	ldw	r5,-12(fp)
 100553c:	e1bffe17 	ldw	r6,-8(fp)
 1005540:	103ee83a 	callr	r2
 1005544:	e0bffa15 	stw	r2,-24(fp)
 1005548:	00000506 	br	1005560 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100554c:	00bfde84 	movi	r2,-134
 1005550:	e0bffa15 	stw	r2,-24(fp)
 1005554:	00000206 	br	1005560 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 1005558:	00bfebc4 	movi	r2,-81
 100555c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 1005560:	e0bffa17 	ldw	r2,-24(fp)
 1005564:	1004403a 	cmpge	r2,r2,zero
 1005568:	1000071e 	bne	r2,zero,1005588 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 100556c:	10055a00 	call	10055a0 <alt_get_errno>
 1005570:	1007883a 	mov	r3,r2
 1005574:	e0bffa17 	ldw	r2,-24(fp)
 1005578:	0085c83a 	sub	r2,zero,r2
 100557c:	18800015 	stw	r2,0(r3)
    rc = -1;
 1005580:	00bfffc4 	movi	r2,-1
 1005584:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 1005588:	e0bffa17 	ldw	r2,-24(fp)
}
 100558c:	e037883a 	mov	sp,fp
 1005590:	dfc00117 	ldw	ra,4(sp)
 1005594:	df000017 	ldw	fp,0(sp)
 1005598:	dec00204 	addi	sp,sp,8
 100559c:	f800283a 	ret

010055a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10055a0:	defffd04 	addi	sp,sp,-12
 10055a4:	dfc00215 	stw	ra,8(sp)
 10055a8:	df000115 	stw	fp,4(sp)
 10055ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10055b0:	00804074 	movhi	r2,257
 10055b4:	10a79704 	addi	r2,r2,-24996
 10055b8:	10800017 	ldw	r2,0(r2)
 10055bc:	1005003a 	cmpeq	r2,r2,zero
 10055c0:	1000061e 	bne	r2,zero,10055dc <alt_get_errno+0x3c>
 10055c4:	00804074 	movhi	r2,257
 10055c8:	10a79704 	addi	r2,r2,-24996
 10055cc:	10800017 	ldw	r2,0(r2)
 10055d0:	103ee83a 	callr	r2
 10055d4:	e0bfff15 	stw	r2,-4(fp)
 10055d8:	00000306 	br	10055e8 <alt_get_errno+0x48>
 10055dc:	00804074 	movhi	r2,257
 10055e0:	10ae4704 	addi	r2,r2,-18148
 10055e4:	e0bfff15 	stw	r2,-4(fp)
 10055e8:	e0bfff17 	ldw	r2,-4(fp)
}
 10055ec:	e037883a 	mov	sp,fp
 10055f0:	dfc00117 	ldw	ra,4(sp)
 10055f4:	df000017 	ldw	fp,0(sp)
 10055f8:	dec00204 	addi	sp,sp,8
 10055fc:	f800283a 	ret

01005600 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1005600:	defffd04 	addi	sp,sp,-12
 1005604:	dfc00215 	stw	ra,8(sp)
 1005608:	df000115 	stw	fp,4(sp)
 100560c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1005610:	0009883a 	mov	r4,zero
 1005614:	1005ac80 	call	1005ac8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1005618:	1005afc0 	call	1005afc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100561c:	01004074 	movhi	r4,257
 1005620:	2120e004 	addi	r4,r4,-31872
 1005624:	01404074 	movhi	r5,257
 1005628:	2960e004 	addi	r5,r5,-31872
 100562c:	01804074 	movhi	r6,257
 1005630:	31a0e004 	addi	r6,r6,-31872
 1005634:	10075180 	call	1007518 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1005638:	10072c80 	call	10072c8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100563c:	01004034 	movhi	r4,256
 1005640:	211ccb04 	addi	r4,r4,29484
 1005644:	1007e400 	call	1007e40 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1005648:	d126ba17 	ldw	r4,-25880(gp)
 100564c:	d166bb17 	ldw	r5,-25876(gp)
 1005650:	d1a6bc17 	ldw	r6,-25872(gp)
 1005654:	10013380 	call	1001338 <main>
 1005658:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100565c:	01000044 	movi	r4,1
 1005660:	1004fe80 	call	1004fe8 <close>
  exit (result);
 1005664:	e13fff17 	ldw	r4,-4(fp)
 1005668:	1007e540 	call	1007e54 <exit>

0100566c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100566c:	defffe04 	addi	sp,sp,-8
 1005670:	df000115 	stw	fp,4(sp)
 1005674:	df000104 	addi	fp,sp,4
 1005678:	e13fff15 	stw	r4,-4(fp)
}
 100567c:	e037883a 	mov	sp,fp
 1005680:	df000017 	ldw	fp,0(sp)
 1005684:	dec00104 	addi	sp,sp,4
 1005688:	f800283a 	ret

0100568c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100568c:	defffe04 	addi	sp,sp,-8
 1005690:	df000115 	stw	fp,4(sp)
 1005694:	df000104 	addi	fp,sp,4
 1005698:	e13fff15 	stw	r4,-4(fp)
}
 100569c:	e037883a 	mov	sp,fp
 10056a0:	df000017 	ldw	fp,0(sp)
 10056a4:	dec00104 	addi	sp,sp,4
 10056a8:	f800283a 	ret

010056ac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 10056ac:	defff704 	addi	sp,sp,-36
 10056b0:	dfc00815 	stw	ra,32(sp)
 10056b4:	df000715 	stw	fp,28(sp)
 10056b8:	df000704 	addi	fp,sp,28
 10056bc:	e13ffb15 	stw	r4,-20(fp)
 10056c0:	e17ffc15 	stw	r5,-16(fp)
 10056c4:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10056c8:	e0bffb17 	ldw	r2,-20(fp)
 10056cc:	1004803a 	cmplt	r2,r2,zero
 10056d0:	1000081e 	bne	r2,zero,10056f4 <read+0x48>
 10056d4:	e0bffb17 	ldw	r2,-20(fp)
 10056d8:	10800324 	muli	r2,r2,12
 10056dc:	1007883a 	mov	r3,r2
 10056e0:	00804074 	movhi	r2,257
 10056e4:	10a30004 	addi	r2,r2,-29696
 10056e8:	1887883a 	add	r3,r3,r2
 10056ec:	e0ffff15 	stw	r3,-4(fp)
 10056f0:	00000106 	br	10056f8 <read+0x4c>
 10056f4:	e03fff15 	stw	zero,-4(fp)
 10056f8:	e0bfff17 	ldw	r2,-4(fp)
 10056fc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1005700:	e0bffa17 	ldw	r2,-24(fp)
 1005704:	1005003a 	cmpeq	r2,r2,zero
 1005708:	1000241e 	bne	r2,zero,100579c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100570c:	e0bffa17 	ldw	r2,-24(fp)
 1005710:	10800217 	ldw	r2,8(r2)
 1005714:	108000cc 	andi	r2,r2,3
 1005718:	10800060 	cmpeqi	r2,r2,1
 100571c:	10001a1e 	bne	r2,zero,1005788 <read+0xdc>
 1005720:	e0bffa17 	ldw	r2,-24(fp)
 1005724:	10800017 	ldw	r2,0(r2)
 1005728:	10800517 	ldw	r2,20(r2)
 100572c:	1005003a 	cmpeq	r2,r2,zero
 1005730:	1000151e 	bne	r2,zero,1005788 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1005734:	e0bffa17 	ldw	r2,-24(fp)
 1005738:	10800017 	ldw	r2,0(r2)
 100573c:	10800517 	ldw	r2,20(r2)
 1005740:	e17ffc17 	ldw	r5,-16(fp)
 1005744:	e1bffd17 	ldw	r6,-12(fp)
 1005748:	e13ffa17 	ldw	r4,-24(fp)
 100574c:	103ee83a 	callr	r2
 1005750:	e0bff915 	stw	r2,-28(fp)
 1005754:	e0bff917 	ldw	r2,-28(fp)
 1005758:	1004403a 	cmpge	r2,r2,zero
 100575c:	1000071e 	bne	r2,zero,100577c <read+0xd0>
        {
          ALT_ERRNO = -rval;
 1005760:	10057cc0 	call	10057cc <alt_get_errno>
 1005764:	e0fff917 	ldw	r3,-28(fp)
 1005768:	00c7c83a 	sub	r3,zero,r3
 100576c:	10c00015 	stw	r3,0(r2)
          return -1;
 1005770:	00bfffc4 	movi	r2,-1
 1005774:	e0bffe15 	stw	r2,-8(fp)
 1005778:	00000e06 	br	10057b4 <read+0x108>
        }
        return rval;
 100577c:	e0bff917 	ldw	r2,-28(fp)
 1005780:	e0bffe15 	stw	r2,-8(fp)
 1005784:	00000b06 	br	10057b4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1005788:	10057cc0 	call	10057cc <alt_get_errno>
 100578c:	1007883a 	mov	r3,r2
 1005790:	00800344 	movi	r2,13
 1005794:	18800015 	stw	r2,0(r3)
 1005798:	00000406 	br	10057ac <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100579c:	10057cc0 	call	10057cc <alt_get_errno>
 10057a0:	1007883a 	mov	r3,r2
 10057a4:	00801444 	movi	r2,81
 10057a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10057ac:	00bfffc4 	movi	r2,-1
 10057b0:	e0bffe15 	stw	r2,-8(fp)
 10057b4:	e0bffe17 	ldw	r2,-8(fp)
}
 10057b8:	e037883a 	mov	sp,fp
 10057bc:	dfc00117 	ldw	ra,4(sp)
 10057c0:	df000017 	ldw	fp,0(sp)
 10057c4:	dec00204 	addi	sp,sp,8
 10057c8:	f800283a 	ret

010057cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10057cc:	defffd04 	addi	sp,sp,-12
 10057d0:	dfc00215 	stw	ra,8(sp)
 10057d4:	df000115 	stw	fp,4(sp)
 10057d8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10057dc:	00804074 	movhi	r2,257
 10057e0:	10a79704 	addi	r2,r2,-24996
 10057e4:	10800017 	ldw	r2,0(r2)
 10057e8:	1005003a 	cmpeq	r2,r2,zero
 10057ec:	1000061e 	bne	r2,zero,1005808 <alt_get_errno+0x3c>
 10057f0:	00804074 	movhi	r2,257
 10057f4:	10a79704 	addi	r2,r2,-24996
 10057f8:	10800017 	ldw	r2,0(r2)
 10057fc:	103ee83a 	callr	r2
 1005800:	e0bfff15 	stw	r2,-4(fp)
 1005804:	00000306 	br	1005814 <alt_get_errno+0x48>
 1005808:	00804074 	movhi	r2,257
 100580c:	10ae4704 	addi	r2,r2,-18148
 1005810:	e0bfff15 	stw	r2,-4(fp)
 1005814:	e0bfff17 	ldw	r2,-4(fp)
}
 1005818:	e037883a 	mov	sp,fp
 100581c:	dfc00117 	ldw	ra,4(sp)
 1005820:	df000017 	ldw	fp,0(sp)
 1005824:	dec00204 	addi	sp,sp,8
 1005828:	f800283a 	ret

0100582c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100582c:	defffe04 	addi	sp,sp,-8
 1005830:	df000115 	stw	fp,4(sp)
 1005834:	df000104 	addi	fp,sp,4
 1005838:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100583c:	e0bfff17 	ldw	r2,-4(fp)
 1005840:	108000d0 	cmplti	r2,r2,3
 1005844:	10000d1e 	bne	r2,zero,100587c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1005848:	e0bfff17 	ldw	r2,-4(fp)
 100584c:	00c04074 	movhi	r3,257
 1005850:	18e30004 	addi	r3,r3,-29696
 1005854:	10800324 	muli	r2,r2,12
 1005858:	10c5883a 	add	r2,r2,r3
 100585c:	10800204 	addi	r2,r2,8
 1005860:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1005864:	e0bfff17 	ldw	r2,-4(fp)
 1005868:	00c04074 	movhi	r3,257
 100586c:	18e30004 	addi	r3,r3,-29696
 1005870:	10800324 	muli	r2,r2,12
 1005874:	10c5883a 	add	r2,r2,r3
 1005878:	10000015 	stw	zero,0(r2)
  }
}
 100587c:	e037883a 	mov	sp,fp
 1005880:	df000017 	ldw	fp,0(sp)
 1005884:	dec00104 	addi	sp,sp,4
 1005888:	f800283a 	ret

0100588c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100588c:	defff804 	addi	sp,sp,-32
 1005890:	df000715 	stw	fp,28(sp)
 1005894:	df000704 	addi	fp,sp,28
 1005898:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100589c:	0005303a 	rdctl	r2,status
 10058a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10058a4:	e0fffb17 	ldw	r3,-20(fp)
 10058a8:	00bfff84 	movi	r2,-2
 10058ac:	1884703a 	and	r2,r3,r2
 10058b0:	1001703a 	wrctl	status,r2
  
  return context;
 10058b4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 10058b8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 10058bc:	d0a00a17 	ldw	r2,-32728(gp)
 10058c0:	10c000c4 	addi	r3,r2,3
 10058c4:	00bfff04 	movi	r2,-4
 10058c8:	1884703a 	and	r2,r3,r2
 10058cc:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 10058d0:	d0e00a17 	ldw	r3,-32728(gp)
 10058d4:	e0bffe17 	ldw	r2,-8(fp)
 10058d8:	1887883a 	add	r3,r3,r2
 10058dc:	00806034 	movhi	r2,384
 10058e0:	10800004 	addi	r2,r2,0
 10058e4:	10c0072e 	bgeu	r2,r3,1005904 <sbrk+0x78>
 10058e8:	e0bffd17 	ldw	r2,-12(fp)
 10058ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10058f0:	e0bffa17 	ldw	r2,-24(fp)
 10058f4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 10058f8:	00bfffc4 	movi	r2,-1
 10058fc:	e0bfff15 	stw	r2,-4(fp)
 1005900:	00000c06 	br	1005934 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 1005904:	d0a00a17 	ldw	r2,-32728(gp)
 1005908:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100590c:	d0e00a17 	ldw	r3,-32728(gp)
 1005910:	e0bffe17 	ldw	r2,-8(fp)
 1005914:	1885883a 	add	r2,r3,r2
 1005918:	d0a00a15 	stw	r2,-32728(gp)
 100591c:	e0bffd17 	ldw	r2,-12(fp)
 1005920:	e0bff915 	stw	r2,-28(fp)
 1005924:	e0bff917 	ldw	r2,-28(fp)
 1005928:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100592c:	e0bffc17 	ldw	r2,-16(fp)
 1005930:	e0bfff15 	stw	r2,-4(fp)
 1005934:	e0bfff17 	ldw	r2,-4(fp)
} 
 1005938:	e037883a 	mov	sp,fp
 100593c:	df000017 	ldw	fp,0(sp)
 1005940:	dec00104 	addi	sp,sp,4
 1005944:	f800283a 	ret

01005948 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1005948:	defff704 	addi	sp,sp,-36
 100594c:	dfc00815 	stw	ra,32(sp)
 1005950:	df000715 	stw	fp,28(sp)
 1005954:	df000704 	addi	fp,sp,28
 1005958:	e13ffb15 	stw	r4,-20(fp)
 100595c:	e17ffc15 	stw	r5,-16(fp)
 1005960:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1005964:	e0bffb17 	ldw	r2,-20(fp)
 1005968:	1004803a 	cmplt	r2,r2,zero
 100596c:	1000081e 	bne	r2,zero,1005990 <write+0x48>
 1005970:	e0bffb17 	ldw	r2,-20(fp)
 1005974:	10800324 	muli	r2,r2,12
 1005978:	1007883a 	mov	r3,r2
 100597c:	00804074 	movhi	r2,257
 1005980:	10a30004 	addi	r2,r2,-29696
 1005984:	1887883a 	add	r3,r3,r2
 1005988:	e0ffff15 	stw	r3,-4(fp)
 100598c:	00000106 	br	1005994 <write+0x4c>
 1005990:	e03fff15 	stw	zero,-4(fp)
 1005994:	e0bfff17 	ldw	r2,-4(fp)
 1005998:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100599c:	e0bffa17 	ldw	r2,-24(fp)
 10059a0:	1005003a 	cmpeq	r2,r2,zero
 10059a4:	1000241e 	bne	r2,zero,1005a38 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 10059a8:	e0bffa17 	ldw	r2,-24(fp)
 10059ac:	10800217 	ldw	r2,8(r2)
 10059b0:	108000cc 	andi	r2,r2,3
 10059b4:	1005003a 	cmpeq	r2,r2,zero
 10059b8:	10001a1e 	bne	r2,zero,1005a24 <write+0xdc>
 10059bc:	e0bffa17 	ldw	r2,-24(fp)
 10059c0:	10800017 	ldw	r2,0(r2)
 10059c4:	10800617 	ldw	r2,24(r2)
 10059c8:	1005003a 	cmpeq	r2,r2,zero
 10059cc:	1000151e 	bne	r2,zero,1005a24 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 10059d0:	e0bffa17 	ldw	r2,-24(fp)
 10059d4:	10800017 	ldw	r2,0(r2)
 10059d8:	10800617 	ldw	r2,24(r2)
 10059dc:	e17ffc17 	ldw	r5,-16(fp)
 10059e0:	e1bffd17 	ldw	r6,-12(fp)
 10059e4:	e13ffa17 	ldw	r4,-24(fp)
 10059e8:	103ee83a 	callr	r2
 10059ec:	e0bff915 	stw	r2,-28(fp)
 10059f0:	e0bff917 	ldw	r2,-28(fp)
 10059f4:	1004403a 	cmpge	r2,r2,zero
 10059f8:	1000071e 	bne	r2,zero,1005a18 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 10059fc:	1005a680 	call	1005a68 <alt_get_errno>
 1005a00:	e0fff917 	ldw	r3,-28(fp)
 1005a04:	00c7c83a 	sub	r3,zero,r3
 1005a08:	10c00015 	stw	r3,0(r2)
        return -1;
 1005a0c:	00bfffc4 	movi	r2,-1
 1005a10:	e0bffe15 	stw	r2,-8(fp)
 1005a14:	00000e06 	br	1005a50 <write+0x108>
      }
      return rval;
 1005a18:	e0bff917 	ldw	r2,-28(fp)
 1005a1c:	e0bffe15 	stw	r2,-8(fp)
 1005a20:	00000b06 	br	1005a50 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1005a24:	1005a680 	call	1005a68 <alt_get_errno>
 1005a28:	1007883a 	mov	r3,r2
 1005a2c:	00800344 	movi	r2,13
 1005a30:	18800015 	stw	r2,0(r3)
 1005a34:	00000406 	br	1005a48 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1005a38:	1005a680 	call	1005a68 <alt_get_errno>
 1005a3c:	1007883a 	mov	r3,r2
 1005a40:	00801444 	movi	r2,81
 1005a44:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1005a48:	00bfffc4 	movi	r2,-1
 1005a4c:	e0bffe15 	stw	r2,-8(fp)
 1005a50:	e0bffe17 	ldw	r2,-8(fp)
}
 1005a54:	e037883a 	mov	sp,fp
 1005a58:	dfc00117 	ldw	ra,4(sp)
 1005a5c:	df000017 	ldw	fp,0(sp)
 1005a60:	dec00204 	addi	sp,sp,8
 1005a64:	f800283a 	ret

01005a68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1005a68:	defffd04 	addi	sp,sp,-12
 1005a6c:	dfc00215 	stw	ra,8(sp)
 1005a70:	df000115 	stw	fp,4(sp)
 1005a74:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1005a78:	00804074 	movhi	r2,257
 1005a7c:	10a79704 	addi	r2,r2,-24996
 1005a80:	10800017 	ldw	r2,0(r2)
 1005a84:	1005003a 	cmpeq	r2,r2,zero
 1005a88:	1000061e 	bne	r2,zero,1005aa4 <alt_get_errno+0x3c>
 1005a8c:	00804074 	movhi	r2,257
 1005a90:	10a79704 	addi	r2,r2,-24996
 1005a94:	10800017 	ldw	r2,0(r2)
 1005a98:	103ee83a 	callr	r2
 1005a9c:	e0bfff15 	stw	r2,-4(fp)
 1005aa0:	00000306 	br	1005ab0 <alt_get_errno+0x48>
 1005aa4:	00804074 	movhi	r2,257
 1005aa8:	10ae4704 	addi	r2,r2,-18148
 1005aac:	e0bfff15 	stw	r2,-4(fp)
 1005ab0:	e0bfff17 	ldw	r2,-4(fp)
}
 1005ab4:	e037883a 	mov	sp,fp
 1005ab8:	dfc00117 	ldw	ra,4(sp)
 1005abc:	df000017 	ldw	fp,0(sp)
 1005ac0:	dec00204 	addi	sp,sp,8
 1005ac4:	f800283a 	ret

01005ac8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1005ac8:	defffd04 	addi	sp,sp,-12
 1005acc:	dfc00215 	stw	ra,8(sp)
 1005ad0:	df000115 	stw	fp,4(sp)
 1005ad4:	df000104 	addi	fp,sp,4
 1005ad8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 1005adc:	1007bb80 	call	1007bb8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1005ae0:	00800044 	movi	r2,1
 1005ae4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1005ae8:	e037883a 	mov	sp,fp
 1005aec:	dfc00117 	ldw	ra,4(sp)
 1005af0:	df000017 	ldw	fp,0(sp)
 1005af4:	dec00204 	addi	sp,sp,8
 1005af8:	f800283a 	ret

01005afc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1005afc:	defffe04 	addi	sp,sp,-8
 1005b00:	dfc00115 	stw	ra,4(sp)
 1005b04:	df000015 	stw	fp,0(sp)
 1005b08:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 1005b0c:	01043804 	movi	r4,4320
 1005b10:	000b883a 	mov	r5,zero
 1005b14:	018000c4 	movi	r6,3
 1005b18:	01c0fa04 	movi	r7,1000
 1005b1c:	10066cc0 	call	10066cc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1005b20:	01004074 	movhi	r4,257
 1005b24:	21236a04 	addi	r4,r4,-29272
 1005b28:	000b883a 	mov	r5,zero
 1005b2c:	000d883a 	mov	r6,zero
 1005b30:	1005cf80 	call	1005cf8 <altera_avalon_jtag_uart_init>
 1005b34:	01004074 	movhi	r4,257
 1005b38:	21236004 	addi	r4,r4,-29312
 1005b3c:	1005b780 	call	1005b78 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 1005b40:	01004074 	movhi	r4,257
 1005b44:	21277804 	addi	r4,r4,-25120
 1005b48:	10068040 	call	1006804 <alt_up_character_lcd_init>
 1005b4c:	01004074 	movhi	r4,257
 1005b50:	21277804 	addi	r4,r4,-25120
 1005b54:	1005b780 	call	1005b78 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
 1005b58:	01004074 	movhi	r4,257
 1005b5c:	21278304 	addi	r4,r4,-25076
 1005b60:	1005b780 	call	1005b78 <alt_dev_reg>
}
 1005b64:	e037883a 	mov	sp,fp
 1005b68:	dfc00117 	ldw	ra,4(sp)
 1005b6c:	df000017 	ldw	fp,0(sp)
 1005b70:	dec00204 	addi	sp,sp,8
 1005b74:	f800283a 	ret

01005b78 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1005b78:	defffd04 	addi	sp,sp,-12
 1005b7c:	dfc00215 	stw	ra,8(sp)
 1005b80:	df000115 	stw	fp,4(sp)
 1005b84:	df000104 	addi	fp,sp,4
 1005b88:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1005b8c:	e13fff17 	ldw	r4,-4(fp)
 1005b90:	01404074 	movhi	r5,257
 1005b94:	29679404 	addi	r5,r5,-25008
 1005b98:	10071b40 	call	10071b4 <alt_dev_llist_insert>
}
 1005b9c:	e037883a 	mov	sp,fp
 1005ba0:	dfc00117 	ldw	ra,4(sp)
 1005ba4:	df000017 	ldw	fp,0(sp)
 1005ba8:	dec00204 	addi	sp,sp,8
 1005bac:	f800283a 	ret

01005bb0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1005bb0:	defffa04 	addi	sp,sp,-24
 1005bb4:	dfc00515 	stw	ra,20(sp)
 1005bb8:	df000415 	stw	fp,16(sp)
 1005bbc:	df000404 	addi	fp,sp,16
 1005bc0:	e13ffd15 	stw	r4,-12(fp)
 1005bc4:	e17ffe15 	stw	r5,-8(fp)
 1005bc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1005bcc:	e0bffd17 	ldw	r2,-12(fp)
 1005bd0:	10800017 	ldw	r2,0(r2)
 1005bd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1005bd8:	e0bffc17 	ldw	r2,-16(fp)
 1005bdc:	11000a04 	addi	r4,r2,40
 1005be0:	e0bffd17 	ldw	r2,-12(fp)
 1005be4:	11c00217 	ldw	r7,8(r2)
 1005be8:	e17ffe17 	ldw	r5,-8(fp)
 1005bec:	e1bfff17 	ldw	r6,-4(fp)
 1005bf0:	10061f40 	call	10061f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1005bf4:	e037883a 	mov	sp,fp
 1005bf8:	dfc00117 	ldw	ra,4(sp)
 1005bfc:	df000017 	ldw	fp,0(sp)
 1005c00:	dec00204 	addi	sp,sp,8
 1005c04:	f800283a 	ret

01005c08 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1005c08:	defffa04 	addi	sp,sp,-24
 1005c0c:	dfc00515 	stw	ra,20(sp)
 1005c10:	df000415 	stw	fp,16(sp)
 1005c14:	df000404 	addi	fp,sp,16
 1005c18:	e13ffd15 	stw	r4,-12(fp)
 1005c1c:	e17ffe15 	stw	r5,-8(fp)
 1005c20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1005c24:	e0bffd17 	ldw	r2,-12(fp)
 1005c28:	10800017 	ldw	r2,0(r2)
 1005c2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1005c30:	e0bffc17 	ldw	r2,-16(fp)
 1005c34:	11000a04 	addi	r4,r2,40
 1005c38:	e0bffd17 	ldw	r2,-12(fp)
 1005c3c:	11c00217 	ldw	r7,8(r2)
 1005c40:	e17ffe17 	ldw	r5,-8(fp)
 1005c44:	e1bfff17 	ldw	r6,-4(fp)
 1005c48:	10064180 	call	1006418 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1005c4c:	e037883a 	mov	sp,fp
 1005c50:	dfc00117 	ldw	ra,4(sp)
 1005c54:	df000017 	ldw	fp,0(sp)
 1005c58:	dec00204 	addi	sp,sp,8
 1005c5c:	f800283a 	ret

01005c60 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1005c60:	defffc04 	addi	sp,sp,-16
 1005c64:	dfc00315 	stw	ra,12(sp)
 1005c68:	df000215 	stw	fp,8(sp)
 1005c6c:	df000204 	addi	fp,sp,8
 1005c70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1005c74:	e0bfff17 	ldw	r2,-4(fp)
 1005c78:	10800017 	ldw	r2,0(r2)
 1005c7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1005c80:	e0bffe17 	ldw	r2,-8(fp)
 1005c84:	11000a04 	addi	r4,r2,40
 1005c88:	e0bfff17 	ldw	r2,-4(fp)
 1005c8c:	11400217 	ldw	r5,8(r2)
 1005c90:	100608c0 	call	100608c <altera_avalon_jtag_uart_close>
}
 1005c94:	e037883a 	mov	sp,fp
 1005c98:	dfc00117 	ldw	ra,4(sp)
 1005c9c:	df000017 	ldw	fp,0(sp)
 1005ca0:	dec00204 	addi	sp,sp,8
 1005ca4:	f800283a 	ret

01005ca8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1005ca8:	defffa04 	addi	sp,sp,-24
 1005cac:	dfc00515 	stw	ra,20(sp)
 1005cb0:	df000415 	stw	fp,16(sp)
 1005cb4:	df000404 	addi	fp,sp,16
 1005cb8:	e13ffd15 	stw	r4,-12(fp)
 1005cbc:	e17ffe15 	stw	r5,-8(fp)
 1005cc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1005cc4:	e0bffd17 	ldw	r2,-12(fp)
 1005cc8:	10800017 	ldw	r2,0(r2)
 1005ccc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1005cd0:	e0bffc17 	ldw	r2,-16(fp)
 1005cd4:	11000a04 	addi	r4,r2,40
 1005cd8:	e17ffe17 	ldw	r5,-8(fp)
 1005cdc:	e1bfff17 	ldw	r6,-4(fp)
 1005ce0:	10061000 	call	1006100 <altera_avalon_jtag_uart_ioctl>
}
 1005ce4:	e037883a 	mov	sp,fp
 1005ce8:	dfc00117 	ldw	ra,4(sp)
 1005cec:	df000017 	ldw	fp,0(sp)
 1005cf0:	dec00204 	addi	sp,sp,8
 1005cf4:	f800283a 	ret

01005cf8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1005cf8:	defffb04 	addi	sp,sp,-20
 1005cfc:	dfc00415 	stw	ra,16(sp)
 1005d00:	df000315 	stw	fp,12(sp)
 1005d04:	df000304 	addi	fp,sp,12
 1005d08:	e13ffd15 	stw	r4,-12(fp)
 1005d0c:	e17ffe15 	stw	r5,-8(fp)
 1005d10:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1005d14:	e0fffd17 	ldw	r3,-12(fp)
 1005d18:	00800044 	movi	r2,1
 1005d1c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1005d20:	e0bffd17 	ldw	r2,-12(fp)
 1005d24:	10800017 	ldw	r2,0(r2)
 1005d28:	11000104 	addi	r4,r2,4
 1005d2c:	e0bffd17 	ldw	r2,-12(fp)
 1005d30:	10800817 	ldw	r2,32(r2)
 1005d34:	1007883a 	mov	r3,r2
 1005d38:	2005883a 	mov	r2,r4
 1005d3c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1005d40:	e13fff17 	ldw	r4,-4(fp)
 1005d44:	e17ffd17 	ldw	r5,-12(fp)
 1005d48:	01804034 	movhi	r6,256
 1005d4c:	31976c04 	addi	r6,r6,23984
 1005d50:	10075900 	call	1007590 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1005d54:	e0bffd17 	ldw	r2,-12(fp)
 1005d58:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1005d5c:	e0bffd17 	ldw	r2,-12(fp)
 1005d60:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1005d64:	00804074 	movhi	r2,257
 1005d68:	10ae4c04 	addi	r2,r2,-18128
 1005d6c:	10800017 	ldw	r2,0(r2)
 1005d70:	100b883a 	mov	r5,r2
 1005d74:	01804034 	movhi	r6,256
 1005d78:	3197f704 	addi	r6,r6,24540
 1005d7c:	e1fffd17 	ldw	r7,-12(fp)
 1005d80:	100701c0 	call	100701c <alt_alarm_start>
 1005d84:	1004403a 	cmpge	r2,r2,zero
 1005d88:	1000041e 	bne	r2,zero,1005d9c <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1005d8c:	e0fffd17 	ldw	r3,-12(fp)
 1005d90:	00a00034 	movhi	r2,32768
 1005d94:	10bfffc4 	addi	r2,r2,-1
 1005d98:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1005d9c:	e037883a 	mov	sp,fp
 1005da0:	dfc00117 	ldw	ra,4(sp)
 1005da4:	df000017 	ldw	fp,0(sp)
 1005da8:	dec00204 	addi	sp,sp,8
 1005dac:	f800283a 	ret

01005db0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1005db0:	defff704 	addi	sp,sp,-36
 1005db4:	df000815 	stw	fp,32(sp)
 1005db8:	df000804 	addi	fp,sp,32
 1005dbc:	e13ffe15 	stw	r4,-8(fp)
 1005dc0:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1005dc4:	e0bffe17 	ldw	r2,-8(fp)
 1005dc8:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 1005dcc:	e0bffd17 	ldw	r2,-12(fp)
 1005dd0:	10800017 	ldw	r2,0(r2)
 1005dd4:	e0bffc15 	stw	r2,-16(fp)
 1005dd8:	00000006 	br	1005ddc <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1005ddc:	e0bffc17 	ldw	r2,-16(fp)
 1005de0:	10800104 	addi	r2,r2,4
 1005de4:	10800037 	ldwio	r2,0(r2)
 1005de8:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1005dec:	e0bffb17 	ldw	r2,-20(fp)
 1005df0:	1080c00c 	andi	r2,r2,768
 1005df4:	1005003a 	cmpeq	r2,r2,zero
 1005df8:	1000741e 	bne	r2,zero,1005fcc <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1005dfc:	e0bffb17 	ldw	r2,-20(fp)
 1005e00:	1080400c 	andi	r2,r2,256
 1005e04:	1005003a 	cmpeq	r2,r2,zero
 1005e08:	1000351e 	bne	r2,zero,1005ee0 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1005e0c:	00800074 	movhi	r2,1
 1005e10:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1005e14:	e0bffd17 	ldw	r2,-12(fp)
 1005e18:	10800a17 	ldw	r2,40(r2)
 1005e1c:	10800044 	addi	r2,r2,1
 1005e20:	1081ffcc 	andi	r2,r2,2047
 1005e24:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 1005e28:	e0bffd17 	ldw	r2,-12(fp)
 1005e2c:	10c00b17 	ldw	r3,44(r2)
 1005e30:	e0bff917 	ldw	r2,-28(fp)
 1005e34:	18801626 	beq	r3,r2,1005e90 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1005e38:	e0bffc17 	ldw	r2,-16(fp)
 1005e3c:	10800037 	ldwio	r2,0(r2)
 1005e40:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1005e44:	e0bffa17 	ldw	r2,-24(fp)
 1005e48:	10a0000c 	andi	r2,r2,32768
 1005e4c:	1005003a 	cmpeq	r2,r2,zero
 1005e50:	10000f1e 	bne	r2,zero,1005e90 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1005e54:	e0bffd17 	ldw	r2,-12(fp)
 1005e58:	10c00a17 	ldw	r3,40(r2)
 1005e5c:	e0bffa17 	ldw	r2,-24(fp)
 1005e60:	1009883a 	mov	r4,r2
 1005e64:	e0bffd17 	ldw	r2,-12(fp)
 1005e68:	1885883a 	add	r2,r3,r2
 1005e6c:	10800e04 	addi	r2,r2,56
 1005e70:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1005e74:	e0bffd17 	ldw	r2,-12(fp)
 1005e78:	10800a17 	ldw	r2,40(r2)
 1005e7c:	10800044 	addi	r2,r2,1
 1005e80:	10c1ffcc 	andi	r3,r2,2047
 1005e84:	e0bffd17 	ldw	r2,-12(fp)
 1005e88:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1005e8c:	003fe106 	br	1005e14 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1005e90:	e0bffa17 	ldw	r2,-24(fp)
 1005e94:	10bfffec 	andhi	r2,r2,65535
 1005e98:	1005003a 	cmpeq	r2,r2,zero
 1005e9c:	1000101e 	bne	r2,zero,1005ee0 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1005ea0:	e0bffd17 	ldw	r2,-12(fp)
 1005ea4:	10c00817 	ldw	r3,32(r2)
 1005ea8:	00bfff84 	movi	r2,-2
 1005eac:	1886703a 	and	r3,r3,r2
 1005eb0:	e0bffd17 	ldw	r2,-12(fp)
 1005eb4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1005eb8:	e0bffc17 	ldw	r2,-16(fp)
 1005ebc:	11000104 	addi	r4,r2,4
 1005ec0:	e0bffd17 	ldw	r2,-12(fp)
 1005ec4:	10800817 	ldw	r2,32(r2)
 1005ec8:	1007883a 	mov	r3,r2
 1005ecc:	2005883a 	mov	r2,r4
 1005ed0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1005ed4:	e0bffc17 	ldw	r2,-16(fp)
 1005ed8:	10800104 	addi	r2,r2,4
 1005edc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1005ee0:	e0bffb17 	ldw	r2,-20(fp)
 1005ee4:	1080800c 	andi	r2,r2,512
 1005ee8:	1005003a 	cmpeq	r2,r2,zero
 1005eec:	103fbb1e 	bne	r2,zero,1005ddc <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1005ef0:	e0bffb17 	ldw	r2,-20(fp)
 1005ef4:	10bfffec 	andhi	r2,r2,65535
 1005ef8:	1004d43a 	srli	r2,r2,16
 1005efc:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1005f00:	00001506 	br	1005f58 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1005f04:	e13ffc17 	ldw	r4,-16(fp)
 1005f08:	e0bffd17 	ldw	r2,-12(fp)
 1005f0c:	10c00d17 	ldw	r3,52(r2)
 1005f10:	e0bffd17 	ldw	r2,-12(fp)
 1005f14:	1885883a 	add	r2,r3,r2
 1005f18:	10820e04 	addi	r2,r2,2104
 1005f1c:	10800003 	ldbu	r2,0(r2)
 1005f20:	10c03fcc 	andi	r3,r2,255
 1005f24:	18c0201c 	xori	r3,r3,128
 1005f28:	18ffe004 	addi	r3,r3,-128
 1005f2c:	2005883a 	mov	r2,r4
 1005f30:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1005f34:	e0bffd17 	ldw	r2,-12(fp)
 1005f38:	10800d17 	ldw	r2,52(r2)
 1005f3c:	10800044 	addi	r2,r2,1
 1005f40:	10c1ffcc 	andi	r3,r2,2047
 1005f44:	e0bffd17 	ldw	r2,-12(fp)
 1005f48:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1005f4c:	e0bff817 	ldw	r2,-32(fp)
 1005f50:	10bfffc4 	addi	r2,r2,-1
 1005f54:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1005f58:	e0bff817 	ldw	r2,-32(fp)
 1005f5c:	1005003a 	cmpeq	r2,r2,zero
 1005f60:	1000051e 	bne	r2,zero,1005f78 <altera_avalon_jtag_uart_irq+0x1c8>
 1005f64:	e0bffd17 	ldw	r2,-12(fp)
 1005f68:	10c00d17 	ldw	r3,52(r2)
 1005f6c:	e0bffd17 	ldw	r2,-12(fp)
 1005f70:	10800c17 	ldw	r2,48(r2)
 1005f74:	18bfe31e 	bne	r3,r2,1005f04 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1005f78:	e0bff817 	ldw	r2,-32(fp)
 1005f7c:	1005003a 	cmpeq	r2,r2,zero
 1005f80:	103f961e 	bne	r2,zero,1005ddc <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1005f84:	e0bffd17 	ldw	r2,-12(fp)
 1005f88:	10c00817 	ldw	r3,32(r2)
 1005f8c:	00bfff44 	movi	r2,-3
 1005f90:	1886703a 	and	r3,r3,r2
 1005f94:	e0bffd17 	ldw	r2,-12(fp)
 1005f98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1005f9c:	e0bffd17 	ldw	r2,-12(fp)
 1005fa0:	10800017 	ldw	r2,0(r2)
 1005fa4:	11000104 	addi	r4,r2,4
 1005fa8:	e0bffd17 	ldw	r2,-12(fp)
 1005fac:	10800817 	ldw	r2,32(r2)
 1005fb0:	1007883a 	mov	r3,r2
 1005fb4:	2005883a 	mov	r2,r4
 1005fb8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1005fbc:	e0bffc17 	ldw	r2,-16(fp)
 1005fc0:	10800104 	addi	r2,r2,4
 1005fc4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1005fc8:	003f8406 	br	1005ddc <altera_avalon_jtag_uart_irq+0x2c>
}
 1005fcc:	e037883a 	mov	sp,fp
 1005fd0:	df000017 	ldw	fp,0(sp)
 1005fd4:	dec00104 	addi	sp,sp,4
 1005fd8:	f800283a 	ret

01005fdc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1005fdc:	defffc04 	addi	sp,sp,-16
 1005fe0:	df000315 	stw	fp,12(sp)
 1005fe4:	df000304 	addi	fp,sp,12
 1005fe8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1005fec:	e0bfff17 	ldw	r2,-4(fp)
 1005ff0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1005ff4:	e0bffe17 	ldw	r2,-8(fp)
 1005ff8:	10800017 	ldw	r2,0(r2)
 1005ffc:	10800104 	addi	r2,r2,4
 1006000:	10800037 	ldwio	r2,0(r2)
 1006004:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1006008:	e0bffd17 	ldw	r2,-12(fp)
 100600c:	1081000c 	andi	r2,r2,1024
 1006010:	1005003a 	cmpeq	r2,r2,zero
 1006014:	10000c1e 	bne	r2,zero,1006048 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1006018:	e0bffe17 	ldw	r2,-8(fp)
 100601c:	10800017 	ldw	r2,0(r2)
 1006020:	11000104 	addi	r4,r2,4
 1006024:	e0bffe17 	ldw	r2,-8(fp)
 1006028:	10800817 	ldw	r2,32(r2)
 100602c:	10810014 	ori	r2,r2,1024
 1006030:	1007883a 	mov	r3,r2
 1006034:	2005883a 	mov	r2,r4
 1006038:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100603c:	e0bffe17 	ldw	r2,-8(fp)
 1006040:	10000915 	stw	zero,36(r2)
 1006044:	00000a06 	br	1006070 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1006048:	e0bffe17 	ldw	r2,-8(fp)
 100604c:	10c00917 	ldw	r3,36(r2)
 1006050:	00a00034 	movhi	r2,32768
 1006054:	10bfff04 	addi	r2,r2,-4
 1006058:	10c00536 	bltu	r2,r3,1006070 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 100605c:	e0bffe17 	ldw	r2,-8(fp)
 1006060:	10800917 	ldw	r2,36(r2)
 1006064:	10c00044 	addi	r3,r2,1
 1006068:	e0bffe17 	ldw	r2,-8(fp)
 100606c:	10c00915 	stw	r3,36(r2)
 1006070:	00804074 	movhi	r2,257
 1006074:	10ae4c04 	addi	r2,r2,-18128
 1006078:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100607c:	e037883a 	mov	sp,fp
 1006080:	df000017 	ldw	fp,0(sp)
 1006084:	dec00104 	addi	sp,sp,4
 1006088:	f800283a 	ret

0100608c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100608c:	defffc04 	addi	sp,sp,-16
 1006090:	df000315 	stw	fp,12(sp)
 1006094:	df000304 	addi	fp,sp,12
 1006098:	e13ffd15 	stw	r4,-12(fp)
 100609c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10060a0:	00000706 	br	10060c0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 10060a4:	e0bffe17 	ldw	r2,-8(fp)
 10060a8:	1090000c 	andi	r2,r2,16384
 10060ac:	1005003a 	cmpeq	r2,r2,zero
 10060b0:	1000031e 	bne	r2,zero,10060c0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 10060b4:	00bffd44 	movi	r2,-11
 10060b8:	e0bfff15 	stw	r2,-4(fp)
 10060bc:	00000b06 	br	10060ec <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10060c0:	e0bffd17 	ldw	r2,-12(fp)
 10060c4:	10c00d17 	ldw	r3,52(r2)
 10060c8:	e0bffd17 	ldw	r2,-12(fp)
 10060cc:	10800c17 	ldw	r2,48(r2)
 10060d0:	18800526 	beq	r3,r2,10060e8 <altera_avalon_jtag_uart_close+0x5c>
 10060d4:	e0bffd17 	ldw	r2,-12(fp)
 10060d8:	10c00917 	ldw	r3,36(r2)
 10060dc:	e0bffd17 	ldw	r2,-12(fp)
 10060e0:	10800117 	ldw	r2,4(r2)
 10060e4:	18bfef36 	bltu	r3,r2,10060a4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 10060e8:	e03fff15 	stw	zero,-4(fp)
 10060ec:	e0bfff17 	ldw	r2,-4(fp)
}
 10060f0:	e037883a 	mov	sp,fp
 10060f4:	df000017 	ldw	fp,0(sp)
 10060f8:	dec00104 	addi	sp,sp,4
 10060fc:	f800283a 	ret

01006100 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1006100:	defff804 	addi	sp,sp,-32
 1006104:	df000715 	stw	fp,28(sp)
 1006108:	df000704 	addi	fp,sp,28
 100610c:	e13ffb15 	stw	r4,-20(fp)
 1006110:	e17ffc15 	stw	r5,-16(fp)
 1006114:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1006118:	00bff9c4 	movi	r2,-25
 100611c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1006120:	e0bffc17 	ldw	r2,-16(fp)
 1006124:	e0bfff15 	stw	r2,-4(fp)
 1006128:	e0ffff17 	ldw	r3,-4(fp)
 100612c:	189a8060 	cmpeqi	r2,r3,27137
 1006130:	1000041e 	bne	r2,zero,1006144 <altera_avalon_jtag_uart_ioctl+0x44>
 1006134:	e0ffff17 	ldw	r3,-4(fp)
 1006138:	189a80a0 	cmpeqi	r2,r3,27138
 100613c:	10001b1e 	bne	r2,zero,10061ac <altera_avalon_jtag_uart_ioctl+0xac>
 1006140:	00002706 	br	10061e0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1006144:	e0bffb17 	ldw	r2,-20(fp)
 1006148:	10c00117 	ldw	r3,4(r2)
 100614c:	00a00034 	movhi	r2,32768
 1006150:	10bfffc4 	addi	r2,r2,-1
 1006154:	18802226 	beq	r3,r2,10061e0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1006158:	e0bffd17 	ldw	r2,-12(fp)
 100615c:	10800017 	ldw	r2,0(r2)
 1006160:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1006164:	e0bff917 	ldw	r2,-28(fp)
 1006168:	10800090 	cmplti	r2,r2,2
 100616c:	1000071e 	bne	r2,zero,100618c <altera_avalon_jtag_uart_ioctl+0x8c>
 1006170:	e0fff917 	ldw	r3,-28(fp)
 1006174:	00a00034 	movhi	r2,32768
 1006178:	10bfffc4 	addi	r2,r2,-1
 100617c:	18800326 	beq	r3,r2,100618c <altera_avalon_jtag_uart_ioctl+0x8c>
 1006180:	e0bff917 	ldw	r2,-28(fp)
 1006184:	e0bffe15 	stw	r2,-8(fp)
 1006188:	00000306 	br	1006198 <altera_avalon_jtag_uart_ioctl+0x98>
 100618c:	00e00034 	movhi	r3,32768
 1006190:	18ffff84 	addi	r3,r3,-2
 1006194:	e0fffe15 	stw	r3,-8(fp)
 1006198:	e0bffb17 	ldw	r2,-20(fp)
 100619c:	e0fffe17 	ldw	r3,-8(fp)
 10061a0:	10c00115 	stw	r3,4(r2)
      rc = 0;
 10061a4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 10061a8:	00000d06 	br	10061e0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 10061ac:	e0bffb17 	ldw	r2,-20(fp)
 10061b0:	10c00117 	ldw	r3,4(r2)
 10061b4:	00a00034 	movhi	r2,32768
 10061b8:	10bfffc4 	addi	r2,r2,-1
 10061bc:	18800826 	beq	r3,r2,10061e0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 10061c0:	e13ffd17 	ldw	r4,-12(fp)
 10061c4:	e0bffb17 	ldw	r2,-20(fp)
 10061c8:	10c00917 	ldw	r3,36(r2)
 10061cc:	e0bffb17 	ldw	r2,-20(fp)
 10061d0:	10800117 	ldw	r2,4(r2)
 10061d4:	1885803a 	cmpltu	r2,r3,r2
 10061d8:	20800015 	stw	r2,0(r4)
      rc = 0;
 10061dc:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 10061e0:	e0bffa17 	ldw	r2,-24(fp)
}
 10061e4:	e037883a 	mov	sp,fp
 10061e8:	df000017 	ldw	fp,0(sp)
 10061ec:	dec00104 	addi	sp,sp,4
 10061f0:	f800283a 	ret

010061f4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 10061f4:	defff204 	addi	sp,sp,-56
 10061f8:	dfc00d15 	stw	ra,52(sp)
 10061fc:	df000c15 	stw	fp,48(sp)
 1006200:	df000c04 	addi	fp,sp,48
 1006204:	e13ffb15 	stw	r4,-20(fp)
 1006208:	e17ffc15 	stw	r5,-16(fp)
 100620c:	e1bffd15 	stw	r6,-12(fp)
 1006210:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1006214:	e0bffc17 	ldw	r2,-16(fp)
 1006218:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100621c:	00004806 	br	1006340 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1006220:	e0bffb17 	ldw	r2,-20(fp)
 1006224:	10800a17 	ldw	r2,40(r2)
 1006228:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100622c:	e0bffb17 	ldw	r2,-20(fp)
 1006230:	10800b17 	ldw	r2,44(r2)
 1006234:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1006238:	e0fff717 	ldw	r3,-36(fp)
 100623c:	e0bff617 	ldw	r2,-40(fp)
 1006240:	18800536 	bltu	r3,r2,1006258 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1006244:	e0bff717 	ldw	r2,-36(fp)
 1006248:	e0fff617 	ldw	r3,-40(fp)
 100624c:	10c5c83a 	sub	r2,r2,r3
 1006250:	e0bff815 	stw	r2,-32(fp)
 1006254:	00000406 	br	1006268 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1006258:	00820004 	movi	r2,2048
 100625c:	e0fff617 	ldw	r3,-40(fp)
 1006260:	10c5c83a 	sub	r2,r2,r3
 1006264:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1006268:	e0bff817 	ldw	r2,-32(fp)
 100626c:	1005003a 	cmpeq	r2,r2,zero
 1006270:	10001f1e 	bne	r2,zero,10062f0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 1006274:	e0fffd17 	ldw	r3,-12(fp)
 1006278:	e0bff817 	ldw	r2,-32(fp)
 100627c:	1880022e 	bgeu	r3,r2,1006288 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 1006280:	e0bffd17 	ldw	r2,-12(fp)
 1006284:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1006288:	e0bffb17 	ldw	r2,-20(fp)
 100628c:	10c00e04 	addi	r3,r2,56
 1006290:	e0bff617 	ldw	r2,-40(fp)
 1006294:	1887883a 	add	r3,r3,r2
 1006298:	e0bffa17 	ldw	r2,-24(fp)
 100629c:	1009883a 	mov	r4,r2
 10062a0:	180b883a 	mov	r5,r3
 10062a4:	e1bff817 	ldw	r6,-32(fp)
 10062a8:	10034c00 	call	10034c0 <memcpy>
      ptr   += n;
 10062ac:	e0fff817 	ldw	r3,-32(fp)
 10062b0:	e0bffa17 	ldw	r2,-24(fp)
 10062b4:	10c5883a 	add	r2,r2,r3
 10062b8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 10062bc:	e0fffd17 	ldw	r3,-12(fp)
 10062c0:	e0bff817 	ldw	r2,-32(fp)
 10062c4:	1885c83a 	sub	r2,r3,r2
 10062c8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10062cc:	e0fff617 	ldw	r3,-40(fp)
 10062d0:	e0bff817 	ldw	r2,-32(fp)
 10062d4:	1885883a 	add	r2,r3,r2
 10062d8:	10c1ffcc 	andi	r3,r2,2047
 10062dc:	e0bffb17 	ldw	r2,-20(fp)
 10062e0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 10062e4:	e0bffd17 	ldw	r2,-12(fp)
 10062e8:	10800048 	cmpgei	r2,r2,1
 10062ec:	103fcc1e 	bne	r2,zero,1006220 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 10062f0:	e0fffa17 	ldw	r3,-24(fp)
 10062f4:	e0bffc17 	ldw	r2,-16(fp)
 10062f8:	1880141e 	bne	r3,r2,100634c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 10062fc:	e0bffe17 	ldw	r2,-8(fp)
 1006300:	1090000c 	andi	r2,r2,16384
 1006304:	1004c03a 	cmpne	r2,r2,zero
 1006308:	1000101e 	bne	r2,zero,100634c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100630c:	e0bffb17 	ldw	r2,-20(fp)
 1006310:	10c00a17 	ldw	r3,40(r2)
 1006314:	e0bff717 	ldw	r2,-36(fp)
 1006318:	1880051e 	bne	r3,r2,1006330 <altera_avalon_jtag_uart_read+0x13c>
 100631c:	e0bffb17 	ldw	r2,-20(fp)
 1006320:	10c00917 	ldw	r3,36(r2)
 1006324:	e0bffb17 	ldw	r2,-20(fp)
 1006328:	10800117 	ldw	r2,4(r2)
 100632c:	18bff736 	bltu	r3,r2,100630c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1006330:	e0bffb17 	ldw	r2,-20(fp)
 1006334:	10c00a17 	ldw	r3,40(r2)
 1006338:	e0bff717 	ldw	r2,-36(fp)
 100633c:	18800326 	beq	r3,r2,100634c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1006340:	e0bffd17 	ldw	r2,-12(fp)
 1006344:	10800048 	cmpgei	r2,r2,1
 1006348:	103fb51e 	bne	r2,zero,1006220 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100634c:	e0fffa17 	ldw	r3,-24(fp)
 1006350:	e0bffc17 	ldw	r2,-16(fp)
 1006354:	18801926 	beq	r3,r2,10063bc <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1006358:	0005303a 	rdctl	r2,status
 100635c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006360:	e0fff517 	ldw	r3,-44(fp)
 1006364:	00bfff84 	movi	r2,-2
 1006368:	1884703a 	and	r2,r3,r2
 100636c:	1001703a 	wrctl	status,r2
  
  return context;
 1006370:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1006374:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1006378:	e0bffb17 	ldw	r2,-20(fp)
 100637c:	10800817 	ldw	r2,32(r2)
 1006380:	10c00054 	ori	r3,r2,1
 1006384:	e0bffb17 	ldw	r2,-20(fp)
 1006388:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100638c:	e0bffb17 	ldw	r2,-20(fp)
 1006390:	10800017 	ldw	r2,0(r2)
 1006394:	11000104 	addi	r4,r2,4
 1006398:	e0bffb17 	ldw	r2,-20(fp)
 100639c:	10800817 	ldw	r2,32(r2)
 10063a0:	1007883a 	mov	r3,r2
 10063a4:	2005883a 	mov	r2,r4
 10063a8:	10c00035 	stwio	r3,0(r2)
 10063ac:	e0bff917 	ldw	r2,-28(fp)
 10063b0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10063b4:	e0bff417 	ldw	r2,-48(fp)
 10063b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 10063bc:	e0fffa17 	ldw	r3,-24(fp)
 10063c0:	e0bffc17 	ldw	r2,-16(fp)
 10063c4:	18800526 	beq	r3,r2,10063dc <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 10063c8:	e0fffa17 	ldw	r3,-24(fp)
 10063cc:	e0bffc17 	ldw	r2,-16(fp)
 10063d0:	1887c83a 	sub	r3,r3,r2
 10063d4:	e0ffff15 	stw	r3,-4(fp)
 10063d8:	00000906 	br	1006400 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 10063dc:	e0bffe17 	ldw	r2,-8(fp)
 10063e0:	1090000c 	andi	r2,r2,16384
 10063e4:	1005003a 	cmpeq	r2,r2,zero
 10063e8:	1000031e 	bne	r2,zero,10063f8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 10063ec:	00bffd44 	movi	r2,-11
 10063f0:	e0bfff15 	stw	r2,-4(fp)
 10063f4:	00000206 	br	1006400 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 10063f8:	00bffec4 	movi	r2,-5
 10063fc:	e0bfff15 	stw	r2,-4(fp)
 1006400:	e0bfff17 	ldw	r2,-4(fp)
}
 1006404:	e037883a 	mov	sp,fp
 1006408:	dfc00117 	ldw	ra,4(sp)
 100640c:	df000017 	ldw	fp,0(sp)
 1006410:	dec00204 	addi	sp,sp,8
 1006414:	f800283a 	ret

01006418 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1006418:	defff204 	addi	sp,sp,-56
 100641c:	dfc00d15 	stw	ra,52(sp)
 1006420:	df000c15 	stw	fp,48(sp)
 1006424:	df000c04 	addi	fp,sp,48
 1006428:	e13ffb15 	stw	r4,-20(fp)
 100642c:	e17ffc15 	stw	r5,-16(fp)
 1006430:	e1bffd15 	stw	r6,-12(fp)
 1006434:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1006438:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100643c:	e0bffc17 	ldw	r2,-16(fp)
 1006440:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1006444:	00003a06 	br	1006530 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1006448:	e0bffb17 	ldw	r2,-20(fp)
 100644c:	10800c17 	ldw	r2,48(r2)
 1006450:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 1006454:	e0bffb17 	ldw	r2,-20(fp)
 1006458:	10800d17 	ldw	r2,52(r2)
 100645c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 1006460:	e0fffa17 	ldw	r3,-24(fp)
 1006464:	e0bff917 	ldw	r2,-28(fp)
 1006468:	1880062e 	bgeu	r3,r2,1006484 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100646c:	e0fff917 	ldw	r3,-28(fp)
 1006470:	e0bffa17 	ldw	r2,-24(fp)
 1006474:	1885c83a 	sub	r2,r3,r2
 1006478:	10bfffc4 	addi	r2,r2,-1
 100647c:	e0bff815 	stw	r2,-32(fp)
 1006480:	00000c06 	br	10064b4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 1006484:	e0bff917 	ldw	r2,-28(fp)
 1006488:	1005003a 	cmpeq	r2,r2,zero
 100648c:	1000051e 	bne	r2,zero,10064a4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1006490:	00820004 	movi	r2,2048
 1006494:	e0fffa17 	ldw	r3,-24(fp)
 1006498:	10c5c83a 	sub	r2,r2,r3
 100649c:	e0bff815 	stw	r2,-32(fp)
 10064a0:	00000406 	br	10064b4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 10064a4:	0081ffc4 	movi	r2,2047
 10064a8:	e0fffa17 	ldw	r3,-24(fp)
 10064ac:	10c5c83a 	sub	r2,r2,r3
 10064b0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 10064b4:	e0bff817 	ldw	r2,-32(fp)
 10064b8:	1005003a 	cmpeq	r2,r2,zero
 10064bc:	10001f1e 	bne	r2,zero,100653c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 10064c0:	e0fffd17 	ldw	r3,-12(fp)
 10064c4:	e0bff817 	ldw	r2,-32(fp)
 10064c8:	1880022e 	bgeu	r3,r2,10064d4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 10064cc:	e0bffd17 	ldw	r2,-12(fp)
 10064d0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 10064d4:	e0bffb17 	ldw	r2,-20(fp)
 10064d8:	10c20e04 	addi	r3,r2,2104
 10064dc:	e0bffa17 	ldw	r2,-24(fp)
 10064e0:	1885883a 	add	r2,r3,r2
 10064e4:	e0fffc17 	ldw	r3,-16(fp)
 10064e8:	1009883a 	mov	r4,r2
 10064ec:	180b883a 	mov	r5,r3
 10064f0:	e1bff817 	ldw	r6,-32(fp)
 10064f4:	10034c00 	call	10034c0 <memcpy>
      ptr   += n;
 10064f8:	e0fff817 	ldw	r3,-32(fp)
 10064fc:	e0bffc17 	ldw	r2,-16(fp)
 1006500:	10c5883a 	add	r2,r2,r3
 1006504:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1006508:	e0fffd17 	ldw	r3,-12(fp)
 100650c:	e0bff817 	ldw	r2,-32(fp)
 1006510:	1885c83a 	sub	r2,r3,r2
 1006514:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1006518:	e0fffa17 	ldw	r3,-24(fp)
 100651c:	e0bff817 	ldw	r2,-32(fp)
 1006520:	1885883a 	add	r2,r3,r2
 1006524:	10c1ffcc 	andi	r3,r2,2047
 1006528:	e0bffb17 	ldw	r2,-20(fp)
 100652c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1006530:	e0bffd17 	ldw	r2,-12(fp)
 1006534:	10800048 	cmpgei	r2,r2,1
 1006538:	103fc31e 	bne	r2,zero,1006448 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100653c:	0005303a 	rdctl	r2,status
 1006540:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006544:	e0fff517 	ldw	r3,-44(fp)
 1006548:	00bfff84 	movi	r2,-2
 100654c:	1884703a 	and	r2,r3,r2
 1006550:	1001703a 	wrctl	status,r2
  
  return context;
 1006554:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1006558:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100655c:	e0bffb17 	ldw	r2,-20(fp)
 1006560:	10800817 	ldw	r2,32(r2)
 1006564:	10c00094 	ori	r3,r2,2
 1006568:	e0bffb17 	ldw	r2,-20(fp)
 100656c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1006570:	e0bffb17 	ldw	r2,-20(fp)
 1006574:	10800017 	ldw	r2,0(r2)
 1006578:	11000104 	addi	r4,r2,4
 100657c:	e0bffb17 	ldw	r2,-20(fp)
 1006580:	10800817 	ldw	r2,32(r2)
 1006584:	1007883a 	mov	r3,r2
 1006588:	2005883a 	mov	r2,r4
 100658c:	10c00035 	stwio	r3,0(r2)
 1006590:	e0bff717 	ldw	r2,-36(fp)
 1006594:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1006598:	e0bff417 	ldw	r2,-48(fp)
 100659c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 10065a0:	e0bffd17 	ldw	r2,-12(fp)
 10065a4:	10800050 	cmplti	r2,r2,1
 10065a8:	1000111e 	bne	r2,zero,10065f0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 10065ac:	e0bffe17 	ldw	r2,-8(fp)
 10065b0:	1090000c 	andi	r2,r2,16384
 10065b4:	1004c03a 	cmpne	r2,r2,zero
 10065b8:	1000101e 	bne	r2,zero,10065fc <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 10065bc:	e0bffb17 	ldw	r2,-20(fp)
 10065c0:	10c00d17 	ldw	r3,52(r2)
 10065c4:	e0bff917 	ldw	r2,-28(fp)
 10065c8:	1880051e 	bne	r3,r2,10065e0 <altera_avalon_jtag_uart_write+0x1c8>
 10065cc:	e0bffb17 	ldw	r2,-20(fp)
 10065d0:	10c00917 	ldw	r3,36(r2)
 10065d4:	e0bffb17 	ldw	r2,-20(fp)
 10065d8:	10800117 	ldw	r2,4(r2)
 10065dc:	18bff736 	bltu	r3,r2,10065bc <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 10065e0:	e0bffb17 	ldw	r2,-20(fp)
 10065e4:	10c00d17 	ldw	r3,52(r2)
 10065e8:	e0bff917 	ldw	r2,-28(fp)
 10065ec:	18800326 	beq	r3,r2,10065fc <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 10065f0:	e0bffd17 	ldw	r2,-12(fp)
 10065f4:	10800048 	cmpgei	r2,r2,1
 10065f8:	103fcd1e 	bne	r2,zero,1006530 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 10065fc:	e0fffc17 	ldw	r3,-16(fp)
 1006600:	e0bff617 	ldw	r2,-40(fp)
 1006604:	18800526 	beq	r3,r2,100661c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1006608:	e0fffc17 	ldw	r3,-16(fp)
 100660c:	e0bff617 	ldw	r2,-40(fp)
 1006610:	1887c83a 	sub	r3,r3,r2
 1006614:	e0ffff15 	stw	r3,-4(fp)
 1006618:	00000906 	br	1006640 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100661c:	e0bffe17 	ldw	r2,-8(fp)
 1006620:	1090000c 	andi	r2,r2,16384
 1006624:	1005003a 	cmpeq	r2,r2,zero
 1006628:	1000031e 	bne	r2,zero,1006638 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100662c:	00bffd44 	movi	r2,-11
 1006630:	e0bfff15 	stw	r2,-4(fp)
 1006634:	00000206 	br	1006640 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1006638:	00bffec4 	movi	r2,-5
 100663c:	e0bfff15 	stw	r2,-4(fp)
 1006640:	e0bfff17 	ldw	r2,-4(fp)
}
 1006644:	e037883a 	mov	sp,fp
 1006648:	dfc00117 	ldw	ra,4(sp)
 100664c:	df000017 	ldw	fp,0(sp)
 1006650:	dec00204 	addi	sp,sp,8
 1006654:	f800283a 	ret

01006658 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1006658:	defff904 	addi	sp,sp,-28
 100665c:	dfc00615 	stw	ra,24(sp)
 1006660:	df000515 	stw	fp,20(sp)
 1006664:	df000504 	addi	fp,sp,20
 1006668:	e13ffe15 	stw	r4,-8(fp)
 100666c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1006670:	e0bffe17 	ldw	r2,-8(fp)
 1006674:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1006678:	e0bffe17 	ldw	r2,-8(fp)
 100667c:	10800104 	addi	r2,r2,4
 1006680:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1006684:	0005303a 	rdctl	r2,status
 1006688:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100668c:	e0fffc17 	ldw	r3,-16(fp)
 1006690:	00bfff84 	movi	r2,-2
 1006694:	1884703a 	and	r2,r3,r2
 1006698:	1001703a 	wrctl	status,r2
  
  return context;
 100669c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 10066a0:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 10066a4:	1007aac0 	call	1007aac <alt_tick>
 10066a8:	e0bffd17 	ldw	r2,-12(fp)
 10066ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10066b0:	e0bffb17 	ldw	r2,-20(fp)
 10066b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 10066b8:	e037883a 	mov	sp,fp
 10066bc:	dfc00117 	ldw	ra,4(sp)
 10066c0:	df000017 	ldw	fp,0(sp)
 10066c4:	dec00204 	addi	sp,sp,8
 10066c8:	f800283a 	ret

010066cc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 10066cc:	defff904 	addi	sp,sp,-28
 10066d0:	dfc00615 	stw	ra,24(sp)
 10066d4:	df000515 	stw	fp,20(sp)
 10066d8:	df000504 	addi	fp,sp,20
 10066dc:	e13ffc15 	stw	r4,-16(fp)
 10066e0:	e17ffd15 	stw	r5,-12(fp)
 10066e4:	e1bffe15 	stw	r6,-8(fp)
 10066e8:	e1ffff15 	stw	r7,-4(fp)
 10066ec:	e0bfff17 	ldw	r2,-4(fp)
 10066f0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 10066f4:	00804074 	movhi	r2,257
 10066f8:	10ae4c04 	addi	r2,r2,-18128
 10066fc:	10800017 	ldw	r2,0(r2)
 1006700:	1004c03a 	cmpne	r2,r2,zero
 1006704:	1000041e 	bne	r2,zero,1006718 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 1006708:	00c04074 	movhi	r3,257
 100670c:	18ee4c04 	addi	r3,r3,-18128
 1006710:	e0bffb17 	ldw	r2,-20(fp)
 1006714:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1006718:	e0bffc17 	ldw	r2,-16(fp)
 100671c:	10800104 	addi	r2,r2,4
 1006720:	1007883a 	mov	r3,r2
 1006724:	008001c4 	movi	r2,7
 1006728:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 100672c:	e13ffe17 	ldw	r4,-8(fp)
 1006730:	e17ffc17 	ldw	r5,-16(fp)
 1006734:	01804034 	movhi	r6,256
 1006738:	31999604 	addi	r6,r6,26200
 100673c:	10075900 	call	1007590 <alt_irq_register>
#endif  
}
 1006740:	e037883a 	mov	sp,fp
 1006744:	dfc00117 	ldw	ra,4(sp)
 1006748:	df000017 	ldw	fp,0(sp)
 100674c:	dec00204 	addi	sp,sp,8
 1006750:	f800283a 	ret

01006754 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 1006754:	defffc04 	addi	sp,sp,-16
 1006758:	df000315 	stw	fp,12(sp)
 100675c:	df000304 	addi	fp,sp,12
 1006760:	e13ffe15 	stw	r4,-8(fp)
 1006764:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 1006768:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 100676c:	e0bfff17 	ldw	r2,-4(fp)
 1006770:	1004c03a 	cmpne	r2,r2,zero
 1006774:	1000061e 	bne	r2,zero,1006790 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 1006778:	e0bffe17 	ldw	r2,-8(fp)
 100677c:	1007883a 	mov	r3,r2
 1006780:	e0bffd03 	ldbu	r2,-12(fp)
 1006784:	10c4b03a 	or	r2,r2,r3
 1006788:	e0bffd05 	stb	r2,-12(fp)
 100678c:	00000806 	br	10067b0 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 1006790:	e0bffe17 	ldw	r2,-8(fp)
 1006794:	1007883a 	mov	r3,r2
 1006798:	e0bffd03 	ldbu	r2,-12(fp)
 100679c:	10c4b03a 	or	r2,r2,r3
 10067a0:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 10067a4:	e0bffd03 	ldbu	r2,-12(fp)
 10067a8:	10801014 	ori	r2,r2,64
 10067ac:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 10067b0:	e0fffd03 	ldbu	r3,-12(fp)
 10067b4:	00bfe004 	movi	r2,-128
 10067b8:	1884b03a 	or	r2,r3,r2
 10067bc:	10803fcc 	andi	r2,r2,255
}
 10067c0:	e037883a 	mov	sp,fp
 10067c4:	df000017 	ldw	fp,0(sp)
 10067c8:	dec00104 	addi	sp,sp,4
 10067cc:	f800283a 	ret

010067d0 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 10067d0:	defffd04 	addi	sp,sp,-12
 10067d4:	df000215 	stw	fp,8(sp)
 10067d8:	df000204 	addi	fp,sp,8
 10067dc:	e13ffe15 	stw	r4,-8(fp)
 10067e0:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 10067e4:	e0bffe17 	ldw	r2,-8(fp)
 10067e8:	10800a17 	ldw	r2,40(r2)
 10067ec:	e0ffff03 	ldbu	r3,-4(fp)
 10067f0:	10c00025 	stbio	r3,0(r2)
}
 10067f4:	e037883a 	mov	sp,fp
 10067f8:	df000017 	ldw	fp,0(sp)
 10067fc:	dec00104 	addi	sp,sp,4
 1006800:	f800283a 	ret

01006804 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 1006804:	defffe04 	addi	sp,sp,-8
 1006808:	df000115 	stw	fp,4(sp)
 100680c:	df000104 	addi	fp,sp,4
 1006810:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 1006814:	e0bfff17 	ldw	r2,-4(fp)
 1006818:	10800a17 	ldw	r2,40(r2)
 100681c:	1007883a 	mov	r3,r2
 1006820:	00800044 	movi	r2,1
 1006824:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 1006828:	e037883a 	mov	sp,fp
 100682c:	df000017 	ldw	fp,0(sp)
 1006830:	dec00104 	addi	sp,sp,4
 1006834:	f800283a 	ret

01006838 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 1006838:	defffc04 	addi	sp,sp,-16
 100683c:	dfc00315 	stw	ra,12(sp)
 1006840:	df000215 	stw	fp,8(sp)
 1006844:	df000204 	addi	fp,sp,8
 1006848:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 100684c:	e13fff17 	ldw	r4,-4(fp)
 1006850:	01404074 	movhi	r5,257
 1006854:	29679404 	addi	r5,r5,-25008
 1006858:	10073900 	call	1007390 <alt_find_dev>
 100685c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1006860:	e0bffe17 	ldw	r2,-8(fp)
}
 1006864:	e037883a 	mov	sp,fp
 1006868:	dfc00117 	ldw	ra,4(sp)
 100686c:	df000017 	ldw	fp,0(sp)
 1006870:	dec00204 	addi	sp,sp,8
 1006874:	f800283a 	ret

01006878 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 1006878:	defffb04 	addi	sp,sp,-20
 100687c:	df000415 	stw	fp,16(sp)
 1006880:	df000404 	addi	fp,sp,16
 1006884:	e13ffd15 	stw	r4,-12(fp)
 1006888:	e17ffe15 	stw	r5,-8(fp)
 100688c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 1006890:	e03ffc15 	stw	zero,-16(fp)
 1006894:	00000f06 	br	10068d4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 1006898:	e0bffd17 	ldw	r2,-12(fp)
 100689c:	10800a17 	ldw	r2,40(r2)
 10068a0:	11000044 	addi	r4,r2,1
 10068a4:	e0fffc17 	ldw	r3,-16(fp)
 10068a8:	e0bffe17 	ldw	r2,-8(fp)
 10068ac:	1885883a 	add	r2,r3,r2
 10068b0:	10800003 	ldbu	r2,0(r2)
 10068b4:	10c03fcc 	andi	r3,r2,255
 10068b8:	18c0201c 	xori	r3,r3,128
 10068bc:	18ffe004 	addi	r3,r3,-128
 10068c0:	2005883a 	mov	r2,r4
 10068c4:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 10068c8:	e0bffc17 	ldw	r2,-16(fp)
 10068cc:	10800044 	addi	r2,r2,1
 10068d0:	e0bffc15 	stw	r2,-16(fp)
 10068d4:	e0fffc17 	ldw	r3,-16(fp)
 10068d8:	e0bfff17 	ldw	r2,-4(fp)
 10068dc:	18bfee36 	bltu	r3,r2,1006898 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 10068e0:	e037883a 	mov	sp,fp
 10068e4:	df000017 	ldw	fp,0(sp)
 10068e8:	dec00104 	addi	sp,sp,4
 10068ec:	f800283a 	ret

010068f0 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 10068f0:	defffd04 	addi	sp,sp,-12
 10068f4:	df000215 	stw	fp,8(sp)
 10068f8:	df000204 	addi	fp,sp,8
 10068fc:	e13ffe15 	stw	r4,-8(fp)
 1006900:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 1006904:	00000d06 	br	100693c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1006908:	e0bffe17 	ldw	r2,-8(fp)
 100690c:	10800a17 	ldw	r2,40(r2)
 1006910:	11000044 	addi	r4,r2,1
 1006914:	e0bfff17 	ldw	r2,-4(fp)
 1006918:	10800003 	ldbu	r2,0(r2)
 100691c:	10c03fcc 	andi	r3,r2,255
 1006920:	18c0201c 	xori	r3,r3,128
 1006924:	18ffe004 	addi	r3,r3,-128
 1006928:	2005883a 	mov	r2,r4
 100692c:	10c00025 	stbio	r3,0(r2)
		++ptr;
 1006930:	e0bfff17 	ldw	r2,-4(fp)
 1006934:	10800044 	addi	r2,r2,1
 1006938:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 100693c:	e0bfff17 	ldw	r2,-4(fp)
 1006940:	10800003 	ldbu	r2,0(r2)
 1006944:	10803fcc 	andi	r2,r2,255
 1006948:	1080201c 	xori	r2,r2,128
 100694c:	10bfe004 	addi	r2,r2,-128
 1006950:	1004c03a 	cmpne	r2,r2,zero
 1006954:	103fec1e 	bne	r2,zero,1006908 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 1006958:	e037883a 	mov	sp,fp
 100695c:	df000017 	ldw	fp,0(sp)
 1006960:	dec00104 	addi	sp,sp,4
 1006964:	f800283a 	ret

01006968 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 1006968:	defffb04 	addi	sp,sp,-20
 100696c:	dfc00415 	stw	ra,16(sp)
 1006970:	df000315 	stw	fp,12(sp)
 1006974:	df000304 	addi	fp,sp,12
 1006978:	e13ffd15 	stw	r4,-12(fp)
 100697c:	e17ffe15 	stw	r5,-8(fp)
 1006980:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 1006984:	e0bffd17 	ldw	r2,-12(fp)
 1006988:	10800017 	ldw	r2,0(r2)
 100698c:	1009883a 	mov	r4,r2
 1006990:	e1bfff17 	ldw	r6,-4(fp)
 1006994:	e17ffe17 	ldw	r5,-8(fp)
 1006998:	10068780 	call	1006878 <alt_up_character_lcd_write>
	return 0;
 100699c:	0005883a 	mov	r2,zero
}
 10069a0:	e037883a 	mov	sp,fp
 10069a4:	dfc00117 	ldw	ra,4(sp)
 10069a8:	df000017 	ldw	fp,0(sp)
 10069ac:	dec00204 	addi	sp,sp,8
 10069b0:	f800283a 	ret

010069b4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 10069b4:	defff904 	addi	sp,sp,-28
 10069b8:	dfc00615 	stw	ra,24(sp)
 10069bc:	df000515 	stw	fp,20(sp)
 10069c0:	df000504 	addi	fp,sp,20
 10069c4:	e13ffc15 	stw	r4,-16(fp)
 10069c8:	e17ffd15 	stw	r5,-12(fp)
 10069cc:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 10069d0:	e0bffd17 	ldw	r2,-12(fp)
 10069d4:	10800a28 	cmpgeui	r2,r2,40
 10069d8:	1000031e 	bne	r2,zero,10069e8 <alt_up_character_lcd_set_cursor_pos+0x34>
 10069dc:	e0bffe17 	ldw	r2,-8(fp)
 10069e0:	108000b0 	cmpltui	r2,r2,2
 10069e4:	1000031e 	bne	r2,zero,10069f4 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 10069e8:	00bfffc4 	movi	r2,-1
 10069ec:	e0bfff15 	stw	r2,-4(fp)
 10069f0:	00000806 	br	1006a14 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 10069f4:	e13ffd17 	ldw	r4,-12(fp)
 10069f8:	e17ffe17 	ldw	r5,-8(fp)
 10069fc:	10067540 	call	1006754 <get_DDRAM_addr>
 1006a00:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1006a04:	e17ffb03 	ldbu	r5,-20(fp)
 1006a08:	e13ffc17 	ldw	r4,-16(fp)
 1006a0c:	10067d00 	call	10067d0 <alt_up_character_lcd_send_cmd>
	return 0;
 1006a10:	e03fff15 	stw	zero,-4(fp)
 1006a14:	e0bfff17 	ldw	r2,-4(fp)
}
 1006a18:	e037883a 	mov	sp,fp
 1006a1c:	dfc00117 	ldw	ra,4(sp)
 1006a20:	df000017 	ldw	fp,0(sp)
 1006a24:	dec00204 	addi	sp,sp,8
 1006a28:	f800283a 	ret

01006a2c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1006a2c:	defff904 	addi	sp,sp,-28
 1006a30:	dfc00615 	stw	ra,24(sp)
 1006a34:	df000515 	stw	fp,20(sp)
 1006a38:	df000504 	addi	fp,sp,20
 1006a3c:	e13ffc15 	stw	r4,-16(fp)
 1006a40:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1006a44:	e0bffd17 	ldw	r2,-12(fp)
 1006a48:	1005003a 	cmpeq	r2,r2,zero
 1006a4c:	10001e1e 	bne	r2,zero,1006ac8 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 1006a50:	e0bffd17 	ldw	r2,-12(fp)
 1006a54:	10800050 	cmplti	r2,r2,1
 1006a58:	1000031e 	bne	r2,zero,1006a68 <alt_up_character_lcd_shift_cursor+0x3c>
 1006a5c:	00800504 	movi	r2,20
 1006a60:	e0bfff05 	stb	r2,-4(fp)
 1006a64:	00000206 	br	1006a70 <alt_up_character_lcd_shift_cursor+0x44>
 1006a68:	00c00404 	movi	r3,16
 1006a6c:	e0ffff05 	stb	r3,-4(fp)
 1006a70:	e0bfff03 	ldbu	r2,-4(fp)
 1006a74:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1006a78:	e0fffd17 	ldw	r3,-12(fp)
 1006a7c:	e0fffe15 	stw	r3,-8(fp)
 1006a80:	e0fffe17 	ldw	r3,-8(fp)
 1006a84:	1804403a 	cmpge	r2,r3,zero
 1006a88:	1000031e 	bne	r2,zero,1006a98 <alt_up_character_lcd_shift_cursor+0x6c>
 1006a8c:	e0bffe17 	ldw	r2,-8(fp)
 1006a90:	0085c83a 	sub	r2,zero,r2
 1006a94:	e0bffe15 	stw	r2,-8(fp)
 1006a98:	e0fffe17 	ldw	r3,-8(fp)
 1006a9c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1006aa0:	00000306 	br	1006ab0 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1006aa4:	e17ffb43 	ldbu	r5,-19(fp)
 1006aa8:	e13ffc17 	ldw	r4,-16(fp)
 1006aac:	10067d00 	call	10067d0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1006ab0:	e0bffb03 	ldbu	r2,-20(fp)
 1006ab4:	10bfffc4 	addi	r2,r2,-1
 1006ab8:	e0bffb05 	stb	r2,-20(fp)
 1006abc:	e0bffb03 	ldbu	r2,-20(fp)
 1006ac0:	10803fd8 	cmpnei	r2,r2,255
 1006ac4:	103ff71e 	bne	r2,zero,1006aa4 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1006ac8:	e037883a 	mov	sp,fp
 1006acc:	dfc00117 	ldw	ra,4(sp)
 1006ad0:	df000017 	ldw	fp,0(sp)
 1006ad4:	dec00204 	addi	sp,sp,8
 1006ad8:	f800283a 	ret

01006adc <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1006adc:	defff904 	addi	sp,sp,-28
 1006ae0:	dfc00615 	stw	ra,24(sp)
 1006ae4:	df000515 	stw	fp,20(sp)
 1006ae8:	df000504 	addi	fp,sp,20
 1006aec:	e13ffc15 	stw	r4,-16(fp)
 1006af0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1006af4:	e0bffd17 	ldw	r2,-12(fp)
 1006af8:	1005003a 	cmpeq	r2,r2,zero
 1006afc:	10001e1e 	bne	r2,zero,1006b78 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 1006b00:	e0bffd17 	ldw	r2,-12(fp)
 1006b04:	10800050 	cmplti	r2,r2,1
 1006b08:	1000031e 	bne	r2,zero,1006b18 <alt_up_character_lcd_shift_display+0x3c>
 1006b0c:	00800704 	movi	r2,28
 1006b10:	e0bfff05 	stb	r2,-4(fp)
 1006b14:	00000206 	br	1006b20 <alt_up_character_lcd_shift_display+0x44>
 1006b18:	00c00604 	movi	r3,24
 1006b1c:	e0ffff05 	stb	r3,-4(fp)
 1006b20:	e0bfff03 	ldbu	r2,-4(fp)
 1006b24:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1006b28:	e0fffd17 	ldw	r3,-12(fp)
 1006b2c:	e0fffe15 	stw	r3,-8(fp)
 1006b30:	e0fffe17 	ldw	r3,-8(fp)
 1006b34:	1804403a 	cmpge	r2,r3,zero
 1006b38:	1000031e 	bne	r2,zero,1006b48 <alt_up_character_lcd_shift_display+0x6c>
 1006b3c:	e0bffe17 	ldw	r2,-8(fp)
 1006b40:	0085c83a 	sub	r2,zero,r2
 1006b44:	e0bffe15 	stw	r2,-8(fp)
 1006b48:	e0fffe17 	ldw	r3,-8(fp)
 1006b4c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1006b50:	00000306 	br	1006b60 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1006b54:	e17ffb43 	ldbu	r5,-19(fp)
 1006b58:	e13ffc17 	ldw	r4,-16(fp)
 1006b5c:	10067d00 	call	10067d0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1006b60:	e0bffb03 	ldbu	r2,-20(fp)
 1006b64:	10bfffc4 	addi	r2,r2,-1
 1006b68:	e0bffb05 	stb	r2,-20(fp)
 1006b6c:	e0bffb03 	ldbu	r2,-20(fp)
 1006b70:	10803fd8 	cmpnei	r2,r2,255
 1006b74:	103ff71e 	bne	r2,zero,1006b54 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1006b78:	e037883a 	mov	sp,fp
 1006b7c:	dfc00117 	ldw	ra,4(sp)
 1006b80:	df000017 	ldw	fp,0(sp)
 1006b84:	dec00204 	addi	sp,sp,8
 1006b88:	f800283a 	ret

01006b8c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 1006b8c:	defff904 	addi	sp,sp,-28
 1006b90:	dfc00615 	stw	ra,24(sp)
 1006b94:	df000515 	stw	fp,20(sp)
 1006b98:	df000504 	addi	fp,sp,20
 1006b9c:	e13ffc15 	stw	r4,-16(fp)
 1006ba0:	e17ffd15 	stw	r5,-12(fp)
 1006ba4:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 1006ba8:	e0bffd17 	ldw	r2,-12(fp)
 1006bac:	10800a28 	cmpgeui	r2,r2,40
 1006bb0:	1000031e 	bne	r2,zero,1006bc0 <alt_up_character_lcd_erase_pos+0x34>
 1006bb4:	e0bffe17 	ldw	r2,-8(fp)
 1006bb8:	108000b0 	cmpltui	r2,r2,2
 1006bbc:	1000031e 	bne	r2,zero,1006bcc <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 1006bc0:	00bfffc4 	movi	r2,-1
 1006bc4:	e0bfff15 	stw	r2,-4(fp)
 1006bc8:	00000e06 	br	1006c04 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1006bcc:	e13ffd17 	ldw	r4,-12(fp)
 1006bd0:	e17ffe17 	ldw	r5,-8(fp)
 1006bd4:	10067540 	call	1006754 <get_DDRAM_addr>
 1006bd8:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1006bdc:	e17ffb03 	ldbu	r5,-20(fp)
 1006be0:	e13ffc17 	ldw	r4,-16(fp)
 1006be4:	10067d00 	call	10067d0 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 1006be8:	e0bffc17 	ldw	r2,-16(fp)
 1006bec:	10800a17 	ldw	r2,40(r2)
 1006bf0:	10800044 	addi	r2,r2,1
 1006bf4:	1007883a 	mov	r3,r2
 1006bf8:	00800084 	movi	r2,2
 1006bfc:	18800025 	stbio	r2,0(r3)
	return 0;
 1006c00:	e03fff15 	stw	zero,-4(fp)
 1006c04:	e0bfff17 	ldw	r2,-4(fp)
}
 1006c08:	e037883a 	mov	sp,fp
 1006c0c:	dfc00117 	ldw	ra,4(sp)
 1006c10:	df000017 	ldw	fp,0(sp)
 1006c14:	dec00204 	addi	sp,sp,8
 1006c18:	f800283a 	ret

01006c1c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1006c1c:	defffd04 	addi	sp,sp,-12
 1006c20:	dfc00215 	stw	ra,8(sp)
 1006c24:	df000115 	stw	fp,4(sp)
 1006c28:	df000104 	addi	fp,sp,4
 1006c2c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1006c30:	e13fff17 	ldw	r4,-4(fp)
 1006c34:	01400304 	movi	r5,12
 1006c38:	10067d00 	call	10067d0 <alt_up_character_lcd_send_cmd>
}
 1006c3c:	e037883a 	mov	sp,fp
 1006c40:	dfc00117 	ldw	ra,4(sp)
 1006c44:	df000017 	ldw	fp,0(sp)
 1006c48:	dec00204 	addi	sp,sp,8
 1006c4c:	f800283a 	ret

01006c50 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 1006c50:	defffd04 	addi	sp,sp,-12
 1006c54:	dfc00215 	stw	ra,8(sp)
 1006c58:	df000115 	stw	fp,4(sp)
 1006c5c:	df000104 	addi	fp,sp,4
 1006c60:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 1006c64:	e13fff17 	ldw	r4,-4(fp)
 1006c68:	014003c4 	movi	r5,15
 1006c6c:	10067d00 	call	10067d0 <alt_up_character_lcd_send_cmd>
}
 1006c70:	e037883a 	mov	sp,fp
 1006c74:	dfc00117 	ldw	ra,4(sp)
 1006c78:	df000017 	ldw	fp,0(sp)
 1006c7c:	dec00204 	addi	sp,sp,8
 1006c80:	f800283a 	ret

01006c84 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1006c84:	defffd04 	addi	sp,sp,-12
 1006c88:	df000215 	stw	fp,8(sp)
 1006c8c:	df000204 	addi	fp,sp,8
 1006c90:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1006c94:	e0bfff17 	ldw	r2,-4(fp)
 1006c98:	10800a17 	ldw	r2,40(r2)
 1006c9c:	10800104 	addi	r2,r2,4
 1006ca0:	10800037 	ldwio	r2,0(r2)
 1006ca4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 1006ca8:	e0bffe17 	ldw	r2,-8(fp)
 1006cac:	10800054 	ori	r2,r2,1
 1006cb0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1006cb4:	e0bfff17 	ldw	r2,-4(fp)
 1006cb8:	10800a17 	ldw	r2,40(r2)
 1006cbc:	10800104 	addi	r2,r2,4
 1006cc0:	e0fffe17 	ldw	r3,-8(fp)
 1006cc4:	10c00035 	stwio	r3,0(r2)
}
 1006cc8:	e037883a 	mov	sp,fp
 1006ccc:	df000017 	ldw	fp,0(sp)
 1006cd0:	dec00104 	addi	sp,sp,4
 1006cd4:	f800283a 	ret

01006cd8 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1006cd8:	defffd04 	addi	sp,sp,-12
 1006cdc:	df000215 	stw	fp,8(sp)
 1006ce0:	df000204 	addi	fp,sp,8
 1006ce4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1006ce8:	e0bfff17 	ldw	r2,-4(fp)
 1006cec:	10800a17 	ldw	r2,40(r2)
 1006cf0:	10800104 	addi	r2,r2,4
 1006cf4:	10800037 	ldwio	r2,0(r2)
 1006cf8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 1006cfc:	e0fffe17 	ldw	r3,-8(fp)
 1006d00:	00bfff84 	movi	r2,-2
 1006d04:	1884703a 	and	r2,r3,r2
 1006d08:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1006d0c:	e0bfff17 	ldw	r2,-4(fp)
 1006d10:	10800a17 	ldw	r2,40(r2)
 1006d14:	10800104 	addi	r2,r2,4
 1006d18:	e0fffe17 	ldw	r3,-8(fp)
 1006d1c:	10c00035 	stwio	r3,0(r2)
}
 1006d20:	e037883a 	mov	sp,fp
 1006d24:	df000017 	ldw	fp,0(sp)
 1006d28:	dec00104 	addi	sp,sp,4
 1006d2c:	f800283a 	ret

01006d30 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 1006d30:	defffd04 	addi	sp,sp,-12
 1006d34:	df000215 	stw	fp,8(sp)
 1006d38:	df000204 	addi	fp,sp,8
 1006d3c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 1006d40:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 1006d44:	e0bfff17 	ldw	r2,-4(fp)
 1006d48:	10800a17 	ldw	r2,40(r2)
 1006d4c:	10800084 	addi	r2,r2,2
 1006d50:	1080002b 	ldhuio	r2,0(r2)
 1006d54:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 1006d58:	e0bffe0b 	ldhu	r2,-8(fp)
}
 1006d5c:	e037883a 	mov	sp,fp
 1006d60:	df000017 	ldw	fp,0(sp)
 1006d64:	dec00104 	addi	sp,sp,4
 1006d68:	f800283a 	ret

01006d6c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 1006d6c:	defffd04 	addi	sp,sp,-12
 1006d70:	df000215 	stw	fp,8(sp)
 1006d74:	df000204 	addi	fp,sp,8
 1006d78:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1006d7c:	e0bfff17 	ldw	r2,-4(fp)
 1006d80:	10800a17 	ldw	r2,40(r2)
 1006d84:	10800104 	addi	r2,r2,4
 1006d88:	10800037 	ldwio	r2,0(r2)
 1006d8c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 1006d90:	e0bffe17 	ldw	r2,-8(fp)
 1006d94:	10bfffec 	andhi	r2,r2,65535
 1006d98:	1004d43a 	srli	r2,r2,16
}
 1006d9c:	e037883a 	mov	sp,fp
 1006da0:	df000017 	ldw	fp,0(sp)
 1006da4:	dec00104 	addi	sp,sp,4
 1006da8:	f800283a 	ret

01006dac <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 1006dac:	defffc04 	addi	sp,sp,-16
 1006db0:	df000315 	stw	fp,12(sp)
 1006db4:	df000304 	addi	fp,sp,12
 1006db8:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 1006dbc:	e0bffe17 	ldw	r2,-8(fp)
 1006dc0:	1080800c 	andi	r2,r2,512
 1006dc4:	1004d27a 	srli	r2,r2,9
 1006dc8:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 1006dcc:	e0bffd17 	ldw	r2,-12(fp)
 1006dd0:	1005003a 	cmpeq	r2,r2,zero
 1006dd4:	1000031e 	bne	r2,zero,1006de4 <alt_up_rs232_check_parity+0x38>
 1006dd8:	00bfffc4 	movi	r2,-1
 1006ddc:	e0bfff15 	stw	r2,-4(fp)
 1006de0:	00000106 	br	1006de8 <alt_up_rs232_check_parity+0x3c>
 1006de4:	e03fff15 	stw	zero,-4(fp)
 1006de8:	e0bfff17 	ldw	r2,-4(fp)
}
 1006dec:	e037883a 	mov	sp,fp
 1006df0:	df000017 	ldw	fp,0(sp)
 1006df4:	dec00104 	addi	sp,sp,4
 1006df8:	f800283a 	ret

01006dfc <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 1006dfc:	defffc04 	addi	sp,sp,-16
 1006e00:	df000315 	stw	fp,12(sp)
 1006e04:	df000304 	addi	fp,sp,12
 1006e08:	e13ffe15 	stw	r4,-8(fp)
 1006e0c:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 1006e10:	e0bffe17 	ldw	r2,-8(fp)
 1006e14:	10800a17 	ldw	r2,40(r2)
 1006e18:	10800037 	ldwio	r2,0(r2)
 1006e1c:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 1006e20:	e0bffe17 	ldw	r2,-8(fp)
 1006e24:	10800a17 	ldw	r2,40(r2)
 1006e28:	e0ffff03 	ldbu	r3,-4(fp)
 1006e2c:	10c00035 	stwio	r3,0(r2)
	return 0;
 1006e30:	0005883a 	mov	r2,zero
}
 1006e34:	e037883a 	mov	sp,fp
 1006e38:	df000017 	ldw	fp,0(sp)
 1006e3c:	dec00104 	addi	sp,sp,4
 1006e40:	f800283a 	ret

01006e44 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 1006e44:	defffa04 	addi	sp,sp,-24
 1006e48:	dfc00515 	stw	ra,20(sp)
 1006e4c:	df000415 	stw	fp,16(sp)
 1006e50:	df000404 	addi	fp,sp,16
 1006e54:	e13ffd15 	stw	r4,-12(fp)
 1006e58:	e17ffe15 	stw	r5,-8(fp)
 1006e5c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 1006e60:	e0bffd17 	ldw	r2,-12(fp)
 1006e64:	10800a17 	ldw	r2,40(r2)
 1006e68:	10800037 	ldwio	r2,0(r2)
 1006e6c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 1006e70:	e0bffc17 	ldw	r2,-16(fp)
 1006e74:	1007883a 	mov	r3,r2
 1006e78:	e0bffe17 	ldw	r2,-8(fp)
 1006e7c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 1006e80:	e13ffc17 	ldw	r4,-16(fp)
 1006e84:	1006dac0 	call	1006dac <alt_up_rs232_check_parity>
 1006e88:	1007883a 	mov	r3,r2
 1006e8c:	e0bfff17 	ldw	r2,-4(fp)
 1006e90:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 1006e94:	e0bffc17 	ldw	r2,-16(fp)
 1006e98:	10a0000c 	andi	r2,r2,32768
 1006e9c:	1004d3fa 	srli	r2,r2,15
 1006ea0:	10bfffc4 	addi	r2,r2,-1
}
 1006ea4:	e037883a 	mov	sp,fp
 1006ea8:	dfc00117 	ldw	ra,4(sp)
 1006eac:	df000017 	ldw	fp,0(sp)
 1006eb0:	dec00204 	addi	sp,sp,8
 1006eb4:	f800283a 	ret

01006eb8 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 1006eb8:	defff804 	addi	sp,sp,-32
 1006ebc:	dfc00715 	stw	ra,28(sp)
 1006ec0:	df000615 	stw	fp,24(sp)
 1006ec4:	df000604 	addi	fp,sp,24
 1006ec8:	e13ffd15 	stw	r4,-12(fp)
 1006ecc:	e17ffe15 	stw	r5,-8(fp)
 1006ed0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1006ed4:	e0bffd17 	ldw	r2,-12(fp)
 1006ed8:	10800017 	ldw	r2,0(r2)
 1006edc:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 1006ee0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 1006ee4:	00000c06 	br	1006f18 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 1006ee8:	e17ffe17 	ldw	r5,-8(fp)
 1006eec:	e0bffe17 	ldw	r2,-8(fp)
 1006ef0:	10800044 	addi	r2,r2,1
 1006ef4:	e0bffe15 	stw	r2,-8(fp)
 1006ef8:	e1bffc04 	addi	r6,fp,-16
 1006efc:	e13ffb17 	ldw	r4,-20(fp)
 1006f00:	1006e440 	call	1006e44 <alt_up_rs232_read_data>
 1006f04:	1004c03a 	cmpne	r2,r2,zero
 1006f08:	1000091e 	bne	r2,zero,1006f30 <alt_up_rs232_read_fd+0x78>
			count++;
 1006f0c:	e0bffa17 	ldw	r2,-24(fp)
 1006f10:	10800044 	addi	r2,r2,1
 1006f14:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 1006f18:	e0bfff17 	ldw	r2,-4(fp)
 1006f1c:	10bfffc4 	addi	r2,r2,-1
 1006f20:	e0bfff15 	stw	r2,-4(fp)
 1006f24:	e0bfff17 	ldw	r2,-4(fp)
 1006f28:	10bfffd8 	cmpnei	r2,r2,-1
 1006f2c:	103fee1e 	bne	r2,zero,1006ee8 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 1006f30:	e0bffa17 	ldw	r2,-24(fp)
}
 1006f34:	e037883a 	mov	sp,fp
 1006f38:	dfc00117 	ldw	ra,4(sp)
 1006f3c:	df000017 	ldw	fp,0(sp)
 1006f40:	dec00204 	addi	sp,sp,8
 1006f44:	f800283a 	ret

01006f48 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 1006f48:	defff904 	addi	sp,sp,-28
 1006f4c:	dfc00615 	stw	ra,24(sp)
 1006f50:	df000515 	stw	fp,20(sp)
 1006f54:	df000504 	addi	fp,sp,20
 1006f58:	e13ffd15 	stw	r4,-12(fp)
 1006f5c:	e17ffe15 	stw	r5,-8(fp)
 1006f60:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1006f64:	e0bffd17 	ldw	r2,-12(fp)
 1006f68:	10800017 	ldw	r2,0(r2)
 1006f6c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 1006f70:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 1006f74:	00000d06 	br	1006fac <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 1006f78:	e0bffe17 	ldw	r2,-8(fp)
 1006f7c:	10800003 	ldbu	r2,0(r2)
 1006f80:	11403fcc 	andi	r5,r2,255
 1006f84:	e13ffc17 	ldw	r4,-16(fp)
 1006f88:	1006dfc0 	call	1006dfc <alt_up_rs232_write_data>
 1006f8c:	1004c03a 	cmpne	r2,r2,zero
 1006f90:	10000c1e 	bne	r2,zero,1006fc4 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 1006f94:	e0bffb17 	ldw	r2,-20(fp)
 1006f98:	10800044 	addi	r2,r2,1
 1006f9c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 1006fa0:	e0bffe17 	ldw	r2,-8(fp)
 1006fa4:	10800044 	addi	r2,r2,1
 1006fa8:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 1006fac:	e0bfff17 	ldw	r2,-4(fp)
 1006fb0:	10bfffc4 	addi	r2,r2,-1
 1006fb4:	e0bfff15 	stw	r2,-4(fp)
 1006fb8:	e0bfff17 	ldw	r2,-4(fp)
 1006fbc:	10bfffd8 	cmpnei	r2,r2,-1
 1006fc0:	103fed1e 	bne	r2,zero,1006f78 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 1006fc4:	e0bffb17 	ldw	r2,-20(fp)
}
 1006fc8:	e037883a 	mov	sp,fp
 1006fcc:	dfc00117 	ldw	ra,4(sp)
 1006fd0:	df000017 	ldw	fp,0(sp)
 1006fd4:	dec00204 	addi	sp,sp,8
 1006fd8:	f800283a 	ret

01006fdc <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 1006fdc:	defffc04 	addi	sp,sp,-16
 1006fe0:	dfc00315 	stw	ra,12(sp)
 1006fe4:	df000215 	stw	fp,8(sp)
 1006fe8:	df000204 	addi	fp,sp,8
 1006fec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 1006ff0:	e13fff17 	ldw	r4,-4(fp)
 1006ff4:	01404074 	movhi	r5,257
 1006ff8:	29679404 	addi	r5,r5,-25008
 1006ffc:	10073900 	call	1007390 <alt_find_dev>
 1007000:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1007004:	e0bffe17 	ldw	r2,-8(fp)
}
 1007008:	e037883a 	mov	sp,fp
 100700c:	dfc00117 	ldw	ra,4(sp)
 1007010:	df000017 	ldw	fp,0(sp)
 1007014:	dec00204 	addi	sp,sp,8
 1007018:	f800283a 	ret

0100701c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100701c:	defff404 	addi	sp,sp,-48
 1007020:	df000b15 	stw	fp,44(sp)
 1007024:	df000b04 	addi	fp,sp,44
 1007028:	e13ffb15 	stw	r4,-20(fp)
 100702c:	e17ffc15 	stw	r5,-16(fp)
 1007030:	e1bffd15 	stw	r6,-12(fp)
 1007034:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1007038:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100703c:	00804074 	movhi	r2,257
 1007040:	10ae4c04 	addi	r2,r2,-18128
 1007044:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1007048:	1005003a 	cmpeq	r2,r2,zero
 100704c:	1000411e 	bne	r2,zero,1007154 <alt_alarm_start+0x138>
  {
    if (alarm)
 1007050:	e0bffb17 	ldw	r2,-20(fp)
 1007054:	1005003a 	cmpeq	r2,r2,zero
 1007058:	10003b1e 	bne	r2,zero,1007148 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 100705c:	e0fffb17 	ldw	r3,-20(fp)
 1007060:	e0bffd17 	ldw	r2,-12(fp)
 1007064:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1007068:	e0fffb17 	ldw	r3,-20(fp)
 100706c:	e0bffe17 	ldw	r2,-8(fp)
 1007070:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1007074:	0005303a 	rdctl	r2,status
 1007078:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100707c:	e0fff817 	ldw	r3,-32(fp)
 1007080:	00bfff84 	movi	r2,-2
 1007084:	1884703a 	and	r2,r3,r2
 1007088:	1001703a 	wrctl	status,r2
  
  return context;
 100708c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1007090:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1007094:	00804074 	movhi	r2,257
 1007098:	10ae4d04 	addi	r2,r2,-18124
 100709c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 10070a0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 10070a4:	e0fffc17 	ldw	r3,-16(fp)
 10070a8:	e0bff917 	ldw	r2,-28(fp)
 10070ac:	1885883a 	add	r2,r3,r2
 10070b0:	10c00044 	addi	r3,r2,1
 10070b4:	e0bffb17 	ldw	r2,-20(fp)
 10070b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 10070bc:	e0bffb17 	ldw	r2,-20(fp)
 10070c0:	10c00217 	ldw	r3,8(r2)
 10070c4:	e0bff917 	ldw	r2,-28(fp)
 10070c8:	1880042e 	bgeu	r3,r2,10070dc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 10070cc:	e0fffb17 	ldw	r3,-20(fp)
 10070d0:	00800044 	movi	r2,1
 10070d4:	18800405 	stb	r2,16(r3)
 10070d8:	00000206 	br	10070e4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 10070dc:	e0bffb17 	ldw	r2,-20(fp)
 10070e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 10070e4:	e0fffb17 	ldw	r3,-20(fp)
 10070e8:	00804074 	movhi	r2,257
 10070ec:	10a79a04 	addi	r2,r2,-24984
 10070f0:	e0bff615 	stw	r2,-40(fp)
 10070f4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10070f8:	e0fff717 	ldw	r3,-36(fp)
 10070fc:	e0bff617 	ldw	r2,-40(fp)
 1007100:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1007104:	e0bff617 	ldw	r2,-40(fp)
 1007108:	10c00017 	ldw	r3,0(r2)
 100710c:	e0bff717 	ldw	r2,-36(fp)
 1007110:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1007114:	e0bff617 	ldw	r2,-40(fp)
 1007118:	10c00017 	ldw	r3,0(r2)
 100711c:	e0bff717 	ldw	r2,-36(fp)
 1007120:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1007124:	e0fff617 	ldw	r3,-40(fp)
 1007128:	e0bff717 	ldw	r2,-36(fp)
 100712c:	18800015 	stw	r2,0(r3)
 1007130:	e0bffa17 	ldw	r2,-24(fp)
 1007134:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007138:	e0bff517 	ldw	r2,-44(fp)
 100713c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1007140:	e03fff15 	stw	zero,-4(fp)
 1007144:	00000506 	br	100715c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1007148:	00bffa84 	movi	r2,-22
 100714c:	e0bfff15 	stw	r2,-4(fp)
 1007150:	00000206 	br	100715c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1007154:	00bfde84 	movi	r2,-134
 1007158:	e0bfff15 	stw	r2,-4(fp)
 100715c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1007160:	e037883a 	mov	sp,fp
 1007164:	df000017 	ldw	fp,0(sp)
 1007168:	dec00104 	addi	sp,sp,4
 100716c:	f800283a 	ret

01007170 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1007170:	defffe04 	addi	sp,sp,-8
 1007174:	df000115 	stw	fp,4(sp)
 1007178:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100717c:	e03fff15 	stw	zero,-4(fp)
 1007180:	00000506 	br	1007198 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1007184:	e0bfff17 	ldw	r2,-4(fp)
 1007188:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100718c:	e0bfff17 	ldw	r2,-4(fp)
 1007190:	10800804 	addi	r2,r2,32
 1007194:	e0bfff15 	stw	r2,-4(fp)
 1007198:	e0bfff17 	ldw	r2,-4(fp)
 100719c:	10820030 	cmpltui	r2,r2,2048
 10071a0:	103ff81e 	bne	r2,zero,1007184 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 10071a4:	e037883a 	mov	sp,fp
 10071a8:	df000017 	ldw	fp,0(sp)
 10071ac:	dec00104 	addi	sp,sp,4
 10071b0:	f800283a 	ret

010071b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 10071b4:	defff904 	addi	sp,sp,-28
 10071b8:	dfc00615 	stw	ra,24(sp)
 10071bc:	df000515 	stw	fp,20(sp)
 10071c0:	df000504 	addi	fp,sp,20
 10071c4:	e13ffd15 	stw	r4,-12(fp)
 10071c8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 10071cc:	e0bffd17 	ldw	r2,-12(fp)
 10071d0:	1005003a 	cmpeq	r2,r2,zero
 10071d4:	1000041e 	bne	r2,zero,10071e8 <alt_dev_llist_insert+0x34>
 10071d8:	e0bffd17 	ldw	r2,-12(fp)
 10071dc:	10800217 	ldw	r2,8(r2)
 10071e0:	1004c03a 	cmpne	r2,r2,zero
 10071e4:	1000071e 	bne	r2,zero,1007204 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 10071e8:	10072680 	call	1007268 <alt_get_errno>
 10071ec:	1007883a 	mov	r3,r2
 10071f0:	00800584 	movi	r2,22
 10071f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 10071f8:	00bffa84 	movi	r2,-22
 10071fc:	e0bfff15 	stw	r2,-4(fp)
 1007200:	00001306 	br	1007250 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1007204:	e0fffd17 	ldw	r3,-12(fp)
 1007208:	e0bffe17 	ldw	r2,-8(fp)
 100720c:	e0bffb15 	stw	r2,-20(fp)
 1007210:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1007214:	e0fffc17 	ldw	r3,-16(fp)
 1007218:	e0bffb17 	ldw	r2,-20(fp)
 100721c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1007220:	e0bffb17 	ldw	r2,-20(fp)
 1007224:	10c00017 	ldw	r3,0(r2)
 1007228:	e0bffc17 	ldw	r2,-16(fp)
 100722c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1007230:	e0bffb17 	ldw	r2,-20(fp)
 1007234:	10c00017 	ldw	r3,0(r2)
 1007238:	e0bffc17 	ldw	r2,-16(fp)
 100723c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1007240:	e0fffb17 	ldw	r3,-20(fp)
 1007244:	e0bffc17 	ldw	r2,-16(fp)
 1007248:	18800015 	stw	r2,0(r3)

  return 0;  
 100724c:	e03fff15 	stw	zero,-4(fp)
 1007250:	e0bfff17 	ldw	r2,-4(fp)
}
 1007254:	e037883a 	mov	sp,fp
 1007258:	dfc00117 	ldw	ra,4(sp)
 100725c:	df000017 	ldw	fp,0(sp)
 1007260:	dec00204 	addi	sp,sp,8
 1007264:	f800283a 	ret

01007268 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1007268:	defffd04 	addi	sp,sp,-12
 100726c:	dfc00215 	stw	ra,8(sp)
 1007270:	df000115 	stw	fp,4(sp)
 1007274:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1007278:	00804074 	movhi	r2,257
 100727c:	10a79704 	addi	r2,r2,-24996
 1007280:	10800017 	ldw	r2,0(r2)
 1007284:	1005003a 	cmpeq	r2,r2,zero
 1007288:	1000061e 	bne	r2,zero,10072a4 <alt_get_errno+0x3c>
 100728c:	00804074 	movhi	r2,257
 1007290:	10a79704 	addi	r2,r2,-24996
 1007294:	10800017 	ldw	r2,0(r2)
 1007298:	103ee83a 	callr	r2
 100729c:	e0bfff15 	stw	r2,-4(fp)
 10072a0:	00000306 	br	10072b0 <alt_get_errno+0x48>
 10072a4:	00804074 	movhi	r2,257
 10072a8:	10ae4704 	addi	r2,r2,-18148
 10072ac:	e0bfff15 	stw	r2,-4(fp)
 10072b0:	e0bfff17 	ldw	r2,-4(fp)
}
 10072b4:	e037883a 	mov	sp,fp
 10072b8:	dfc00117 	ldw	ra,4(sp)
 10072bc:	df000017 	ldw	fp,0(sp)
 10072c0:	dec00204 	addi	sp,sp,8
 10072c4:	f800283a 	ret

010072c8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 10072c8:	defffd04 	addi	sp,sp,-12
 10072cc:	dfc00215 	stw	ra,8(sp)
 10072d0:	df000115 	stw	fp,4(sp)
 10072d4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10072d8:	00bfff04 	movi	r2,-4
 10072dc:	00c04074 	movhi	r3,257
 10072e0:	18e09304 	addi	r3,r3,-32180
 10072e4:	1885883a 	add	r2,r3,r2
 10072e8:	e0bfff15 	stw	r2,-4(fp)
 10072ec:	00000606 	br	1007308 <_do_ctors+0x40>
        (*ctor) (); 
 10072f0:	e0bfff17 	ldw	r2,-4(fp)
 10072f4:	10800017 	ldw	r2,0(r2)
 10072f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10072fc:	e0bfff17 	ldw	r2,-4(fp)
 1007300:	10bfff04 	addi	r2,r2,-4
 1007304:	e0bfff15 	stw	r2,-4(fp)
 1007308:	e0ffff17 	ldw	r3,-4(fp)
 100730c:	00804074 	movhi	r2,257
 1007310:	10a09204 	addi	r2,r2,-32184
 1007314:	18bff62e 	bgeu	r3,r2,10072f0 <_do_ctors+0x28>
        (*ctor) (); 
}
 1007318:	e037883a 	mov	sp,fp
 100731c:	dfc00117 	ldw	ra,4(sp)
 1007320:	df000017 	ldw	fp,0(sp)
 1007324:	dec00204 	addi	sp,sp,8
 1007328:	f800283a 	ret

0100732c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 100732c:	defffd04 	addi	sp,sp,-12
 1007330:	dfc00215 	stw	ra,8(sp)
 1007334:	df000115 	stw	fp,4(sp)
 1007338:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100733c:	00bfff04 	movi	r2,-4
 1007340:	00c04074 	movhi	r3,257
 1007344:	18e09304 	addi	r3,r3,-32180
 1007348:	1885883a 	add	r2,r3,r2
 100734c:	e0bfff15 	stw	r2,-4(fp)
 1007350:	00000606 	br	100736c <_do_dtors+0x40>
        (*dtor) (); 
 1007354:	e0bfff17 	ldw	r2,-4(fp)
 1007358:	10800017 	ldw	r2,0(r2)
 100735c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1007360:	e0bfff17 	ldw	r2,-4(fp)
 1007364:	10bfff04 	addi	r2,r2,-4
 1007368:	e0bfff15 	stw	r2,-4(fp)
 100736c:	e0ffff17 	ldw	r3,-4(fp)
 1007370:	00804074 	movhi	r2,257
 1007374:	10a09304 	addi	r2,r2,-32180
 1007378:	18bff62e 	bgeu	r3,r2,1007354 <_do_dtors+0x28>
        (*dtor) (); 
}
 100737c:	e037883a 	mov	sp,fp
 1007380:	dfc00117 	ldw	ra,4(sp)
 1007384:	df000017 	ldw	fp,0(sp)
 1007388:	dec00204 	addi	sp,sp,8
 100738c:	f800283a 	ret

01007390 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1007390:	defff904 	addi	sp,sp,-28
 1007394:	dfc00615 	stw	ra,24(sp)
 1007398:	df000515 	stw	fp,20(sp)
 100739c:	df000504 	addi	fp,sp,20
 10073a0:	e13ffd15 	stw	r4,-12(fp)
 10073a4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 10073a8:	e0bffe17 	ldw	r2,-8(fp)
 10073ac:	10800017 	ldw	r2,0(r2)
 10073b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 10073b4:	e13ffd17 	ldw	r4,-12(fp)
 10073b8:	100278c0 	call	100278c <strlen>
 10073bc:	10800044 	addi	r2,r2,1
 10073c0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10073c4:	00000d06 	br	10073fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 10073c8:	e0bffc17 	ldw	r2,-16(fp)
 10073cc:	11000217 	ldw	r4,8(r2)
 10073d0:	e1bffb17 	ldw	r6,-20(fp)
 10073d4:	e17ffd17 	ldw	r5,-12(fp)
 10073d8:	1007e8c0 	call	1007e8c <memcmp>
 10073dc:	1004c03a 	cmpne	r2,r2,zero
 10073e0:	1000031e 	bne	r2,zero,10073f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 10073e4:	e0bffc17 	ldw	r2,-16(fp)
 10073e8:	e0bfff15 	stw	r2,-4(fp)
 10073ec:	00000706 	br	100740c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 10073f0:	e0bffc17 	ldw	r2,-16(fp)
 10073f4:	10800017 	ldw	r2,0(r2)
 10073f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10073fc:	e0fffe17 	ldw	r3,-8(fp)
 1007400:	e0bffc17 	ldw	r2,-16(fp)
 1007404:	10fff01e 	bne	r2,r3,10073c8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1007408:	e03fff15 	stw	zero,-4(fp)
 100740c:	e0bfff17 	ldw	r2,-4(fp)
}
 1007410:	e037883a 	mov	sp,fp
 1007414:	dfc00117 	ldw	ra,4(sp)
 1007418:	df000017 	ldw	fp,0(sp)
 100741c:	dec00204 	addi	sp,sp,8
 1007420:	f800283a 	ret

01007424 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1007424:	defffe04 	addi	sp,sp,-8
 1007428:	dfc00115 	stw	ra,4(sp)
 100742c:	df000015 	stw	fp,0(sp)
 1007430:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1007434:	0009883a 	mov	r4,zero
 1007438:	01500004 	movi	r5,16384
 100743c:	1007db00 	call	1007db0 <alt_icache_flush>
#endif
}
 1007440:	e037883a 	mov	sp,fp
 1007444:	dfc00117 	ldw	ra,4(sp)
 1007448:	df000017 	ldw	fp,0(sp)
 100744c:	dec00204 	addi	sp,sp,8
 1007450:	f800283a 	ret

01007454 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1007454:	defff904 	addi	sp,sp,-28
 1007458:	dfc00615 	stw	ra,24(sp)
 100745c:	df000515 	stw	fp,20(sp)
 1007460:	df000504 	addi	fp,sp,20
 1007464:	e13ffc15 	stw	r4,-16(fp)
 1007468:	e17ffd15 	stw	r5,-12(fp)
 100746c:	e1bffe15 	stw	r6,-8(fp)
 1007470:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1007474:	e13ffd17 	ldw	r4,-12(fp)
 1007478:	e17ffe17 	ldw	r5,-8(fp)
 100747c:	e1bfff17 	ldw	r6,-4(fp)
 1007480:	100782c0 	call	100782c <open>
 1007484:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1007488:	e0bffb17 	ldw	r2,-20(fp)
 100748c:	1004803a 	cmplt	r2,r2,zero
 1007490:	10001c1e 	bne	r2,zero,1007504 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1007494:	e0bffb17 	ldw	r2,-20(fp)
 1007498:	00c04074 	movhi	r3,257
 100749c:	18e30004 	addi	r3,r3,-29696
 10074a0:	10800324 	muli	r2,r2,12
 10074a4:	10c5883a 	add	r2,r2,r3
 10074a8:	10c00017 	ldw	r3,0(r2)
 10074ac:	e0bffc17 	ldw	r2,-16(fp)
 10074b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 10074b4:	e0bffb17 	ldw	r2,-20(fp)
 10074b8:	00c04074 	movhi	r3,257
 10074bc:	18e30004 	addi	r3,r3,-29696
 10074c0:	10800324 	muli	r2,r2,12
 10074c4:	10c5883a 	add	r2,r2,r3
 10074c8:	10800104 	addi	r2,r2,4
 10074cc:	10c00017 	ldw	r3,0(r2)
 10074d0:	e0bffc17 	ldw	r2,-16(fp)
 10074d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 10074d8:	e0bffb17 	ldw	r2,-20(fp)
 10074dc:	00c04074 	movhi	r3,257
 10074e0:	18e30004 	addi	r3,r3,-29696
 10074e4:	10800324 	muli	r2,r2,12
 10074e8:	10c5883a 	add	r2,r2,r3
 10074ec:	10800204 	addi	r2,r2,8
 10074f0:	10c00017 	ldw	r3,0(r2)
 10074f4:	e0bffc17 	ldw	r2,-16(fp)
 10074f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 10074fc:	e13ffb17 	ldw	r4,-20(fp)
 1007500:	100582c0 	call	100582c <alt_release_fd>
  }
} 
 1007504:	e037883a 	mov	sp,fp
 1007508:	dfc00117 	ldw	ra,4(sp)
 100750c:	df000017 	ldw	fp,0(sp)
 1007510:	dec00204 	addi	sp,sp,8
 1007514:	f800283a 	ret

01007518 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1007518:	defffb04 	addi	sp,sp,-20
 100751c:	dfc00415 	stw	ra,16(sp)
 1007520:	df000315 	stw	fp,12(sp)
 1007524:	df000304 	addi	fp,sp,12
 1007528:	e13ffd15 	stw	r4,-12(fp)
 100752c:	e17ffe15 	stw	r5,-8(fp)
 1007530:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1007534:	01004074 	movhi	r4,257
 1007538:	21230304 	addi	r4,r4,-29684
 100753c:	e17ffd17 	ldw	r5,-12(fp)
 1007540:	01800044 	movi	r6,1
 1007544:	01c07fc4 	movi	r7,511
 1007548:	10074540 	call	1007454 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100754c:	01004074 	movhi	r4,257
 1007550:	21230004 	addi	r4,r4,-29696
 1007554:	e17ffe17 	ldw	r5,-8(fp)
 1007558:	000d883a 	mov	r6,zero
 100755c:	01c07fc4 	movi	r7,511
 1007560:	10074540 	call	1007454 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1007564:	01004074 	movhi	r4,257
 1007568:	21230604 	addi	r4,r4,-29672
 100756c:	e17fff17 	ldw	r5,-4(fp)
 1007570:	01800044 	movi	r6,1
 1007574:	01c07fc4 	movi	r7,511
 1007578:	10074540 	call	1007454 <alt_open_fd>
}  
 100757c:	e037883a 	mov	sp,fp
 1007580:	dfc00117 	ldw	ra,4(sp)
 1007584:	df000017 	ldw	fp,0(sp)
 1007588:	dec00204 	addi	sp,sp,8
 100758c:	f800283a 	ret

01007590 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 1007590:	deffef04 	addi	sp,sp,-68
 1007594:	df001015 	stw	fp,64(sp)
 1007598:	df001004 	addi	fp,sp,64
 100759c:	e13ffc15 	stw	r4,-16(fp)
 10075a0:	e17ffd15 	stw	r5,-12(fp)
 10075a4:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 10075a8:	00bffa84 	movi	r2,-22
 10075ac:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 10075b0:	e0bffc17 	ldw	r2,-16(fp)
 10075b4:	10800828 	cmpgeui	r2,r2,32
 10075b8:	1000601e 	bne	r2,zero,100773c <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10075bc:	0005303a 	rdctl	r2,status
 10075c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10075c4:	e0fff917 	ldw	r3,-28(fp)
 10075c8:	00bfff84 	movi	r2,-2
 10075cc:	1884703a 	and	r2,r3,r2
 10075d0:	1001703a 	wrctl	status,r2
  
  return context;
 10075d4:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 10075d8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 10075dc:	e0bffc17 	ldw	r2,-16(fp)
 10075e0:	00c04074 	movhi	r3,257
 10075e4:	18ee5804 	addi	r3,r3,-18080
 10075e8:	100490fa 	slli	r2,r2,3
 10075ec:	10c7883a 	add	r3,r2,r3
 10075f0:	e0bffe17 	ldw	r2,-8(fp)
 10075f4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 10075f8:	e0bffc17 	ldw	r2,-16(fp)
 10075fc:	00c04074 	movhi	r3,257
 1007600:	18ee5804 	addi	r3,r3,-18080
 1007604:	100490fa 	slli	r2,r2,3
 1007608:	10c5883a 	add	r2,r2,r3
 100760c:	10c00104 	addi	r3,r2,4
 1007610:	e0bffd17 	ldw	r2,-12(fp)
 1007614:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1007618:	e0bffe17 	ldw	r2,-8(fp)
 100761c:	1005003a 	cmpeq	r2,r2,zero
 1007620:	1000201e 	bne	r2,zero,10076a4 <alt_irq_register+0x114>
 1007624:	e0bffc17 	ldw	r2,-16(fp)
 1007628:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100762c:	0005303a 	rdctl	r2,status
 1007630:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1007634:	e0fff617 	ldw	r3,-40(fp)
 1007638:	00bfff84 	movi	r2,-2
 100763c:	1884703a 	and	r2,r3,r2
 1007640:	1001703a 	wrctl	status,r2
  
  return context;
 1007644:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1007648:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 100764c:	e0fff717 	ldw	r3,-36(fp)
 1007650:	00800044 	movi	r2,1
 1007654:	10c4983a 	sll	r2,r2,r3
 1007658:	1007883a 	mov	r3,r2
 100765c:	00804074 	movhi	r2,257
 1007660:	10ae4b04 	addi	r2,r2,-18132
 1007664:	10800017 	ldw	r2,0(r2)
 1007668:	1886b03a 	or	r3,r3,r2
 100766c:	00804074 	movhi	r2,257
 1007670:	10ae4b04 	addi	r2,r2,-18132
 1007674:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1007678:	00804074 	movhi	r2,257
 100767c:	10ae4b04 	addi	r2,r2,-18132
 1007680:	10800017 	ldw	r2,0(r2)
 1007684:	100170fa 	wrctl	ienable,r2
 1007688:	e0bff817 	ldw	r2,-32(fp)
 100768c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007690:	e0bff517 	ldw	r2,-44(fp)
 1007694:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1007698:	0005883a 	mov	r2,zero
 100769c:	e0bfff15 	stw	r2,-4(fp)
 10076a0:	00002006 	br	1007724 <alt_irq_register+0x194>
 10076a4:	e0bffc17 	ldw	r2,-16(fp)
 10076a8:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10076ac:	0005303a 	rdctl	r2,status
 10076b0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10076b4:	e0fff217 	ldw	r3,-56(fp)
 10076b8:	00bfff84 	movi	r2,-2
 10076bc:	1884703a 	and	r2,r3,r2
 10076c0:	1001703a 	wrctl	status,r2
  
  return context;
 10076c4:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10076c8:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 10076cc:	e0fff317 	ldw	r3,-52(fp)
 10076d0:	00800044 	movi	r2,1
 10076d4:	10c4983a 	sll	r2,r2,r3
 10076d8:	0084303a 	nor	r2,zero,r2
 10076dc:	1007883a 	mov	r3,r2
 10076e0:	00804074 	movhi	r2,257
 10076e4:	10ae4b04 	addi	r2,r2,-18132
 10076e8:	10800017 	ldw	r2,0(r2)
 10076ec:	1886703a 	and	r3,r3,r2
 10076f0:	00804074 	movhi	r2,257
 10076f4:	10ae4b04 	addi	r2,r2,-18132
 10076f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10076fc:	00804074 	movhi	r2,257
 1007700:	10ae4b04 	addi	r2,r2,-18132
 1007704:	10800017 	ldw	r2,0(r2)
 1007708:	100170fa 	wrctl	ienable,r2
 100770c:	e0bff417 	ldw	r2,-48(fp)
 1007710:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007714:	e0bff117 	ldw	r2,-60(fp)
 1007718:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100771c:	0005883a 	mov	r2,zero
 1007720:	e0bfff15 	stw	r2,-4(fp)
 1007724:	e0bfff17 	ldw	r2,-4(fp)
 1007728:	e0bffb15 	stw	r2,-20(fp)
 100772c:	e0bffa17 	ldw	r2,-24(fp)
 1007730:	e0bff015 	stw	r2,-64(fp)
 1007734:	e0bff017 	ldw	r2,-64(fp)
 1007738:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 100773c:	e0bffb17 	ldw	r2,-20(fp)
}
 1007740:	e037883a 	mov	sp,fp
 1007744:	df000017 	ldw	fp,0(sp)
 1007748:	dec00104 	addi	sp,sp,4
 100774c:	f800283a 	ret

01007750 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1007750:	defffc04 	addi	sp,sp,-16
 1007754:	df000315 	stw	fp,12(sp)
 1007758:	df000304 	addi	fp,sp,12
 100775c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1007760:	e0bffe17 	ldw	r2,-8(fp)
 1007764:	10800217 	ldw	r2,8(r2)
 1007768:	10d00034 	orhi	r3,r2,16384
 100776c:	e0bffe17 	ldw	r2,-8(fp)
 1007770:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1007774:	e03ffd15 	stw	zero,-12(fp)
 1007778:	00002006 	br	10077fc <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100777c:	e0bffd17 	ldw	r2,-12(fp)
 1007780:	00c04074 	movhi	r3,257
 1007784:	18e30004 	addi	r3,r3,-29696
 1007788:	10800324 	muli	r2,r2,12
 100778c:	10c5883a 	add	r2,r2,r3
 1007790:	10c00017 	ldw	r3,0(r2)
 1007794:	e0bffe17 	ldw	r2,-8(fp)
 1007798:	10800017 	ldw	r2,0(r2)
 100779c:	1880141e 	bne	r3,r2,10077f0 <alt_file_locked+0xa0>
 10077a0:	e0bffd17 	ldw	r2,-12(fp)
 10077a4:	00c04074 	movhi	r3,257
 10077a8:	18e30004 	addi	r3,r3,-29696
 10077ac:	10800324 	muli	r2,r2,12
 10077b0:	10c5883a 	add	r2,r2,r3
 10077b4:	10800204 	addi	r2,r2,8
 10077b8:	10800017 	ldw	r2,0(r2)
 10077bc:	1004403a 	cmpge	r2,r2,zero
 10077c0:	10000b1e 	bne	r2,zero,10077f0 <alt_file_locked+0xa0>
 10077c4:	e0bffd17 	ldw	r2,-12(fp)
 10077c8:	10800324 	muli	r2,r2,12
 10077cc:	1007883a 	mov	r3,r2
 10077d0:	00804074 	movhi	r2,257
 10077d4:	10a30004 	addi	r2,r2,-29696
 10077d8:	1887883a 	add	r3,r3,r2
 10077dc:	e0bffe17 	ldw	r2,-8(fp)
 10077e0:	18800326 	beq	r3,r2,10077f0 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 10077e4:	00bffcc4 	movi	r2,-13
 10077e8:	e0bfff15 	stw	r2,-4(fp)
 10077ec:	00000a06 	br	1007818 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10077f0:	e0bffd17 	ldw	r2,-12(fp)
 10077f4:	10800044 	addi	r2,r2,1
 10077f8:	e0bffd15 	stw	r2,-12(fp)
 10077fc:	00804074 	movhi	r2,257
 1007800:	10a79604 	addi	r2,r2,-25000
 1007804:	10800017 	ldw	r2,0(r2)
 1007808:	1007883a 	mov	r3,r2
 100780c:	e0bffd17 	ldw	r2,-12(fp)
 1007810:	18bfda2e 	bgeu	r3,r2,100777c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1007814:	e03fff15 	stw	zero,-4(fp)
 1007818:	e0bfff17 	ldw	r2,-4(fp)
}
 100781c:	e037883a 	mov	sp,fp
 1007820:	df000017 	ldw	fp,0(sp)
 1007824:	dec00104 	addi	sp,sp,4
 1007828:	f800283a 	ret

0100782c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100782c:	defff404 	addi	sp,sp,-48
 1007830:	dfc00b15 	stw	ra,44(sp)
 1007834:	df000a15 	stw	fp,40(sp)
 1007838:	df000a04 	addi	fp,sp,40
 100783c:	e13ffb15 	stw	r4,-20(fp)
 1007840:	e17ffc15 	stw	r5,-16(fp)
 1007844:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1007848:	00bfffc4 	movi	r2,-1
 100784c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1007850:	00bffb44 	movi	r2,-19
 1007854:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1007858:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100785c:	e13ffb17 	ldw	r4,-20(fp)
 1007860:	01404074 	movhi	r5,257
 1007864:	29679404 	addi	r5,r5,-25008
 1007868:	10073900 	call	1007390 <alt_find_dev>
 100786c:	e0bffa15 	stw	r2,-24(fp)
 1007870:	e0bffa17 	ldw	r2,-24(fp)
 1007874:	1004c03a 	cmpne	r2,r2,zero
 1007878:	1000051e 	bne	r2,zero,1007890 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100787c:	e13ffb17 	ldw	r4,-20(fp)
 1007880:	1007bd80 	call	1007bd8 <alt_find_file>
 1007884:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1007888:	00800044 	movi	r2,1
 100788c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1007890:	e0bffa17 	ldw	r2,-24(fp)
 1007894:	1005003a 	cmpeq	r2,r2,zero
 1007898:	1000301e 	bne	r2,zero,100795c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100789c:	e13ffa17 	ldw	r4,-24(fp)
 10078a0:	1007cf80 	call	1007cf8 <alt_get_fd>
 10078a4:	e0bff815 	stw	r2,-32(fp)
 10078a8:	e0bff817 	ldw	r2,-32(fp)
 10078ac:	1004403a 	cmpge	r2,r2,zero
 10078b0:	1000031e 	bne	r2,zero,10078c0 <open+0x94>
    {
      status = index;
 10078b4:	e0bff817 	ldw	r2,-32(fp)
 10078b8:	e0bff715 	stw	r2,-36(fp)
 10078bc:	00002906 	br	1007964 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 10078c0:	e0bff817 	ldw	r2,-32(fp)
 10078c4:	10800324 	muli	r2,r2,12
 10078c8:	1007883a 	mov	r3,r2
 10078cc:	00804074 	movhi	r2,257
 10078d0:	10a30004 	addi	r2,r2,-29696
 10078d4:	1885883a 	add	r2,r3,r2
 10078d8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10078dc:	e0fffc17 	ldw	r3,-16(fp)
 10078e0:	00900034 	movhi	r2,16384
 10078e4:	10bfffc4 	addi	r2,r2,-1
 10078e8:	1886703a 	and	r3,r3,r2
 10078ec:	e0bff917 	ldw	r2,-28(fp)
 10078f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 10078f4:	e0bff617 	ldw	r2,-40(fp)
 10078f8:	1004c03a 	cmpne	r2,r2,zero
 10078fc:	1000061e 	bne	r2,zero,1007918 <open+0xec>
 1007900:	e13ff917 	ldw	r4,-28(fp)
 1007904:	10077500 	call	1007750 <alt_file_locked>
 1007908:	e0bff715 	stw	r2,-36(fp)
 100790c:	e0bff717 	ldw	r2,-36(fp)
 1007910:	1004803a 	cmplt	r2,r2,zero
 1007914:	1000131e 	bne	r2,zero,1007964 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1007918:	e0bffa17 	ldw	r2,-24(fp)
 100791c:	10800317 	ldw	r2,12(r2)
 1007920:	1005003a 	cmpeq	r2,r2,zero
 1007924:	1000091e 	bne	r2,zero,100794c <open+0x120>
 1007928:	e0bffa17 	ldw	r2,-24(fp)
 100792c:	10800317 	ldw	r2,12(r2)
 1007930:	e13ff917 	ldw	r4,-28(fp)
 1007934:	e17ffb17 	ldw	r5,-20(fp)
 1007938:	e1bffc17 	ldw	r6,-16(fp)
 100793c:	e1fffd17 	ldw	r7,-12(fp)
 1007940:	103ee83a 	callr	r2
 1007944:	e0bfff15 	stw	r2,-4(fp)
 1007948:	00000106 	br	1007950 <open+0x124>
 100794c:	e03fff15 	stw	zero,-4(fp)
 1007950:	e0bfff17 	ldw	r2,-4(fp)
 1007954:	e0bff715 	stw	r2,-36(fp)
 1007958:	00000206 	br	1007964 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100795c:	00bffb44 	movi	r2,-19
 1007960:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1007964:	e0bff717 	ldw	r2,-36(fp)
 1007968:	1004403a 	cmpge	r2,r2,zero
 100796c:	1000091e 	bne	r2,zero,1007994 <open+0x168>
  {
    alt_release_fd (index);  
 1007970:	e13ff817 	ldw	r4,-32(fp)
 1007974:	100582c0 	call	100582c <alt_release_fd>
    ALT_ERRNO = -status;
 1007978:	10079b40 	call	10079b4 <alt_get_errno>
 100797c:	e0fff717 	ldw	r3,-36(fp)
 1007980:	00c7c83a 	sub	r3,zero,r3
 1007984:	10c00015 	stw	r3,0(r2)
    return -1;
 1007988:	00bfffc4 	movi	r2,-1
 100798c:	e0bffe15 	stw	r2,-8(fp)
 1007990:	00000206 	br	100799c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 1007994:	e0bff817 	ldw	r2,-32(fp)
 1007998:	e0bffe15 	stw	r2,-8(fp)
 100799c:	e0bffe17 	ldw	r2,-8(fp)
}
 10079a0:	e037883a 	mov	sp,fp
 10079a4:	dfc00117 	ldw	ra,4(sp)
 10079a8:	df000017 	ldw	fp,0(sp)
 10079ac:	dec00204 	addi	sp,sp,8
 10079b0:	f800283a 	ret

010079b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10079b4:	defffd04 	addi	sp,sp,-12
 10079b8:	dfc00215 	stw	ra,8(sp)
 10079bc:	df000115 	stw	fp,4(sp)
 10079c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10079c4:	00804074 	movhi	r2,257
 10079c8:	10a79704 	addi	r2,r2,-24996
 10079cc:	10800017 	ldw	r2,0(r2)
 10079d0:	1005003a 	cmpeq	r2,r2,zero
 10079d4:	1000061e 	bne	r2,zero,10079f0 <alt_get_errno+0x3c>
 10079d8:	00804074 	movhi	r2,257
 10079dc:	10a79704 	addi	r2,r2,-24996
 10079e0:	10800017 	ldw	r2,0(r2)
 10079e4:	103ee83a 	callr	r2
 10079e8:	e0bfff15 	stw	r2,-4(fp)
 10079ec:	00000306 	br	10079fc <alt_get_errno+0x48>
 10079f0:	00804074 	movhi	r2,257
 10079f4:	10ae4704 	addi	r2,r2,-18148
 10079f8:	e0bfff15 	stw	r2,-4(fp)
 10079fc:	e0bfff17 	ldw	r2,-4(fp)
}
 1007a00:	e037883a 	mov	sp,fp
 1007a04:	dfc00117 	ldw	ra,4(sp)
 1007a08:	df000017 	ldw	fp,0(sp)
 1007a0c:	dec00204 	addi	sp,sp,8
 1007a10:	f800283a 	ret

01007a14 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1007a14:	defffa04 	addi	sp,sp,-24
 1007a18:	df000515 	stw	fp,20(sp)
 1007a1c:	df000504 	addi	fp,sp,20
 1007a20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1007a24:	0005303a 	rdctl	r2,status
 1007a28:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1007a2c:	e0fffd17 	ldw	r3,-12(fp)
 1007a30:	00bfff84 	movi	r2,-2
 1007a34:	1884703a 	and	r2,r3,r2
 1007a38:	1001703a 	wrctl	status,r2
  
  return context;
 1007a3c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1007a40:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1007a44:	e0bfff17 	ldw	r2,-4(fp)
 1007a48:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1007a4c:	e0bffc17 	ldw	r2,-16(fp)
 1007a50:	10c00017 	ldw	r3,0(r2)
 1007a54:	e0bffc17 	ldw	r2,-16(fp)
 1007a58:	10800117 	ldw	r2,4(r2)
 1007a5c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1007a60:	e0bffc17 	ldw	r2,-16(fp)
 1007a64:	10c00117 	ldw	r3,4(r2)
 1007a68:	e0bffc17 	ldw	r2,-16(fp)
 1007a6c:	10800017 	ldw	r2,0(r2)
 1007a70:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1007a74:	e0fffc17 	ldw	r3,-16(fp)
 1007a78:	e0bffc17 	ldw	r2,-16(fp)
 1007a7c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1007a80:	e0fffc17 	ldw	r3,-16(fp)
 1007a84:	e0bffc17 	ldw	r2,-16(fp)
 1007a88:	18800015 	stw	r2,0(r3)
 1007a8c:	e0bffe17 	ldw	r2,-8(fp)
 1007a90:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1007a94:	e0bffb17 	ldw	r2,-20(fp)
 1007a98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1007a9c:	e037883a 	mov	sp,fp
 1007aa0:	df000017 	ldw	fp,0(sp)
 1007aa4:	dec00104 	addi	sp,sp,4
 1007aa8:	f800283a 	ret

01007aac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1007aac:	defffb04 	addi	sp,sp,-20
 1007ab0:	dfc00415 	stw	ra,16(sp)
 1007ab4:	df000315 	stw	fp,12(sp)
 1007ab8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1007abc:	d0a00c17 	ldw	r2,-32720(gp)
 1007ac0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1007ac4:	d0a6bf17 	ldw	r2,-25860(gp)
 1007ac8:	10800044 	addi	r2,r2,1
 1007acc:	d0a6bf15 	stw	r2,-25860(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1007ad0:	00003106 	br	1007b98 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1007ad4:	e0bffe17 	ldw	r2,-8(fp)
 1007ad8:	10800017 	ldw	r2,0(r2)
 1007adc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1007ae0:	e0bffe17 	ldw	r2,-8(fp)
 1007ae4:	10800403 	ldbu	r2,16(r2)
 1007ae8:	10803fcc 	andi	r2,r2,255
 1007aec:	1005003a 	cmpeq	r2,r2,zero
 1007af0:	1000051e 	bne	r2,zero,1007b08 <alt_tick+0x5c>
 1007af4:	d0a6bf17 	ldw	r2,-25860(gp)
 1007af8:	1004c03a 	cmpne	r2,r2,zero
 1007afc:	1000021e 	bne	r2,zero,1007b08 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1007b00:	e0bffe17 	ldw	r2,-8(fp)
 1007b04:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1007b08:	e0bffe17 	ldw	r2,-8(fp)
 1007b0c:	10c00217 	ldw	r3,8(r2)
 1007b10:	d0a6bf17 	ldw	r2,-25860(gp)
 1007b14:	10c01e36 	bltu	r2,r3,1007b90 <alt_tick+0xe4>
 1007b18:	e0bffe17 	ldw	r2,-8(fp)
 1007b1c:	10800403 	ldbu	r2,16(r2)
 1007b20:	10803fcc 	andi	r2,r2,255
 1007b24:	1004c03a 	cmpne	r2,r2,zero
 1007b28:	1000191e 	bne	r2,zero,1007b90 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1007b2c:	e0bffe17 	ldw	r2,-8(fp)
 1007b30:	10c00317 	ldw	r3,12(r2)
 1007b34:	e0bffe17 	ldw	r2,-8(fp)
 1007b38:	11000517 	ldw	r4,20(r2)
 1007b3c:	183ee83a 	callr	r3
 1007b40:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1007b44:	e0bffd17 	ldw	r2,-12(fp)
 1007b48:	1004c03a 	cmpne	r2,r2,zero
 1007b4c:	1000031e 	bne	r2,zero,1007b5c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1007b50:	e13ffe17 	ldw	r4,-8(fp)
 1007b54:	1007a140 	call	1007a14 <alt_alarm_stop>
 1007b58:	00000d06 	br	1007b90 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1007b5c:	e0bffe17 	ldw	r2,-8(fp)
 1007b60:	10c00217 	ldw	r3,8(r2)
 1007b64:	e0bffd17 	ldw	r2,-12(fp)
 1007b68:	1887883a 	add	r3,r3,r2
 1007b6c:	e0bffe17 	ldw	r2,-8(fp)
 1007b70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1007b74:	e0bffe17 	ldw	r2,-8(fp)
 1007b78:	10c00217 	ldw	r3,8(r2)
 1007b7c:	d0a6bf17 	ldw	r2,-25860(gp)
 1007b80:	1880032e 	bgeu	r3,r2,1007b90 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1007b84:	e0fffe17 	ldw	r3,-8(fp)
 1007b88:	00800044 	movi	r2,1
 1007b8c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1007b90:	e0bfff17 	ldw	r2,-4(fp)
 1007b94:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1007b98:	d0e00c04 	addi	r3,gp,-32720
 1007b9c:	e0bffe17 	ldw	r2,-8(fp)
 1007ba0:	10ffcc1e 	bne	r2,r3,1007ad4 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1007ba4:	e037883a 	mov	sp,fp
 1007ba8:	dfc00117 	ldw	ra,4(sp)
 1007bac:	df000017 	ldw	fp,0(sp)
 1007bb0:	dec00204 	addi	sp,sp,8
 1007bb4:	f800283a 	ret

01007bb8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1007bb8:	deffff04 	addi	sp,sp,-4
 1007bbc:	df000015 	stw	fp,0(sp)
 1007bc0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1007bc4:	000170fa 	wrctl	ienable,zero
}
 1007bc8:	e037883a 	mov	sp,fp
 1007bcc:	df000017 	ldw	fp,0(sp)
 1007bd0:	dec00104 	addi	sp,sp,4
 1007bd4:	f800283a 	ret

01007bd8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1007bd8:	defffa04 	addi	sp,sp,-24
 1007bdc:	dfc00515 	stw	ra,20(sp)
 1007be0:	df000415 	stw	fp,16(sp)
 1007be4:	df000404 	addi	fp,sp,16
 1007be8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1007bec:	00804074 	movhi	r2,257
 1007bf0:	10a79204 	addi	r2,r2,-25016
 1007bf4:	10800017 	ldw	r2,0(r2)
 1007bf8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1007bfc:	00003306 	br	1007ccc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1007c00:	e0bffd17 	ldw	r2,-12(fp)
 1007c04:	11000217 	ldw	r4,8(r2)
 1007c08:	100278c0 	call	100278c <strlen>
 1007c0c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1007c10:	e0bffd17 	ldw	r2,-12(fp)
 1007c14:	10c00217 	ldw	r3,8(r2)
 1007c18:	e0bffc17 	ldw	r2,-16(fp)
 1007c1c:	1885883a 	add	r2,r3,r2
 1007c20:	10bfffc4 	addi	r2,r2,-1
 1007c24:	10800003 	ldbu	r2,0(r2)
 1007c28:	10803fcc 	andi	r2,r2,255
 1007c2c:	1080201c 	xori	r2,r2,128
 1007c30:	10bfe004 	addi	r2,r2,-128
 1007c34:	10800bd8 	cmpnei	r2,r2,47
 1007c38:	1000031e 	bne	r2,zero,1007c48 <alt_find_file+0x70>
    {
      len -= 1;
 1007c3c:	e0bffc17 	ldw	r2,-16(fp)
 1007c40:	10bfffc4 	addi	r2,r2,-1
 1007c44:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1007c48:	e0bffc17 	ldw	r2,-16(fp)
 1007c4c:	1007883a 	mov	r3,r2
 1007c50:	e0bffe17 	ldw	r2,-8(fp)
 1007c54:	1885883a 	add	r2,r3,r2
 1007c58:	10800003 	ldbu	r2,0(r2)
 1007c5c:	10803fcc 	andi	r2,r2,255
 1007c60:	1080201c 	xori	r2,r2,128
 1007c64:	10bfe004 	addi	r2,r2,-128
 1007c68:	10800be0 	cmpeqi	r2,r2,47
 1007c6c:	10000a1e 	bne	r2,zero,1007c98 <alt_find_file+0xc0>
 1007c70:	e0bffc17 	ldw	r2,-16(fp)
 1007c74:	1007883a 	mov	r3,r2
 1007c78:	e0bffe17 	ldw	r2,-8(fp)
 1007c7c:	1885883a 	add	r2,r3,r2
 1007c80:	10800003 	ldbu	r2,0(r2)
 1007c84:	10803fcc 	andi	r2,r2,255
 1007c88:	1080201c 	xori	r2,r2,128
 1007c8c:	10bfe004 	addi	r2,r2,-128
 1007c90:	1004c03a 	cmpne	r2,r2,zero
 1007c94:	10000a1e 	bne	r2,zero,1007cc0 <alt_find_file+0xe8>
 1007c98:	e0bffd17 	ldw	r2,-12(fp)
 1007c9c:	11000217 	ldw	r4,8(r2)
 1007ca0:	e1bffc17 	ldw	r6,-16(fp)
 1007ca4:	e17ffe17 	ldw	r5,-8(fp)
 1007ca8:	1007e8c0 	call	1007e8c <memcmp>
 1007cac:	1004c03a 	cmpne	r2,r2,zero
 1007cb0:	1000031e 	bne	r2,zero,1007cc0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1007cb4:	e0bffd17 	ldw	r2,-12(fp)
 1007cb8:	e0bfff15 	stw	r2,-4(fp)
 1007cbc:	00000806 	br	1007ce0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1007cc0:	e0bffd17 	ldw	r2,-12(fp)
 1007cc4:	10800017 	ldw	r2,0(r2)
 1007cc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1007ccc:	00c04074 	movhi	r3,257
 1007cd0:	18e79204 	addi	r3,r3,-25016
 1007cd4:	e0bffd17 	ldw	r2,-12(fp)
 1007cd8:	10ffc91e 	bne	r2,r3,1007c00 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1007cdc:	e03fff15 	stw	zero,-4(fp)
 1007ce0:	e0bfff17 	ldw	r2,-4(fp)
}
 1007ce4:	e037883a 	mov	sp,fp
 1007ce8:	dfc00117 	ldw	ra,4(sp)
 1007cec:	df000017 	ldw	fp,0(sp)
 1007cf0:	dec00204 	addi	sp,sp,8
 1007cf4:	f800283a 	ret

01007cf8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1007cf8:	defffc04 	addi	sp,sp,-16
 1007cfc:	df000315 	stw	fp,12(sp)
 1007d00:	df000304 	addi	fp,sp,12
 1007d04:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1007d08:	00bffa04 	movi	r2,-24
 1007d0c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1007d10:	e03ffe15 	stw	zero,-8(fp)
 1007d14:	00001e06 	br	1007d90 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 1007d18:	e0bffe17 	ldw	r2,-8(fp)
 1007d1c:	00c04074 	movhi	r3,257
 1007d20:	18e30004 	addi	r3,r3,-29696
 1007d24:	10800324 	muli	r2,r2,12
 1007d28:	10c5883a 	add	r2,r2,r3
 1007d2c:	10800017 	ldw	r2,0(r2)
 1007d30:	1004c03a 	cmpne	r2,r2,zero
 1007d34:	1000131e 	bne	r2,zero,1007d84 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 1007d38:	e0bffe17 	ldw	r2,-8(fp)
 1007d3c:	00c04074 	movhi	r3,257
 1007d40:	18e30004 	addi	r3,r3,-29696
 1007d44:	10800324 	muli	r2,r2,12
 1007d48:	10c7883a 	add	r3,r2,r3
 1007d4c:	e0bfff17 	ldw	r2,-4(fp)
 1007d50:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1007d54:	00804074 	movhi	r2,257
 1007d58:	10a79604 	addi	r2,r2,-25000
 1007d5c:	10c00017 	ldw	r3,0(r2)
 1007d60:	e0bffe17 	ldw	r2,-8(fp)
 1007d64:	1880040e 	bge	r3,r2,1007d78 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 1007d68:	00c04074 	movhi	r3,257
 1007d6c:	18e79604 	addi	r3,r3,-25000
 1007d70:	e0bffe17 	ldw	r2,-8(fp)
 1007d74:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1007d78:	e0bffe17 	ldw	r2,-8(fp)
 1007d7c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1007d80:	00000606 	br	1007d9c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1007d84:	e0bffe17 	ldw	r2,-8(fp)
 1007d88:	10800044 	addi	r2,r2,1
 1007d8c:	e0bffe15 	stw	r2,-8(fp)
 1007d90:	e0bffe17 	ldw	r2,-8(fp)
 1007d94:	10800810 	cmplti	r2,r2,32
 1007d98:	103fdf1e 	bne	r2,zero,1007d18 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1007d9c:	e0bffd17 	ldw	r2,-12(fp)
}
 1007da0:	e037883a 	mov	sp,fp
 1007da4:	df000017 	ldw	fp,0(sp)
 1007da8:	dec00104 	addi	sp,sp,4
 1007dac:	f800283a 	ret

01007db0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1007db0:	defffb04 	addi	sp,sp,-20
 1007db4:	df000415 	stw	fp,16(sp)
 1007db8:	df000404 	addi	fp,sp,16
 1007dbc:	e13ffe15 	stw	r4,-8(fp)
 1007dc0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1007dc4:	e0bfff17 	ldw	r2,-4(fp)
 1007dc8:	10900070 	cmpltui	r2,r2,16385
 1007dcc:	1000021e 	bne	r2,zero,1007dd8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1007dd0:	00900004 	movi	r2,16384
 1007dd4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1007dd8:	e0fffe17 	ldw	r3,-8(fp)
 1007ddc:	e0bfff17 	ldw	r2,-4(fp)
 1007de0:	1885883a 	add	r2,r3,r2
 1007de4:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1007de8:	e0bffe17 	ldw	r2,-8(fp)
 1007dec:	e0bffd15 	stw	r2,-12(fp)
 1007df0:	00000506 	br	1007e08 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1007df4:	e0bffd17 	ldw	r2,-12(fp)
 1007df8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1007dfc:	e0bffd17 	ldw	r2,-12(fp)
 1007e00:	10800804 	addi	r2,r2,32
 1007e04:	e0bffd15 	stw	r2,-12(fp)
 1007e08:	e0fffd17 	ldw	r3,-12(fp)
 1007e0c:	e0bffc17 	ldw	r2,-16(fp)
 1007e10:	18bff836 	bltu	r3,r2,1007df4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1007e14:	e0bffe17 	ldw	r2,-8(fp)
 1007e18:	108007cc 	andi	r2,r2,31
 1007e1c:	1005003a 	cmpeq	r2,r2,zero
 1007e20:	1000021e 	bne	r2,zero,1007e2c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1007e24:	e0bffd17 	ldw	r2,-12(fp)
 1007e28:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1007e2c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1007e30:	e037883a 	mov	sp,fp
 1007e34:	df000017 	ldw	fp,0(sp)
 1007e38:	dec00104 	addi	sp,sp,4
 1007e3c:	f800283a 	ret

01007e40 <atexit>:
 1007e40:	200b883a 	mov	r5,r4
 1007e44:	000d883a 	mov	r6,zero
 1007e48:	0009883a 	mov	r4,zero
 1007e4c:	000f883a 	mov	r7,zero
 1007e50:	1007f001 	jmpi	1007f00 <__register_exitproc>

01007e54 <exit>:
 1007e54:	defffe04 	addi	sp,sp,-8
 1007e58:	000b883a 	mov	r5,zero
 1007e5c:	dc000015 	stw	r16,0(sp)
 1007e60:	dfc00115 	stw	ra,4(sp)
 1007e64:	2021883a 	mov	r16,r4
 1007e68:	10080380 	call	1008038 <__call_exitprocs>
 1007e6c:	00804074 	movhi	r2,257
 1007e70:	10a78f04 	addi	r2,r2,-25028
 1007e74:	11000017 	ldw	r4,0(r2)
 1007e78:	20800f17 	ldw	r2,60(r4)
 1007e7c:	10000126 	beq	r2,zero,1007e84 <exit+0x30>
 1007e80:	103ee83a 	callr	r2
 1007e84:	8009883a 	mov	r4,r16
 1007e88:	10082280 	call	1008228 <_exit>

01007e8c <memcmp>:
 1007e8c:	00c000c4 	movi	r3,3
 1007e90:	1980032e 	bgeu	r3,r6,1007ea0 <memcmp+0x14>
 1007e94:	2144b03a 	or	r2,r4,r5
 1007e98:	10c4703a 	and	r2,r2,r3
 1007e9c:	10000f26 	beq	r2,zero,1007edc <memcmp+0x50>
 1007ea0:	31ffffc4 	addi	r7,r6,-1
 1007ea4:	3000061e 	bne	r6,zero,1007ec0 <memcmp+0x34>
 1007ea8:	00000a06 	br	1007ed4 <memcmp+0x48>
 1007eac:	39ffffc4 	addi	r7,r7,-1
 1007eb0:	00bfffc4 	movi	r2,-1
 1007eb4:	21000044 	addi	r4,r4,1
 1007eb8:	29400044 	addi	r5,r5,1
 1007ebc:	38800526 	beq	r7,r2,1007ed4 <memcmp+0x48>
 1007ec0:	20c00003 	ldbu	r3,0(r4)
 1007ec4:	28800003 	ldbu	r2,0(r5)
 1007ec8:	18bff826 	beq	r3,r2,1007eac <memcmp+0x20>
 1007ecc:	1885c83a 	sub	r2,r3,r2
 1007ed0:	f800283a 	ret
 1007ed4:	0005883a 	mov	r2,zero
 1007ed8:	f800283a 	ret
 1007edc:	180f883a 	mov	r7,r3
 1007ee0:	20c00017 	ldw	r3,0(r4)
 1007ee4:	28800017 	ldw	r2,0(r5)
 1007ee8:	18bfed1e 	bne	r3,r2,1007ea0 <memcmp+0x14>
 1007eec:	31bfff04 	addi	r6,r6,-4
 1007ef0:	21000104 	addi	r4,r4,4
 1007ef4:	29400104 	addi	r5,r5,4
 1007ef8:	39bff936 	bltu	r7,r6,1007ee0 <memcmp+0x54>
 1007efc:	003fe806 	br	1007ea0 <memcmp+0x14>

01007f00 <__register_exitproc>:
 1007f00:	defffa04 	addi	sp,sp,-24
 1007f04:	00804074 	movhi	r2,257
 1007f08:	10a78f04 	addi	r2,r2,-25028
 1007f0c:	dc000015 	stw	r16,0(sp)
 1007f10:	14000017 	ldw	r16,0(r2)
 1007f14:	dd000415 	stw	r20,16(sp)
 1007f18:	2829883a 	mov	r20,r5
 1007f1c:	81405217 	ldw	r5,328(r16)
 1007f20:	dcc00315 	stw	r19,12(sp)
 1007f24:	dc800215 	stw	r18,8(sp)
 1007f28:	dc400115 	stw	r17,4(sp)
 1007f2c:	dfc00515 	stw	ra,20(sp)
 1007f30:	2023883a 	mov	r17,r4
 1007f34:	3027883a 	mov	r19,r6
 1007f38:	3825883a 	mov	r18,r7
 1007f3c:	28002526 	beq	r5,zero,1007fd4 <__register_exitproc+0xd4>
 1007f40:	29000117 	ldw	r4,4(r5)
 1007f44:	008007c4 	movi	r2,31
 1007f48:	11002716 	blt	r2,r4,1007fe8 <__register_exitproc+0xe8>
 1007f4c:	8800101e 	bne	r17,zero,1007f90 <__register_exitproc+0x90>
 1007f50:	2105883a 	add	r2,r4,r4
 1007f54:	1085883a 	add	r2,r2,r2
 1007f58:	20c00044 	addi	r3,r4,1
 1007f5c:	1145883a 	add	r2,r2,r5
 1007f60:	0009883a 	mov	r4,zero
 1007f64:	15000215 	stw	r20,8(r2)
 1007f68:	28c00115 	stw	r3,4(r5)
 1007f6c:	2005883a 	mov	r2,r4
 1007f70:	dfc00517 	ldw	ra,20(sp)
 1007f74:	dd000417 	ldw	r20,16(sp)
 1007f78:	dcc00317 	ldw	r19,12(sp)
 1007f7c:	dc800217 	ldw	r18,8(sp)
 1007f80:	dc400117 	ldw	r17,4(sp)
 1007f84:	dc000017 	ldw	r16,0(sp)
 1007f88:	dec00604 	addi	sp,sp,24
 1007f8c:	f800283a 	ret
 1007f90:	29802204 	addi	r6,r5,136
 1007f94:	00800044 	movi	r2,1
 1007f98:	110e983a 	sll	r7,r2,r4
 1007f9c:	30c04017 	ldw	r3,256(r6)
 1007fa0:	2105883a 	add	r2,r4,r4
 1007fa4:	1085883a 	add	r2,r2,r2
 1007fa8:	1185883a 	add	r2,r2,r6
 1007fac:	19c6b03a 	or	r3,r3,r7
 1007fb0:	14802015 	stw	r18,128(r2)
 1007fb4:	14c00015 	stw	r19,0(r2)
 1007fb8:	00800084 	movi	r2,2
 1007fbc:	30c04015 	stw	r3,256(r6)
 1007fc0:	88bfe31e 	bne	r17,r2,1007f50 <__register_exitproc+0x50>
 1007fc4:	30804117 	ldw	r2,260(r6)
 1007fc8:	11c4b03a 	or	r2,r2,r7
 1007fcc:	30804115 	stw	r2,260(r6)
 1007fd0:	003fdf06 	br	1007f50 <__register_exitproc+0x50>
 1007fd4:	00804074 	movhi	r2,257
 1007fd8:	10ae9804 	addi	r2,r2,-17824
 1007fdc:	100b883a 	mov	r5,r2
 1007fe0:	80805215 	stw	r2,328(r16)
 1007fe4:	003fd606 	br	1007f40 <__register_exitproc+0x40>
 1007fe8:	00800034 	movhi	r2,0
 1007fec:	10800004 	addi	r2,r2,0
 1007ff0:	1000021e 	bne	r2,zero,1007ffc <__register_exitproc+0xfc>
 1007ff4:	013fffc4 	movi	r4,-1
 1007ff8:	003fdc06 	br	1007f6c <__register_exitproc+0x6c>
 1007ffc:	01006404 	movi	r4,400
 1008000:	103ee83a 	callr	r2
 1008004:	1007883a 	mov	r3,r2
 1008008:	103ffa26 	beq	r2,zero,1007ff4 <__register_exitproc+0xf4>
 100800c:	80805217 	ldw	r2,328(r16)
 1008010:	180b883a 	mov	r5,r3
 1008014:	18000115 	stw	zero,4(r3)
 1008018:	18800015 	stw	r2,0(r3)
 100801c:	80c05215 	stw	r3,328(r16)
 1008020:	18006215 	stw	zero,392(r3)
 1008024:	18006315 	stw	zero,396(r3)
 1008028:	0009883a 	mov	r4,zero
 100802c:	883fc826 	beq	r17,zero,1007f50 <__register_exitproc+0x50>
 1008030:	003fd706 	br	1007f90 <__register_exitproc+0x90>

01008034 <register_fini>:
 1008034:	f800283a 	ret

01008038 <__call_exitprocs>:
 1008038:	00804074 	movhi	r2,257
 100803c:	10a78f04 	addi	r2,r2,-25028
 1008040:	10800017 	ldw	r2,0(r2)
 1008044:	defff304 	addi	sp,sp,-52
 1008048:	df000b15 	stw	fp,44(sp)
 100804c:	d8800115 	stw	r2,4(sp)
 1008050:	00800034 	movhi	r2,0
 1008054:	10800004 	addi	r2,r2,0
 1008058:	1005003a 	cmpeq	r2,r2,zero
 100805c:	d8800215 	stw	r2,8(sp)
 1008060:	d8800117 	ldw	r2,4(sp)
 1008064:	dd400815 	stw	r21,32(sp)
 1008068:	dd000715 	stw	r20,28(sp)
 100806c:	10805204 	addi	r2,r2,328
 1008070:	dfc00c15 	stw	ra,48(sp)
 1008074:	ddc00a15 	stw	r23,40(sp)
 1008078:	dd800915 	stw	r22,36(sp)
 100807c:	dcc00615 	stw	r19,24(sp)
 1008080:	dc800515 	stw	r18,20(sp)
 1008084:	dc400415 	stw	r17,16(sp)
 1008088:	dc000315 	stw	r16,12(sp)
 100808c:	282b883a 	mov	r21,r5
 1008090:	2039883a 	mov	fp,r4
 1008094:	d8800015 	stw	r2,0(sp)
 1008098:	2829003a 	cmpeq	r20,r5,zero
 100809c:	d8800117 	ldw	r2,4(sp)
 10080a0:	14405217 	ldw	r17,328(r2)
 10080a4:	88001026 	beq	r17,zero,10080e8 <__call_exitprocs+0xb0>
 10080a8:	ddc00017 	ldw	r23,0(sp)
 10080ac:	88800117 	ldw	r2,4(r17)
 10080b0:	8c802204 	addi	r18,r17,136
 10080b4:	143fffc4 	addi	r16,r2,-1
 10080b8:	80000916 	blt	r16,zero,10080e0 <__call_exitprocs+0xa8>
 10080bc:	05bfffc4 	movi	r22,-1
 10080c0:	a000151e 	bne	r20,zero,1008118 <__call_exitprocs+0xe0>
 10080c4:	8409883a 	add	r4,r16,r16
 10080c8:	2105883a 	add	r2,r4,r4
 10080cc:	1485883a 	add	r2,r2,r18
 10080d0:	10c02017 	ldw	r3,128(r2)
 10080d4:	a8c01126 	beq	r21,r3,100811c <__call_exitprocs+0xe4>
 10080d8:	843fffc4 	addi	r16,r16,-1
 10080dc:	85bff81e 	bne	r16,r22,10080c0 <__call_exitprocs+0x88>
 10080e0:	d8800217 	ldw	r2,8(sp)
 10080e4:	10003126 	beq	r2,zero,10081ac <__call_exitprocs+0x174>
 10080e8:	dfc00c17 	ldw	ra,48(sp)
 10080ec:	df000b17 	ldw	fp,44(sp)
 10080f0:	ddc00a17 	ldw	r23,40(sp)
 10080f4:	dd800917 	ldw	r22,36(sp)
 10080f8:	dd400817 	ldw	r21,32(sp)
 10080fc:	dd000717 	ldw	r20,28(sp)
 1008100:	dcc00617 	ldw	r19,24(sp)
 1008104:	dc800517 	ldw	r18,20(sp)
 1008108:	dc400417 	ldw	r17,16(sp)
 100810c:	dc000317 	ldw	r16,12(sp)
 1008110:	dec00d04 	addi	sp,sp,52
 1008114:	f800283a 	ret
 1008118:	8409883a 	add	r4,r16,r16
 100811c:	88c00117 	ldw	r3,4(r17)
 1008120:	2105883a 	add	r2,r4,r4
 1008124:	1445883a 	add	r2,r2,r17
 1008128:	18ffffc4 	addi	r3,r3,-1
 100812c:	11800217 	ldw	r6,8(r2)
 1008130:	1c001526 	beq	r3,r16,1008188 <__call_exitprocs+0x150>
 1008134:	10000215 	stw	zero,8(r2)
 1008138:	303fe726 	beq	r6,zero,10080d8 <__call_exitprocs+0xa0>
 100813c:	00c00044 	movi	r3,1
 1008140:	1c06983a 	sll	r3,r3,r16
 1008144:	90804017 	ldw	r2,256(r18)
 1008148:	8cc00117 	ldw	r19,4(r17)
 100814c:	1884703a 	and	r2,r3,r2
 1008150:	10001426 	beq	r2,zero,10081a4 <__call_exitprocs+0x16c>
 1008154:	90804117 	ldw	r2,260(r18)
 1008158:	1884703a 	and	r2,r3,r2
 100815c:	10000c1e 	bne	r2,zero,1008190 <__call_exitprocs+0x158>
 1008160:	2105883a 	add	r2,r4,r4
 1008164:	1485883a 	add	r2,r2,r18
 1008168:	11400017 	ldw	r5,0(r2)
 100816c:	e009883a 	mov	r4,fp
 1008170:	303ee83a 	callr	r6
 1008174:	88800117 	ldw	r2,4(r17)
 1008178:	98bfc81e 	bne	r19,r2,100809c <__call_exitprocs+0x64>
 100817c:	b8800017 	ldw	r2,0(r23)
 1008180:	147fd526 	beq	r2,r17,10080d8 <__call_exitprocs+0xa0>
 1008184:	003fc506 	br	100809c <__call_exitprocs+0x64>
 1008188:	8c000115 	stw	r16,4(r17)
 100818c:	003fea06 	br	1008138 <__call_exitprocs+0x100>
 1008190:	2105883a 	add	r2,r4,r4
 1008194:	1485883a 	add	r2,r2,r18
 1008198:	11000017 	ldw	r4,0(r2)
 100819c:	303ee83a 	callr	r6
 10081a0:	003ff406 	br	1008174 <__call_exitprocs+0x13c>
 10081a4:	303ee83a 	callr	r6
 10081a8:	003ff206 	br	1008174 <__call_exitprocs+0x13c>
 10081ac:	88800117 	ldw	r2,4(r17)
 10081b0:	1000081e 	bne	r2,zero,10081d4 <__call_exitprocs+0x19c>
 10081b4:	89000017 	ldw	r4,0(r17)
 10081b8:	20000726 	beq	r4,zero,10081d8 <__call_exitprocs+0x1a0>
 10081bc:	b9000015 	stw	r4,0(r23)
 10081c0:	8809883a 	mov	r4,r17
 10081c4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 10081c8:	bc400017 	ldw	r17,0(r23)
 10081cc:	883fb71e 	bne	r17,zero,10080ac <__call_exitprocs+0x74>
 10081d0:	003fc506 	br	10080e8 <__call_exitprocs+0xb0>
 10081d4:	89000017 	ldw	r4,0(r17)
 10081d8:	882f883a 	mov	r23,r17
 10081dc:	2023883a 	mov	r17,r4
 10081e0:	883fb21e 	bne	r17,zero,10080ac <__call_exitprocs+0x74>
 10081e4:	003fc006 	br	10080e8 <__call_exitprocs+0xb0>

010081e8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 10081e8:	defffd04 	addi	sp,sp,-12
 10081ec:	df000215 	stw	fp,8(sp)
 10081f0:	df000204 	addi	fp,sp,8
 10081f4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 10081f8:	e0bfff17 	ldw	r2,-4(fp)
 10081fc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1008200:	e0bffe17 	ldw	r2,-8(fp)
 1008204:	1005003a 	cmpeq	r2,r2,zero
 1008208:	1000021e 	bne	r2,zero,1008214 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 100820c:	002af070 	cmpltui	zero,zero,43969
 1008210:	00000106 	br	1008218 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1008214:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1008218:	e037883a 	mov	sp,fp
 100821c:	df000017 	ldw	fp,0(sp)
 1008220:	dec00104 	addi	sp,sp,4
 1008224:	f800283a 	ret

01008228 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1008228:	defffd04 	addi	sp,sp,-12
 100822c:	dfc00215 	stw	ra,8(sp)
 1008230:	df000115 	stw	fp,4(sp)
 1008234:	df000104 	addi	fp,sp,4
 1008238:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 100823c:	e13fff17 	ldw	r4,-4(fp)
 1008240:	10081e80 	call	10081e8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1008244:	003fff06 	br	1008244 <_exit+0x1c>
 1008248:	01008034 	movhi	r4,512
